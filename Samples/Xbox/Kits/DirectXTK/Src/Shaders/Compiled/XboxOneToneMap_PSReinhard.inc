#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[72]
// Embedded Data:
//  0x00000048 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000043 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyz, r0.xyzx, cb0[0].xxxx
mad r0.xyz, r0.xyzx, cb0[0].xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o0.w, r0.w
div o0.xyz, r1.xyzx, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[72], bundle is:[154] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PSReinhard.pdb
// Shader Semantic Hash      : 0xc3dc71fcf2550df7
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 136 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 7;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x74, dwords=0x1D)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000014: C8090001
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400002
  s_buffer_load_dword  s0, s[12:15], 0x00               // 00000000002C: C2000D00
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000030: BF8C0070
  v_mul_legacy_f32  v4, s0, v0                          // 000000000034: 0E080000
  v_mul_legacy_f32  v5, s0, v1                          // 000000000038: 0E0A0200
  v_mul_legacy_f32  v6, s0, v2                          // 00000000003C: 0E0C0400
  v_mad_f32     v0, v0, s0, 1.0                         // 000000000040: D2820000 03C80100
  v_mad_f32     v1, v1, s0, 1.0                         // 000000000048: D2820001 03C80101
  v_mad_f32     v2, v2, s0, 1.0                         // 000000000050: D2820002 03C80102
  v_rcp_f32     v0, v0                                  // 000000000058: 7E005500
  v_mul_f32     v0, v4, v0                              // 00000000005C: 10000104
  v_rcp_f32     v1, v1                                  // 000000000060: 7E025501
  v_mul_f32     v1, v5, v1                              // 000000000064: 10020305
  v_rcp_f32     v2, v2                                  // 000000000068: 7E045502
  v_mul_f32     v2, v6, v2                              // 00000000006C: 10040506
  s_mov_b64     exec, s[16:17]                          // 000000000070: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000074: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000078: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 00000000007C: F8001C0F 00000100
  s_endpgm                                              // 000000000084: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   7
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   85
//  CycleSimNWaves:             85
//  Code Size:                  136
//Assembler Counts:
//  num_32bit_ops                     : 24
//  num_64bit_ops                     : 5
//  num_alu                           : 18
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 3
//  num_inst_vop2                     : 8
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 7
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 136
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 85
// m_uCycleSimNWaves                 : 85

// Assembler Counts:
// num_32bit_ops                     : 24
// num_64bit_ops                     : 5
// num_alu                           : 18
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 3
// num_inst_vop2                     : 8
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PSReinhard[] =
{
     68,  88,  66,  67, 199, 245, 
    226,  22, 222, 151, 155,  56, 
     64, 172,  29, 175,  72, 145, 
    158, 254,   1,   0,   0,   0, 
    191,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0,  88,   4,   0,   0, 
    104,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 144,   3, 
      0,   0,  80,   0,   0,   0, 
    228,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     72,   0,   0,   0,  80,   0, 
      0,   0,  67,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   2,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      6, 128,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     50,   0,   0,  13, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,   6, 128,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0, 128,  63, 
      0,   0,   0,   0,  54,   0, 
      0,   5, 130,  32,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     14,   0,   0,   7, 114,  32, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    156,   0,   0,   0,  23,   0, 
      1,   0,  41, 188,  15,   0, 
    120,   1, 237,  87,  61, 111, 
    211,  80,  20, 189, 239, 217, 
    249, 104, 112,  18,  11,  49, 
     20,   9, 164,  14,  29,  24, 
     16,  75, 153, 152, 160,  68, 
     98, 168,  16,  21,  77, 164, 
    170, 122, 106, 155,  52, 150, 
     26,   9,  18, 147,  68, 168, 
    147, 105,  59, 117,  96, 232, 
      8,  72, 108, 140, 252,   2, 
    132,  18, 190, 134, 204, 204, 
    140, 172,  72, 136,   5, 134, 
    168, 112, 143, 243,  94, 121, 
      4, 186,  89,   2,   9,  31, 
    233, 220, 227, 227, 103, 223, 
     92, 251,  58, 210, 125,  47, 
    203,  20, 163, 247,  52, 154, 
    131, 126,  10,  95, 236, 120, 
    130,  40, 195, 199,  44, 177, 
      2, 143, 138, 136,  68,  97, 
      9, 145, 232,   2,   2,  46, 
    144,  68,  57, 150,  51, 204, 
      3, 230,  85,  38, 214,  12, 
     23,  22, 114, 139,  79,  30, 
    151,  23, 249, 144, 124, 102, 
    129,  89, 211, 156, 101,  34, 
    255, 105, 230,  12,  19, 233, 
      0, 163, 128, 131, 192, 112, 
     17,  44, 224, 124, 158, 105, 
    128, 117,  46,  37,   6, 212, 
    206,  65,   1, 194, 159, 113, 
    158, 137, 250,  79,   2, 106, 
     51, 185, 160, 168,  19, 192, 
    243, 254, 109,  76, 234, 250, 
     25,  65, 211,  39,   0, 253, 
    176, 129, 214, 225,  26,  96, 
     78, 247, 209, 188, 223, 203, 
    218, 155,  94, 190,  98, 158, 
    132, 239,  12, 244, 210, 134, 
    241, 200, 159,  21, 156, 213, 
    110, 206, 127,   6, 243, 173, 
    226,  93, 224,  91, 196, 187, 
    209, 127, 179,  24, 102,  29, 
    223,  30, 209, 238,  16,  60, 
    156, 165, 111, 112, 198, 139, 
     41, 239, 192,  35, 161, 237, 
    209,  60, 135, 214, 101,  78, 
    174, 151, 207, 233, 117, 135, 
     20, 123, 101, 249,  53, 246, 
    107, 150, 223, 100, 191, 105, 
    249,   6, 251, 198, 177, 215, 
    249, 203, 241, 239,  73,   7, 
    189, 230, 147, 209, 191, 204, 
    180, 198, 100, 152, 214, 152, 
     12, 211,  26, 147,  97,  90, 
     99,  50,  76, 107,  76, 134, 
    105, 141, 201,  48, 173,  49, 
     49,  82, 228,  30,  14, 162, 
    194, 209,  64,  58, 227,   1, 
    207, 111, 175, 121, 240,  30, 
      9, 154,  25, 145, 240,  70, 
     66,  20,  71,  15, 232, 225, 
    144, 202, 187, 159,  37, 118, 
    102,  69, 122,  19, 194,  83, 
    190,  68, 178,  80,  34, 215, 
    227, 169, 127, 255,  61, 137, 
    145,  35,  88,   5, 171, 100, 
    149, 172, 188,  65, 139,  92, 
     65, 190, 168, 201,  40, 227, 
     72,  95, 214, 220,  40, 155, 
    113, 125, 223,  61,  26, 240, 
    204, 248, 235, 204,  73, 123, 
    195, 179,  80,  12, 187, 211, 
    200, 199,  23,  28,  35, 118, 
    156, 216, 222,  30, 196, 183, 
    241,  57,  15, 170, 241,  92, 
    239,  71,  14, 180, 206,  51, 
     39, 123,  68,  12, 189, 147, 
     60,  46, 101,  57,  18, 125, 
     45, 214, 190, 140, 239, 125, 
    120, 139,  99, 224, 163, 190, 
    231, 157,  86, 108, 108, 237, 
    220,  68, 207,  16, 126, 131, 
    167, 135, 244, 177, 190,  15, 
    115,  59, 102, 245, 146, 217, 
      5, 235, 243,  23, 245, 117, 
    243,  90, 241,  44, 167, 152, 
    211, 117,  84, 244, 250,  50, 
     19, 149,  86, 174, 168, 107, 
    213,  27, 170, 215, 223, 104, 
      6, 247, 213,  82, 171, 223, 
     83, 149,  86,  55, 216, 234, 
    175,  86, 151,  84, 175, 187, 
    165,  86, 182, 235, 205, 160, 
    219,  83, 215,  59, 119, 195, 
    214, 157, 160, 169,  86,  27, 
    157, 157,  91, 237, 160, 218, 
    105,   7,  55, 235, 225, 198, 
    242, 202, 237, 160, 213, 222, 
    174, 119, 155, 151, 194, 102, 
    131, 126,   0, 174, 133, 224, 
     26,   0,  88,  72,  83,  72, 
      8,   0,   0,   0, 247,  13, 
     85, 242, 252, 113, 220, 195, 
     88,  80,  68,  80,  79,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  84, 
    111, 110, 101,  77,  97, 112, 
     95,  80,  83,  82, 101, 105, 
    110, 104,  97, 114, 100,  46, 
    112, 100,  98
};
