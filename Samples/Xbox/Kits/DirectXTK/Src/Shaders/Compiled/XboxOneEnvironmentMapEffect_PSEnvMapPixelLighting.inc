#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[308]
// Embedded Data:
//  0x00000134 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000012f - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_output o0.xyzw
dcl_temps 3
add r0.xyz, -v1.xyzx, cb0[10].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v2.xyzx
dp3 r0.w, -r0.xyzx, r1.xyzx
add r0.w, r0.w, r0.w
mad r0.xyz, r1.xyzx, -r0.wwww, -r0.xyzx
sample_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t1.xyzw, s1
dp3 r2.x, -cb0[4].xyzx, r1.xyzx
dp3 r2.y, -cb0[5].xyzx, r1.xyzx
dp3 r2.z, -cb0[6].xyzx, r1.xyzx
ge r1.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
and r1.xyz, r1.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r1.xyz, r2.xyzx, r1.xyzx
mul r2.xyz, r1.yyyy, cb0[8].xyzx
mad r1.xyw, r1.xxxx, cb0[7].xyxz, r2.xyxz
mad r1.xyz, r1.zzzz, cb0[9].xyzx, r1.xywx
mad r1.xyz, r1.xyzx, cb0[2].xyzx, cb0[3].xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v0.xyxx, t0.xyzw, s0
mul r2.xyzw, r2.xyzw, v3.xyzw
mul r1.xyz, r1.xyzx, r2.xyzx
mad r0.xyz, r0.xyzx, r2.wwww, -r1.xyzx
mul r0.w, r0.w, r2.w
mad r0.xyz, cb0[1].xxxx, r0.xyzx, r1.xyzx
mad r0.xyz, cb0[0].xyzx, r0.wwww, r0.xyzx
mad r1.xyz, cb0[11].xyzx, r2.wwww, -r0.xyzx
mad o0.xyz, v1.wwww, r1.xyzx, r0.xyzx
mov o0.w, r2.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[308], bundle is:[280] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneEnvironmentMapEffect_PSEnvMapPixelLighting.pdb
// Shader Semantic Hash      : 0x42c08382d78f71e
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask  3, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask 15, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  7, param2, paramSlot2, DefaultVal={0,0,0,0}
;   [3] generic,  usageIdx 3, channelMask 15, param3, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 708 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 5;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
;  extUserElements 1[4] = IMM_CONST_BUFFER 0, offset 0x18:27 dwords
NumVgprs             = 20;
NumSgprs             = 36;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000004
SPIC:NUM_INTERP             = 4
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

dx9TexCubeMask           = 0x00000002

; export table for mrt0 [patch@(bytes=0x2B0, dwords=0xAC)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v6, off, off done vm          // 000000000008: F8001803 00000602
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v6                       // 000000000004: 5E020D04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v6                      // 000000000004: 5C020D04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v6                      // 000000000004: 5A020D04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v6                          // 000000000004: 60020D04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v6                          // 000000000004: 62020D04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v6 done vm            // 000000000008: F800180F 06040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[32:33], exec                          // 000000000000: BEA0047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx4  s[4:7], s[0:1], 0x18                  // 000000000008: C0820118
  s_waitcnt     lgkmcnt(0)                              // 00000000000C: BF8C007F
  s_buffer_load_dwordx4  s[8:11], s[4:7], 0x28          // 000000000010: C2840528
  s_mov_b32     m0, s2                                  // 000000000014: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.z                      // 000000000018: C8080600
  v_interp_p1_f32  v3, v0, attr1.y                      // 00000000001C: C80C0500
  v_interp_p2_f32  v2, v1, attr1.z                      // 000000000020: C8090601
  v_interp_p1_f32  v4, v0, attr2.z                      // 000000000024: C8100A00
  v_interp_p1_f32  v5, v0, attr1.x                      // 000000000028: C8140400
  v_interp_p2_f32  v3, v1, attr1.y                      // 00000000002C: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000030: BF8C007F
  v_sub_f32     v2, s10, v2                             // 000000000034: 0804040A
  v_interp_p1_f32  v6, v0, attr2.y                      // 000000000038: C8180900
  v_interp_p2_f32  v4, v1, attr2.z                      // 00000000003C: C8110A01
  v_interp_p2_f32  v5, v1, attr1.x                      // 000000000040: C8150401
  v_sub_f32     v3, s9, v3                              // 000000000044: 08060609
  v_mul_legacy_f32  v7, v2, v2                          // 000000000048: 0E0E0502
  v_interp_p1_f32  v8, v0, attr2.x                      // 00000000004C: C8200800
  v_interp_p2_f32  v6, v1, attr2.y                      // 000000000050: C8190901
  v_mul_legacy_f32  v9, v4, v4                          // 000000000054: 0E120904
  v_sub_f32     v5, s8, v5                              // 000000000058: 080A0A08
  v_mac_f32     v7, v3, v3                              // 00000000005C: 3E0E0703
  v_interp_p2_f32  v8, v1, attr2.x                      // 000000000060: C8210801
  v_mac_f32     v9, v6, v6                              // 000000000064: 3E120D06
  v_mac_f32     v7, v5, v5                              // 000000000068: 3E0E0B05
  v_mac_f32     v9, v8, v8                              // 00000000006C: 3E121108
  v_rsq_f32     v7, v7                                  // 000000000070: 7E0E5D07
  v_rsq_f32     v9, v9                                  // 000000000074: 7E125D09
  v_mul_legacy_f32  v2, v2, v7                          // 000000000078: 0E040F02
  v_mul_legacy_f32  v4, v4, v9                          // 00000000007C: 0E081304
  v_mul_legacy_f32  v3, v3, v7                          // 000000000080: 0E060F03
  v_mul_legacy_f32  v6, v6, v9                          // 000000000084: 0E0C1306
  v_mul_legacy_f32  v10, -v2, v4                        // 000000000088: D20E000A 20020902
  s_load_dwordx8  s[8:15], s[0:1], 0x00                 // 000000000090: C0C40100
  s_load_dwordx16  s[16:31], s[0:1], 0x08               // 000000000094: C1080108
  v_mul_legacy_f32  v5, v5, v7                          // 000000000098: 0E0A0F05
  v_mul_legacy_f32  v7, v8, v9                          // 00000000009C: 0E0E1308
  v_mad_legacy_f32  v10, -v3, v6, v10                   // 0000000000A0: D280000A 242A0D03
  v_mad_legacy_f32  v10, -v5, v7, v10 mul:2             // 0000000000A8: D280000A 2C2A0F05
  v_mad_legacy_f32  v5, v7, -v10, -v5                   // 0000000000B0: D2800005 C4161507
  v_mad_legacy_f32  v3, v6, -v10, -v3                   // 0000000000B8: D2800003 C40E1506
  v_mad_legacy_f32  v2, v4, -v10, -v2                   // 0000000000C0: D2800002 C40A1504
  v_interp_p1_f32  v8, v0, attr0.x                      // 0000000000C8: C8200000
  v_interp_p1_f32  v9, v0, attr0.y                      // 0000000000CC: C8240100
  v_cubema_f32  v10, v5, v3, v2                         // 0000000000D0: D28E000A 040A0705
  v_interp_p2_f32  v8, v1, attr0.x                      // 0000000000D8: C8210001
  v_interp_p2_f32  v9, v1, attr0.y                      // 0000000000DC: C8250101
  v_cubetc_f32  v11, v5, v3, v2                         // 0000000000E0: D28C000B 040A0705
  v_cubesc_f32  v12, v5, v3, v2                         // 0000000000E8: D28A000C 040A0705
  v_rcp_f32     v10, abs(v10)                           // 0000000000F0: D354010A 0000010A
  s_waitcnt     lgkmcnt(0)                              // 0000000000F8: BF8C007F
  image_sample  v[13:16], v[8:9], s[8:15], s[24:27] dmask:0xf // 0000000000FC: F0800F00 00C20D08
  v_cubeid_f32  v19, v5, v3, v2                         // 000000000104: D2880013 040A0705
  v_madak_f32   v18, v11, v10, 0x3fc00000               // 00000000010C: 4224150B 3FC00000
  v_madak_f32   v17, v12, v10, 0x3fc00000               // 000000000114: 4222150C 3FC00000
  image_sample  v[8:11], v[17:18], s[16:23], s[28:31] dmask:0xf // 00000000011C: F0800F00 00E40811
  s_buffer_load_dwordx4  s[0:3], s[4:7], 0x14           // 000000000124: C2800514
  s_buffer_load_dwordx4  s[8:11], s[4:7], 0x10          // 000000000128: C2840510
  s_buffer_load_dwordx4  s[12:15], s[4:7], 0x18         // 00000000012C: C2860518
  s_buffer_load_dwordx4  s[16:19], s[4:7], 0x20         // 000000000130: C2880520
  s_waitcnt     lgkmcnt(0)                              // 000000000134: BF8C007F
  v_mul_legacy_f32  v2, v4, -s2                         // 000000000138: D20E0002 40000504
  s_buffer_load_dwordx4  s[20:23], s[4:7], 0x1c         // 000000000140: C28A051C
  v_mul_legacy_f32  v3, v4, -s10                        // 000000000144: D20E0003 40001504
  v_mad_legacy_f32  v2, -s1, v6, v2                     // 00000000014C: D2800002 240A0C01
  s_buffer_load_dwordx4  s[24:27], s[4:7], 0x0c         // 000000000154: C28C050C
  s_buffer_load_dwordx4  s[28:31], s[4:7], 0x24         // 000000000158: C28E0524
  v_mad_legacy_f32  v3, -s9, v6, v3                     // 00000000015C: D2800003 240E0C09
  v_mad_legacy_f32  v2, -s0, v7, v2                     // 000000000164: D2800002 240A0E00
  v_mul_legacy_f32  v4, v4, -s14                        // 00000000016C: D20E0004 40001D04
  s_buffer_load_dwordx4  s[0:3], s[4:7], 0x08           // 000000000174: C2800508
  v_mad_legacy_f32  v3, -s8, v7, v3                     // 000000000178: D2800003 240E0E08
  v_mad_legacy_f32  v4, -s13, v6, v4                    // 000000000180: D2800004 24120C0D
  v_cmp_ge_f32  s[8:9], v2, 0                           // 000000000188: D00C0008 00010102
  v_mad_legacy_f32  v4, -s12, v7, v4                    // 000000000190: D2800004 24120E0C
  v_cmp_le_f32  vcc, 0, v3                              // 000000000198: 7C060680
  v_cndmask_b32  v2, 0, v2, s[8:9]                      // 00000000019C: D2000002 00220480
  v_cmp_ge_f32  s[8:9], v4, 0                           // 0000000001A4: D00C0008 00010104
  v_cndmask_b32  v3, 0, v3, vcc                         // 0000000001AC: 00060680
  v_mul_legacy_f32  v5, s16, v2                         // 0000000001B0: 0E0A0410
  v_mul_legacy_f32  v6, s17, v2                         // 0000000001B4: 0E0C0411
  v_mul_legacy_f32  v2, s18, v2                         // 0000000001B8: 0E040412
  s_waitcnt     lgkmcnt(0)                              // 0000000001BC: BF8C007F
  s_buffer_load_dword  s3, s[4:7], 0x04                 // 0000000001C0: C2018504
  v_cndmask_b32  v4, 0, v4, s[8:9]                      // 0000000001C4: D2000004 00220880
  v_mac_f32     v5, s20, v3                             // 0000000001CC: 3E0A0614
  v_mac_f32     v6, s21, v3                             // 0000000001D0: 3E0C0615
  v_mac_f32     v2, s22, v3                             // 0000000001D4: 3E040616
  v_interp_p1_f32  v3, v0, attr3.x                      // 0000000001D8: C80C0C00
  v_interp_p1_f32  v7, v0, attr3.y                      // 0000000001DC: C81C0D00
  v_interp_p1_f32  v12, v0, attr3.z                     // 0000000001E0: C8300E00
  s_buffer_load_dwordx4  s[8:11], s[4:7], 0x00          // 0000000001E4: C2840500
  v_mac_f32     v5, s28, v4                             // 0000000001E8: 3E0A081C
  v_mac_f32     v6, s29, v4                             // 0000000001EC: 3E0C081D
  v_mac_f32     v2, s30, v4                             // 0000000001F0: 3E04081E
  v_mov_b32     v4, s24                                 // 0000000001F4: 7E080218
  v_mov_b32     v17, s25                                // 0000000001F8: 7E220219
  v_mov_b32     v18, s26                                // 0000000001FC: 7E24021A
  v_interp_p2_f32  v3, v1, attr3.x                      // 000000000200: C80D0C01
  v_interp_p2_f32  v7, v1, attr3.y                      // 000000000204: C81D0D01
  v_interp_p2_f32  v12, v1, attr3.z                     // 000000000208: C8310E01
  v_interp_p1_f32  v19, v0, attr3.w                     // 00000000020C: C84C0F00
  s_buffer_load_dwordx4  s[4:7], s[4:7], 0x2c           // 000000000210: C282052C
  v_mac_f32     v4, s0, v5                              // 000000000214: 3E080A00
  v_mac_f32     v17, s1, v6                             // 000000000218: 3E220C01
  v_mac_f32     v18, s2, v2                             // 00000000021C: 3E240402
  v_interp_p2_f32  v19, v1, attr3.w                     // 000000000220: C84D0F01
  s_waitcnt     vmcnt(1)                                // 000000000224: BF8C0F71
  v_mul_legacy_f32  v2, v13, v3                         // 000000000228: 0E04070D
  v_mul_legacy_f32  v3, v14, v7                         // 00000000022C: 0E060F0E
  v_mul_legacy_f32  v5, v15, v12                        // 000000000230: 0E0A190F
  v_mul_legacy_f32  v6, v16, v19                        // 000000000234: 0E0C2710
  v_mul_legacy_f32  v2, v4, v2                          // 000000000238: 0E040504
  v_mul_legacy_f32  v3, v17, v3                         // 00000000023C: 0E060711
  v_mul_legacy_f32  v4, v18, v5                         // 000000000240: 0E080B12
  s_waitcnt     vmcnt(0)                                // 000000000244: BF8C0F70
  v_mad_legacy_f32  v5, v8, v6, -v2                     // 000000000248: D2800005 840A0D08
  v_mad_legacy_f32  v7, v9, v6, -v3                     // 000000000250: D2800007 840E0D09
  v_mad_legacy_f32  v8, v10, v6, -v4                    // 000000000258: D2800008 84120D0A
  v_mul_legacy_f32  v9, v11, v6                         // 000000000260: 0E120D0B
  s_waitcnt     lgkmcnt(0)                              // 000000000264: BF8C007F
  v_mac_f32     v2, s3, v5                              // 000000000268: 3E040A03
  v_mac_f32     v3, s3, v7                              // 00000000026C: 3E060E03
  v_mac_f32     v4, s3, v8                              // 000000000270: 3E081003
  v_mac_f32     v2, s8, v9                              // 000000000274: 3E041208
  v_mac_f32     v3, s9, v9                              // 000000000278: 3E061209
  v_mac_f32     v4, s10, v9                             // 00000000027C: 3E08120A
  v_interp_p1_f32  v0, v0, attr1.w                      // 000000000280: C8000700
  v_mad_legacy_f32  v5, s4, v6, -v2                     // 000000000284: D2800005 840A0C04
  v_mad_legacy_f32  v7, s5, v6, -v3                     // 00000000028C: D2800007 840E0C05
  v_mad_legacy_f32  v8, s6, v6, -v4                     // 000000000294: D2800008 84120C06
  v_interp_p2_f32  v0, v1, attr1.w                      // 00000000029C: C8010701
  v_mac_f32     v2, v0, v5                              // 0000000002A0: 3E040B00
  v_mac_f32     v3, v0, v7                              // 0000000002A4: 3E060F00
  v_mac_f32     v4, v0, v8                              // 0000000002A8: 3E081100
  s_mov_b64     exec, s[32:33]                          // 0000000002AC: BEFE0420
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 0000000002B0: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v6                       // 0000000002B4: 5E020D04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000002B8: F8001C0F 00000100
  s_endpgm                                              // 0000000002C0: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   20
//  NumSRegs:                   36
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   123
//  CycleSimNWaves:             123
//  Code Size:                  708
//Assembler Counts:
//  num_32bit_ops                     : 109
//  num_64bit_ops                     : 33
//  num_alu                           : 111
//  num_fc                            : 28
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 9
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 5
//  num_inst_vop2                     : 49
//  num_inst_vop3                     : 15
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 26
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 2
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 20
// m_uNumSRegs                       : 36
// m_uSCCodeSize                     : 708
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 123
// m_uCycleSimNWaves                 : 123

// Assembler Counts:
// num_32bit_ops                     : 109
// num_64bit_ops                     : 33
// num_alu                           : 111
// num_fc                            : 28
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 9
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 5
// num_inst_vop2                     : 49
// num_inst_vop3                     : 15
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 26
// num_inst_smem                     : 15
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 2
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE EnvironmentMapEffect_PSEnvMapPixelLighting[] =
{
     68,  88,  66,  67, 217,  86, 
    217,  35, 189, 216, 200, 230, 
    183,  66,  94, 220,  30, 103, 
    107,  66,   1,   0,   0,   0, 
    167,  10,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0,  40,  10,   0,   0, 
     56,  10,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,   3,   3, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 104,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   7,   7, 
      0,   0, 113,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,  15,  15, 
      0,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0,  67, 
     79,  76,  79,  82,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,  56,   9,   0,   0, 
     80,   0,   0,   0,  78,   2, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  52,   1, 
      0,   0,  80,   0,   0,   0, 
     47,   1,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  24,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  88,  48, 
      0,   4,   0, 112,  16,   0, 
      1,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      3,   0,   0,   0,   0,   0, 
      0,   9, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16, 128,  65,   0,   0,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
     10,   0,   0,   0,  16,   0, 
      0,   7, 130,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  68,   0,   0,   5, 
    130,   0,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 114,   0,  16,   0, 
      0,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  16,   0,   0,   7, 
    130,   0,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      2,   0,   0,   0,  70,  18, 
     16,   0,   2,   0,   0,   0, 
     68,   0,   0,   5, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    114,   0,  16,   0,   1,   0, 
      0,   0, 246,  15,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16,   0,   2,   0,   0,   0, 
     16,   0,   0,   8, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,   0,   0,   0,   7, 
    130,   0,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  11, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0, 246,  15,  16, 128, 
     65,   0,   0,   0,   0,   0, 
      0,   0,  70,   2,  16, 128, 
     65,   0,   0,   0,   0,   0, 
      0,   0,  69,   0,   0, 139, 
    130,   1,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70, 126,  16,   0,   1,   0, 
      0,   0,   0,  96,  16,   0, 
      1,   0,   0,   0,  16,   0, 
      0,   9,  18,   0,  16,   0, 
      2,   0,   0,   0,  70, 130, 
     32, 128,  65,   0,   0,   0, 
      0,   0,   0,   0,   4,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  16,   0, 
      0,   9,  34,   0,  16,   0, 
      2,   0,   0,   0,  70, 130, 
     32, 128,  65,   0,   0,   0, 
      0,   0,   0,   0,   5,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  16,   0, 
      0,   9,  66,   0,  16,   0, 
      2,   0,   0,   0,  70, 130, 
     32, 128,  65,   0,   0,   0, 
      0,   0,   0,   0,   6,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  29,   0, 
      0,  10, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   2,   0,   0,   0, 
      2,  64,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   1,   0,   0,  10, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,   2,  64, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     56,   0,   0,   7, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      2,   0,   0,   0,  86,   5, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   0,   0, 
      0,   0,   8,   0,   0,   0, 
     50,   0,   0,  10, 178,   0, 
     16,   0,   1,   0,   0,   0, 
      6,   0,  16,   0,   1,   0, 
      0,   0,  70, 136,  32,   0, 
      0,   0,   0,   0,   7,   0, 
      0,   0,  70,   8,  16,   0, 
      2,   0,   0,   0,  50,   0, 
      0,  10, 114,   0,  16,   0, 
      1,   0,   0,   0, 166,  10, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   0,   0, 
      0,   0,   9,   0,   0,   0, 
     70,   3,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,  11, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
      2,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   2,   0,   0,   0, 
     70,  16,  16,   0,   0,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,   7, 242,   0, 
     16,   0,   2,   0,   0,   0, 
     70,  14,  16,   0,   2,   0, 
      0,   0,  70,  30,  16,   0, 
      3,   0,   0,   0,  56,   0, 
      0,   7, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,  50,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0, 246,  15, 
     16,   0,   2,   0,   0,   0, 
     70,   2,  16, 128,  65,   0, 
      0,   0,   1,   0,   0,   0, 
     56,   0,   0,   7, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      2,   0,   0,   0,  50,   0, 
      0,  10, 114,   0,  16,   0, 
      0,   0,   0,   0,   6, 128, 
     32,   0,   0,   0,   0,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 246,  15,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  11, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   0,   0, 
      0,   0,  11,   0,   0,   0, 
    246,  15,  16,   0,   2,   0, 
      0,   0,  70,   2,  16, 128, 
     65,   0,   0,   0,   0,   0, 
      0,   0,  50,   0,   0,   9, 
    114,  32,  16,   0,   0,   0, 
      0,   0, 246,  31,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      2,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
     26,   1,   0,   0,  23,   0, 
      1,   0,  41,  56,  18,   0, 
    120,   1, 237,  88, 207, 107, 
     27,  71,  20, 126, 179,  59, 
    187, 154,  29, 205, 206,  74, 
    107,  43, 200, 193,  78, 109, 
    179,  37,  38, 184,  63, 114, 
     11,  61, 108, 220,  54, 161, 
    129,  36,  52,  16,  31,  66, 
     80,  18, 199, 177,  18,  11, 
     98,  91, 181,  77,  48, 180, 
    168, 219,  84,  45,  38,  24, 
    147,  67,  15,  61, 246, 208, 
     67,  15, 189, 245,  90, 108, 
     87, 248,  48, 135,  22, 130, 
    218,  63, 161, 199,  30,  74, 
    161, 244,   7,  37, 237, 123, 
    235, 221,  68,  73, 155, 155, 
    160, 165, 232, 131, 111, 222, 
    126, 243,  75, 223, 204, 219, 
    195,  62, 157,   8,  33, 197, 
    251, 103, 190, 152, 163, 248, 
    209, 111,  47, 253, 244,  37, 
      7, 112, 240, 153,  33,  41, 
     18,  62, 246, 169,   5, 248, 
    174,  68,  45, 192,  20,  53, 
     52, 193,   2,  24, 198,  16, 
     33, 247, 241, 121,   6,  35, 
    141, 229, 252, 230, 235, 159, 
     95,   3, 248,  29,   9,  48, 
    142, 164, 185, 111, 103,  92, 
     66,  78,  32,  87, 144, 163, 
     72, 218, 142, 128, 219,  60, 
    130,  71,  13,   2,  45,  61, 
      1, 242, 117,  28,  25,  32, 
    105, 221,  97,  36,  61,  19, 
    108, 100, 239,  30,  80, 167, 
    230, 159, 177, 141,  36,  79, 
    207,   2, 121, 203, 247, 162, 
    223,  33, 159,   4,  58, 239, 
    191,  13, 242, 147, 187, 163, 
     51, 147, 206, 243,  68, 160, 
    124, 244,  66,  35,  15, 214, 
      0, 212, 178,  60, 230, 249, 
    109, 102, 154, 238, 130, 206, 
    182, 135, 124,  22, 254,  68, 
    228, 247, 144,  35, 215, 148, 
     39,  55, 117, 131, 145,  61, 
      7,  32,  48,  90,  71,   1, 
    112, 127, 215,  62,   9,  80, 
    165, 145, 255,  55, 242, 119, 
    149,  34, 165, 128, 174,  54, 
    127,  55,   9, 249, 248, 231, 
    212,  64, 178,  75, 188,  95, 
    133,  95,  73, 229, 154, 161, 
     62,  72, 223, 129, 182,  73, 
    167, 215, 218, 163,  93, 220, 
    191,   0,  87, 185, 111,  93, 
     13,  70, 113,  61,  38,  23, 
    117,  13, 117, 173,  71,  95, 
     70, 125, 185,  71, 207, 161, 
    158, 235, 209, 243, 168, 231, 
    115, 157, 239,  31, 164, 191, 
    199,  93, 202,  53, 118, 182, 
    254, 203,  28, 120, 236,  15, 
      7,  30, 251, 195, 129, 199, 
    254, 112, 224, 177,  63,  28, 
    120, 236,  15,   7,  30, 251, 
    195, 129, 199, 254, 144, 190, 
     15,  91, 252, 147, 157, 150, 
    124, 184,  83, 101, 119, 247, 
    222, 133, 173, 221,  41, 167, 
    221, 177, 236,  63, 118, 192, 
     21,   6,  28, 101, 152, 235, 
     25, 144,  37,   3, 124, 216, 
     48, 199,  55,  52,  71, 114, 
     46, 192, 171,  26,  38, 203, 
    134, 241, 138, 241,  92,  87, 
     88, 142, 214,  32, 198,  13, 
    243,  70,  12, 247,  66,  45, 
    164,  20, 118,  65, 199,  76, 
     76,  24, 215,  15,  99, 167, 
    168,  99,  81,  14, 227, 194, 
     21, 221, 242, 174, 132,  45, 
     43, 224, 154,  15,   9, 109, 
      7, 174, 118, 135, 148, 150, 
    160, 187, 150, 103, 141,   3, 
    219, 223,  19,  76, 124, 229, 
      4,  82, 139,  33, 141, 253, 
     73, 215, 246, 143,  69,  20, 
    157, 224, 216, 180, 131, 177, 
     80,  57, 180, 111,  99, 116, 
     43,  26,  75, 148, 164, 203, 
     43, 114,  31, 171,  67,   3, 
     44,  50,  18, 182, 187,  78, 
     65, 114,   6,  19, 134, 177, 
    231,  77,  17, 182,  82, 173, 
    224,  94,  26,  37, 155, 253, 
     86, 226, 119,  42, 157,   3, 
    130, 228,  71, 225, 119,  96, 
      8,  54, 211, 177,  98,  37, 
    194,  58, 115, 239, 164, 170, 
     76, 166, 145, 198, 203, 226, 
    123,  24, 118, 146,  78,   9, 
    239, 165, 234, 124, 216,  25, 
    119,  54,  59, 180, 214,  66, 
    191, 220, 129, 153,  81, 231, 
     94, 199, 166, 231,  10, 204, 
    144,  23, 166, 100, 164, 156, 
    173,  78, 228, 108,  99, 127, 
    210, 245, 148, 142, 168,  31, 
    180, 140,  56, 205,  27, 131, 
     25, 129, 251, 209, 152, 208, 
     26, 251, 146, 174, 175, 194, 
     72, 128, 122,  96,  49, 134, 
    223, 246,  73,  87, 233,  48, 
     74,  92, 247,  29, 204,  79, 
     55, 225, 147,  88,   2, 169, 
      7,  28, 199, 176,  15,  74, 
     92, 234,  50, 199,  25, 156, 
    107, 242, 193,  63,  96,  29, 
    172,   7, 186, 137, 152, 132, 
     97,  87, 198,  21,  87, 197, 
    135,  92,  30, 131,  82,   6, 
    252,  81,   3, 250, 101, 204, 
     99, 187,  51,  42, 100,  60, 
     38,  84, 124,  68, 240, 184, 
    106, 137, 214, 136,  53, 217, 
     58, 108,  69,  45, 166, 124, 
    195, 252,  49, 195, 244, 113, 
      3, 193,  57,  51, 237, 220, 
    237, 128,  20,  49,  83, 147, 
    177, 197, 163, 152,   5, 231, 
    205,  91, 193, 214, 174,  95, 
    224,  90,  99, 174, 130,  17, 
    169,  75,  71, 149, 230,  14, 
    215, 229, 130, 171, 195, 162, 
    208,  77,  28, 167, 188,   8, 
     95, 182,  11,  24,  61,  95, 
    183,   5,  70, 233, 135, 237, 
    162,  31, 166,  62, 109, 201, 
     99,  91, 187, 177,  93,  18, 
    177,   8, 121, 236, 133, 110, 
     44,  67,  17,  67,   1,  12, 
    173, 229, 234,  96, 173, 163, 
     14, 214, 186,  42, 108, 179, 
      2,  51,  80, 196, 179,   4, 
    110,  12, 101,  17, 143, 243, 
    135,  59,  88, 111,  60,  81, 
    175,   0, 188, 183,  59,  66, 
    145,  94, 230, 167,  33, 210, 
      9, 143,  65,  18, 251, 176, 
    164, 124, 132, 116,   6, 190, 
     45,  84,  99, 229, 192, 171, 
     78, 251, 122, 235, 250, 116, 
    123, 236, 235,  45,  63,  75, 
    101, 106,   1, 126, 200,  22, 
     83, 221,  75, 255,  55, 176, 
    172, 126, 165, 185,  28, 171, 
     89, 194, 145,  95,  54,  94, 
     56,  33, 166, 243, 210,  13, 
    206, 100, 107, 167, 178,  72, 
    255, 109,  40, 228,  99, 124, 
     74, 205, 223, 208, 204, 230, 
    207, 101, 145, 126, 154,  54, 
    213, 121,  37,  78,  69,  58, 
    226, 126,  54, 190, 153,  69, 
     58, 115,  17, 249, 180, 143, 
    207, 178, 241,  69,  36,  57, 
     61, 245,  74, 237, 213, 217, 
     55, 106, 107, 235, 215,  22, 
    234, 119, 106, 103,  27, 235, 
    107, 181,  83, 141, 213, 250, 
    141, 245,  75, 179, 103, 107, 
    107, 171,  55, 106,  23,  23, 
    175,  47, 212,  87, 215, 106, 
    175, 175,  44,  53,  27, 183, 
    235,  11, 181,  75, 243,  43, 
     27, 111,  46, 215,  79,  47, 
    223, 105, 172, 174,  44,  47, 
    213, 151, 215, 207,  95, 111, 
    158, 190, 121,  19, 215,  92, 
    187, 112,  17, 187,  81,  94, 
    104, 108, 212, 111, 159, 107, 
    220,  90,  92, 111,  44, 223, 
    122, 177, 185,  48,  15, 127, 
      1, 233,  87,  93,  19,   0, 
      0,   0,  88,  72,  83,  72, 
      8,   0,   0,   0,  30, 247, 
    120,  45,  56,   8,  44,   4, 
     88,  80,  68,  80, 103,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  69, 
    110, 118, 105, 114, 111, 110, 
    109, 101, 110, 116,  77,  97, 
    112,  69, 102, 102, 101,  99, 
    116,  95,  80,  83,  69, 110, 
    118,  77,  97, 112,  80, 105, 
    120, 101, 108,  76, 105, 103, 
    104, 116, 105, 110, 103,  46, 
    112, 100,  98
};
