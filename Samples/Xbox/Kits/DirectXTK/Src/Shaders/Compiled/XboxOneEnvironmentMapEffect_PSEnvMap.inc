#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[117]
// Embedded Data:
//  0x00000075 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000070 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texturecube)(float,float,float,float) r0.xyz, v3.xyzx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, v0.xyzw
mad r0.xyz, r0.xyzx, r1.wwww, -r1.xyzx
mad r0.xyz, v1.xyzx, r0.xyzx, r1.xyzx
mad r1.xyz, cb0[11].xyzx, r1.wwww, -r0.xyzx
mad o0.xyz, v1.wwww, r1.xyzx, r0.xyzx
mov o0.w, r1.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[117], bundle is:[205] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneEnvironmentMapEffect_PSEnvMap.pdb
// Shader Semantic Hash      : 0x2a2c2decf4332c36
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask 15, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}
;   [3] generic,  usageIdx 3, channelMask  7, param3, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 336 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 5;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
;  extUserElements 1[4] = IMM_CONST_BUFFER 0, offset 0x18:27 dwords
NumVgprs             = 13;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000004
SPIC:NUM_INTERP             = 4
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

dx9TexCubeMask           = 0x00000002

; export table for mrt0 [patch@(bytes=0x13C, dwords=0x4F)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, off, off, off done vm         // 000000000008: F8001801 00000005
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v6, off, off done vm          // 000000000008: F8001803 00000605
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v8, off, off done vm          // 000000000008: F8001803 00000805
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v5, v6                       // 000000000000: 5E000D05
  v_cvt_pkrtz_f16_f32  v1, v7, v8                       // 000000000004: 5E021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v5, v6                      // 000000000000: 5C000D05
  v_cvt_pknorm_u16_f32  v1, v7, v8                      // 000000000004: 5C021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v5, v6                      // 000000000000: 5A000D05
  v_cvt_pknorm_i16_f32  v1, v7, v8                      // 000000000004: 5A021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v5, v6                          // 000000000000: 60000D05
  v_cvt_pk_u16_u32  v1, v7, v8                          // 000000000004: 60021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v5, v6                          // 000000000000: 62000D05
  v_cvt_pk_i16_i32  v1, v7, v8                          // 000000000004: 62021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v6, v7, v8 done vm            // 000000000008: F800180F 08070605
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 00000000000C: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 000000000010: C0CA0110
  v_interp_p1_f32  v2, v0, attr3.x                      // 000000000014: C8080C00
  v_interp_p1_f32  v3, v0, attr3.y                      // 000000000018: C80C0D00
  v_interp_p1_f32  v4, v0, attr3.z                      // 00000000001C: C8100E00
  v_interp_p2_f32  v2, v1, attr3.x                      // 000000000020: C8090C01
  v_interp_p2_f32  v3, v1, attr3.y                      // 000000000024: C80D0D01
  v_interp_p2_f32  v4, v1, attr3.z                      // 000000000028: C8110E01
  v_cubema_f32  v5, v2, v3, v4                          // 00000000002C: D28E0005 04120702
  v_interp_p1_f32  v6, v0, attr2.x                      // 000000000034: C8180800
  v_interp_p1_f32  v7, v0, attr2.y                      // 000000000038: C81C0900
  v_cubetc_f32  v8, v2, v3, v4                          // 00000000003C: D28C0008 04120702
  v_cubesc_f32  v9, v2, v3, v4                          // 000000000044: D28A0009 04120702
  v_rcp_f32     v5, abs(v5)                             // 00000000004C: D3540105 00000105
  v_interp_p2_f32  v6, v1, attr2.x                      // 000000000054: C8190801
  v_interp_p2_f32  v7, v1, attr2.y                      // 000000000058: C81D0901
  v_cubeid_f32  v4, v2, v3, v4                          // 00000000005C: D2880004 04120702
  v_madak_f32   v3, v8, v5, 0x3fc00000                  // 000000000064: 42060B08 3FC00000
  v_madak_f32   v2, v9, v5, 0x3fc00000                  // 00000000006C: 42040B09 3FC00000
  s_waitcnt     lgkmcnt(0)                              // 000000000074: BF8C007F
  image_sample  v[5:8], v[6:7], s[4:11], s[20:23] dmask:0xf // 000000000078: F0800F00 00A10506
  image_sample  v[2:5], v[2:3], s[12:19], s[24:27] dmask:0x7 // 000000000080: F0800700 00C30202
  s_load_dwordx4  s[0:3], s[0:1], 0x18                  // 000000000088: C0800118
  s_waitcnt     lgkmcnt(0)                              // 00000000008C: BF8C007F
  s_buffer_load_dwordx4  s[0:3], s[0:3], 0x2c           // 000000000090: C280012C
  v_interp_p1_f32  v9, v0, attr0.x                      // 000000000094: C8240000
  v_interp_p1_f32  v10, v0, attr0.y                     // 000000000098: C8280100
  v_interp_p1_f32  v11, v0, attr0.z                     // 00000000009C: C82C0200
  v_interp_p1_f32  v12, v0, attr0.w                     // 0000000000A0: C8300300
  v_interp_p2_f32  v9, v1, attr0.x                      // 0000000000A4: C8250001
  v_interp_p2_f32  v10, v1, attr0.y                     // 0000000000A8: C8290101
  v_interp_p2_f32  v11, v1, attr0.z                     // 0000000000AC: C82D0201
  v_interp_p2_f32  v12, v1, attr0.w                     // 0000000000B0: C8310301
  s_waitcnt     vmcnt(1)                                // 0000000000B4: BF8C0F71
  v_mul_legacy_f32  v5, v5, v9                          // 0000000000B8: 0E0A1305
  v_mul_legacy_f32  v6, v6, v10                         // 0000000000BC: 0E0C1506
  v_mul_legacy_f32  v7, v7, v11                         // 0000000000C0: 0E0E1707
  v_mul_legacy_f32  v8, v8, v12                         // 0000000000C4: 0E101908
  v_interp_p1_f32  v9, v0, attr1.x                      // 0000000000C8: C8240400
  v_interp_p1_f32  v10, v0, attr1.y                     // 0000000000CC: C8280500
  v_interp_p1_f32  v11, v0, attr1.z                     // 0000000000D0: C82C0600
  s_waitcnt     vmcnt(0)                                // 0000000000D4: BF8C0F70
  v_mad_legacy_f32  v2, v2, v8, -v5                     // 0000000000D8: D2800002 84161102
  v_mad_legacy_f32  v3, v3, v8, -v6                     // 0000000000E0: D2800003 841A1103
  v_mad_legacy_f32  v4, v4, v8, -v7                     // 0000000000E8: D2800004 841E1104
  v_interp_p2_f32  v9, v1, attr1.x                      // 0000000000F0: C8250401
  v_interp_p2_f32  v10, v1, attr1.y                     // 0000000000F4: C8290501
  v_interp_p2_f32  v11, v1, attr1.z                     // 0000000000F8: C82D0601
  v_mac_f32     v5, v9, v2                              // 0000000000FC: 3E0A0509
  v_mac_f32     v6, v10, v3                             // 000000000100: 3E0C070A
  v_mac_f32     v7, v11, v4                             // 000000000104: 3E0E090B
  v_interp_p1_f32  v0, v0, attr1.w                      // 000000000108: C8000700
  s_waitcnt     lgkmcnt(0)                              // 00000000010C: BF8C007F
  v_mad_legacy_f32  v2, s0, v8, -v5                     // 000000000110: D2800002 84161000
  v_mad_legacy_f32  v3, s1, v8, -v6                     // 000000000118: D2800003 841A1001
  v_mad_legacy_f32  v4, s2, v8, -v7                     // 000000000120: D2800004 841E1002
  v_interp_p2_f32  v0, v1, attr1.w                      // 000000000128: C8010701
  v_mac_f32     v5, v0, v2                              // 00000000012C: 3E0A0500
  v_mac_f32     v6, v0, v3                              // 000000000130: 3E0C0700
  v_mac_f32     v7, v0, v4                              // 000000000134: 3E0E0900
  s_mov_b64     exec, s[28:29]                          // 000000000138: BEFE041C
  v_cvt_pkrtz_f16_f32  v0, v5, v6                       // 00000000013C: 5E000D05
  v_cvt_pkrtz_f16_f32  v1, v7, v8                       // 000000000140: 5E021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000144: F8001C0F 00000100
  s_endpgm                                              // 00000000014C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   13
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   85
//  CycleSimNWaves:             85
//  Code Size:                  336
//Assembler Counts:
//  num_32bit_ops                     : 54
//  num_64bit_ops                     : 14
//  num_alu                           : 51
//  num_fc                            : 14
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 6
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 14
//  num_inst_vop3                     : 13
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 26
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 13
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 336
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 85
// m_uCycleSimNWaves                 : 85

// Assembler Counts:
// num_32bit_ops                     : 54
// num_64bit_ops                     : 14
// num_alu                           : 51
// num_fc                            : 14
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 6
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 14
// num_inst_vop3                     : 13
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 26
// num_inst_smem                     : 4
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE EnvironmentMapEffect_PSEnvMap[] =
{
     68,  88,  66,  67,  53, 144, 
    152,   2, 245, 159, 232, 178, 
     76,  64, 230, 247,  60,  31, 
     28,  11,   1,   0,   0,   0, 
    114,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0,   0,   6,   0,   0, 
     16,   6,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 110,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 110,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,  16,   5,   0,   0, 
     80,   0,   0,   0,  68,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 117,   0, 
      0,   0,  80,   0,   0,   0, 
    112,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  24,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  88,  48, 
      0,   4,   0, 112,  16,   0, 
      1,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      2,   0,   0,   0,  69,   0, 
      0, 139, 130,   1,   0, 128, 
     67,  85,  21,   0, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  70, 126,  16,   0, 
      1,   0,   0,   0,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  16,  16,   0, 
      2,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  10, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0, 246,  15,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      1,   0,   0,   0,  50,   0, 
      0,   9, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  50,   0, 
      0,  11, 114,   0,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
     11,   0,   0,   0, 246,  15, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
     50,   0,   0,   9, 114,  32, 
     16,   0,   0,   0,   0,   0, 
    246,  31,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   1,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 207,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 183,  16,   0, 120,   1, 
    237,  87, 205, 107,  19,  65, 
     20, 127, 179,  95, 217, 205, 
    199,  38, 209, 170, 105, 137, 
     31,  96, 133,  42, 169,  40, 
    145,  10,  30, 162, 214,  22, 
     15,  69,  90, 104, 133,  82, 
    151, 126, 164,  73,  53,  96, 
    211, 152, 132,  82,  16, 106, 
     10,  61,  20,  41, 226, 209, 
     67,  47, 130, 119,  47, 130, 
    183,  36, 234, 101,  16, 189, 
    180, 130, 255, 130, 135,  30, 
     10, 122, 240,  80, 170, 239, 
    237, 206, 180, 177, 214,  91, 
     64, 145, 252, 224,  55, 111, 
    126,  51, 243, 222, 190, 217, 
    217, 133, 121, 175,  35, 224, 
    226, 235, 203, 187,  75, 100, 
     87,  62, 111, 164, 234,  12, 
     64, 199,  62,  26, 215,  18, 
    158, 133, 168,   5, 152,  12, 
     83,  11, 208,  69,  13,  45, 
     80,   0, 104, 234,  20, 114, 
      8, 245,  53, 180,  52,  39, 
    249, 241,  67, 177,  55, 153, 
    124, 216, 139,  93, 232,  64, 
    218, 200, 219, 130,  61,  72, 
    210,  73,  97,  41,  28,   1, 
     67, 238, 194, 160,   6, 161, 
     81, 179,  15, 228,  35, 210, 
    114,  99, 203,  53,  42,  82, 
    198, 114, 145, 165, 230,  96, 
    244,  33, 101, 140, 131,  64, 
    185, 201, 124,  40,  38,  61, 
    147,  64, 251, 253, 219, 240, 
    246, 232, 101,  39, 247,  44, 
    207, 137,  64, 231, 209,   8, 
    202,  93,  14, 125,  17,  27, 
    145, 231, 187,  45,  52, 185, 
    211, 222, 234, 200,  63, 225, 
      7,  34,  78, 157,   6,  72, 
     77, 103,  96, 128, 247, 145, 
     24, 236,  36, 128, 137,  86, 
     57,  13, 128, 223, 153, 161, 
     94,   6, 136, 209, 204, 255, 
     13, 249,  29, 146, 165, 211, 
    161,  95,  76, 252,  54,  46, 
    228, 252,  32,  53,  80, 169, 
     17, 159, 198, 224,  59,  41, 
    169,  25, 106, 239, 108,  60, 
    173, 146, 118, 127, 134,   6, 
    141, 239,  86,  15, 193, 184, 
     47, 170, 140, 135, 227, 232, 
    143, 135, 139, 218,  65, 237, 
     52, 232,  49, 212,  99,  13, 
    122,  18, 245, 100, 131,  78, 
    163,  78,  75,  45, 227, 135, 
    221, 231, 249,  76,  58, 107, 
     28,  92, 252, 151, 217, 202, 
    177,  57, 108, 229, 216,  28, 
    182, 114, 108,  14,  91,  57, 
     54, 135, 173,  28, 155, 195, 
     86, 142, 205,  97,  43, 199, 
    230, 144, 238, 150, 139, 218, 
     90, 117, 209, 191,  83,  85, 
    212, 237,  42,  48, 229,  77, 
    132, 189, 175,  67, 208, 228, 
     16,  10, 114, 176,  35, 156, 
      5,  45, 206,  66,  33, 206, 
    236,  40, 215, 225, 201, 186, 
    226,  59, 164, 129,  25, 227, 
     96, 197, 185,   9, 171, 174, 
    182, 224, 177, 107, 117,  54, 
    178, 161, 227,  29, 144, 153, 
    237, 156,  89, 199, 185,   6, 
     43, 238, 184,  25,  48, 176, 
    126, 171,  95, 181,   2, 154, 
    107,  31, 193, 106,  13, 194, 
    149,  45,  67, 127,  14, 224, 
    171, 108,  41, 202,  59, 136, 
    177,  74, 157, 198,  19, 172, 
    242,  22, 160, 147,   3, 235, 
    226, 160,  36,  56, 168,  23, 
     56, 131,  51, 156, 177, 179, 
    156,  41, 221, 156, 169,  23, 
    249, 131, 240, 106,  77,  63, 
    236, 183, 141,  35,  65, 219, 
    119, 204, 182, 205, 246, 136, 
     13,  26, 250, 232, 232,  99, 
     36, 120,   1, 231,  21, 168, 
    172,  43, 209, 163, 203,  42, 
     90,  53, 218, 177, 172, 161, 
    213, 162,  39, 150, 153, 134, 
    177, 116, 140, 101, 116, 115, 
     75, 247, 167, 252, 190,  96, 
     42,  96, 217,  41, 240,   1, 
    167, 231, 147,  31,  68,  60, 
     63,  22, 241, 252, 148,   8, 
    250, 249,  24, 198, 247, 227, 
    186,  96,  10, 112, 125,  92, 
    219, 169, 226, 221, 247, 151, 
    187,  51, 192,  82, 173, 157, 
     44, 189, 216, 253,  48, 221, 
      5, 123,  32, 137,  99, 120, 
      5, 223, 133, 187,  66,  99, 
    238, 125,  95, 130, 209,  32, 
    142, 181, 161, 145, 112, 195, 
    227,  88,  99,  41, 180,  38, 
     10, 132,   5,  97,  59, 145, 
     22, 146, 185, 149, 157,  87, 
     54, 105, 162,  26, 238,  73, 
     36, 191, 109, 118,  39, 206, 
     81, 159, 240,  73, 248, 188, 
     18, 150, 234, 183,  32, 114, 
     15,  47, 168, 249,  13, 219, 
     98, 253, 166, 176, 148,  55, 
    213,  38, 182, 172,  10,  69, 
     77,  24,  23,  27, 106,  19, 
    150, 246,  28,  64, 238, 207, 
    227, 146, 152, 191, 131, 164, 
     76, 251, 174,  56, 215,  71, 
    110,  58, 165, 242,  68,  38, 
     59, 239,  12, 228, 202,  37, 
    167,  47,  87, 204,  78, 151, 
     71,  71,   6, 156,  82, 113, 
    218,  25, 190,  55, 149, 201, 
     22,  75, 206, 141, 185, 217, 
     66, 238, 126,  54, 227, 140, 
    166, 231,  22,   6, 243, 217, 
    254, 252, 124, 174,  56, 151, 
    159, 205, 230, 203, 183, 166, 
     10, 253,  51,  51, 232,  51, 
     49,  52, 140, 195,  40, 207, 
     23,  50, 105, 248,   9,  55, 
    154,  23,  88,   0,   0,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  54,  44,  51, 244, 
    236,  45,  44,  42,  88,  80, 
     68,  80,  90,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  69, 110, 118, 
    105, 114, 111, 110, 109, 101, 
    110, 116,  77,  97, 112,  69, 
    102, 102, 101,  99, 116,  95, 
     80,  83,  69, 110, 118,  77, 
     97, 112,  46, 112, 100,  98
};
