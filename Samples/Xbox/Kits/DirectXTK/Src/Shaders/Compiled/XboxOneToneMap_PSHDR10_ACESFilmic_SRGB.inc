#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[262]
// Embedded Data:
//  0x00000106 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000101 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
dp3 r1.x, l(0.627404, 0.329282, 0.043314, 0.000000), r0.xyzx
dp3 r1.y, l(0.069097, 0.919540, 0.011361, 0.000000), r0.xyzx
dp3 r1.z, l(0.016392, 0.088013, 0.895595, 0.000000), r0.xyzx
mul r1.xyz, r1.xyzx, cb0[0].yyyy
mul r1.xyz, r1.xyzx, l(0.000100, 0.000100, 0.000100, 0.000000)
log r1.xyz, |r1.xyzx|
mul r1.xyz, r1.xyzx, l(0.159302, 0.159302, 0.159302, 0.000000)
exp r1.xyz, r1.xyzx
mad r2.xyz, r1.xyzx, l(18.851563, 18.851563, 18.851563, 0.000000), l(0.835938, 0.835938, 0.835938, 0.000000)
mad r1.xyz, r1.xyzx, l(18.687500, 18.687500, 18.687500, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
div r1.xyz, r2.xyzx, r1.xyzx
log r1.xyz, r1.xyzx
mul r1.xyz, r1.xyzx, l(78.843750, 78.843750, 78.843750, 0.000000)
exp o0.xyz, r1.xyzx
mul r0.xyz, r0.xyzx, cb0[0].xxxx
mov o0.w, r0.w
mov o1.w, r0.w
mad r1.xyz, r0.xyzx, l(2.510000, 2.510000, 2.510000, 0.000000), l(0.030000, 0.030000, 0.030000, 0.000000)
mul r1.xyz, r0.xyzx, r1.xyzx
mad r2.xyz, r0.xyzx, l(2.430000, 2.430000, 2.430000, 0.000000), l(0.590000, 0.590000, 0.590000, 0.000000)
mad r0.xyz, r0.xyzx, r2.xyzx, l(0.140000, 0.140000, 0.140000, 0.000000)
div_sat r0.xyz, r1.xyzx, r0.xyzx
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp o1.xyz, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[262], bundle is:[256] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PSHDR10_ACESFilmic_SRGB.pdb
// Shader Semantic Hash      : 0xd8504a0104dba0e3
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 584 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 17;
NumSgprs             = 24;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x000000FF
CB:OUTPUT0_ENABLE           = 15
CB:OUTPUT1_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x234, dwords=0x8D)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v4, off, off, off done vm         // 000000000008: F8001801 00000004
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v4, v5, off, off done vm          // 000000000008: F8001803 00000504
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v4, v3, off, off done vm          // 000000000008: F8001803 00000304
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v4, v4, v5                       // 000000000000: 5E080B04
  v_cvt_pkrtz_f16_f32  v5, v6, v3                       // 000000000004: 5E0A0706
  exp           mrt0, v4, v4, v5, v5 done compr vm      // 000000000008: F8001C0F 00000504
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v4, v4, v5                      // 000000000000: 5C080B04
  v_cvt_pknorm_u16_f32  v5, v6, v3                      // 000000000004: 5C0A0706
  exp           mrt0, v4, v4, v5, v5 done compr vm      // 000000000008: F8001C0F 00000504
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v4, v4, v5                      // 000000000000: 5A080B04
  v_cvt_pknorm_i16_f32  v5, v6, v3                      // 000000000004: 5A0A0706
  exp           mrt0, v4, v4, v5, v5 done compr vm      // 000000000008: F8001C0F 00000504
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v4, v4, v5                          // 000000000000: 60080B04
  v_cvt_pk_u16_u32  v5, v6, v3                          // 000000000004: 600A0706
  exp           mrt0, v4, v4, v5, v5 done compr vm      // 000000000008: F8001C0F 00000504
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v4, v4, v5                          // 000000000000: 62080B04
  v_cvt_pk_i16_i32  v5, v6, v3                          // 000000000004: 620A0706
  exp           mrt0, v4, v4, v5, v5 done compr vm      // 000000000008: F8001C0F 00000504
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v4, v5, v6, v3 done vm            // 000000000008: F800180F 03060504
end

; export table for mrt1 [patch@(bytes=0x224, dwords=0x89)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  s_nop         0x0000                                  // 000000000008: BF800000
  s_nop         0x0000                                  // 00000000000C: BF800000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt1, v0, off, off, off vm              // 000000000008: F8001011 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt1, v0, v1, off, off vm               // 000000000008: F8001013 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt1, v0, v3, off, off vm               // 000000000008: F8001013 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt1, v0, v0, v1, v1 compr vm           // 000000000008: F800141F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt1, v0, v0, v1, v1 compr vm           // 000000000008: F800141F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt1, v0, v0, v1, v1 compr vm           // 000000000008: F800141F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt1, v0, v0, v1, v1 compr vm           // 000000000008: F800141F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt1, v0, v0, v1, v1 compr vm           // 000000000008: F800141F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt1, v0, v1, v2, v3 vm                 // 000000000008: F800101F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[20:21], exec                          // 000000000000: BE94047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_mov_b32     m0, s2                                  // 00000000000C: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000014: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000018: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000024: F0800F00 00610002
  s_buffer_load_dwordx2  s[0:1], s[16:19], 0x00         // 00000000002C: C2401100
  s_waitcnt     vmcnt(0)                                // 000000000030: BF8C0F70
  s_nop         0x0000                                  // 000000000034: BF800000
  v_mul_legacy_f32  v4, 0x3d31699a, v2                  // 000000000038: 0E0804FF 3D31699A
  v_mul_legacy_f32  v5, 0x3c3a2454, v2                  // 000000000040: 0E0A04FF 3C3A2454
  v_mul_legacy_f32  v6, 0x3f6545b7, v2                  // 000000000048: 0E0C04FF 3F6545B7
  v_madmk_f32   v4, v1, 0x3ea897a6, v4                  // 000000000050: 40080901 3EA897A6
  v_madmk_f32   v5, v1, 0x3f6b66f9, v5                  // 000000000058: 400A0B01 3F6B66F9
  v_madmk_f32   v6, v1, 0x3db44044, v6                  // 000000000060: 400C0D01 3DB44044
  v_madmk_f32   v4, v0, 0x3f209d8c, v4                  // 000000000068: 40080900 3F209D8C
  v_madmk_f32   v5, v0, 0x3d8d82ba, v5                  // 000000000070: 400A0B00 3D8D82BA
  v_madmk_f32   v6, v0, 0x3c8647ad, v6                  // 000000000078: 400C0D00 3C8647AD
  s_waitcnt     lgkmcnt(0)                              // 000000000080: BF8C007F
  v_mul_legacy_f32  v4, s1, v4                          // 000000000084: 0E080801
  v_mul_legacy_f32  v5, s1, v5                          // 000000000088: 0E0A0A01
  v_mul_legacy_f32  v6, s1, v6                          // 00000000008C: 0E0C0C01
  s_mov_b32     s1, 0x38d1b717                          // 000000000090: BE8103FF 38D1B717
  v_mul_legacy_f32  v4, s1, v4                          // 000000000098: 0E080801
  v_mul_legacy_f32  v5, s1, v5                          // 00000000009C: 0E0A0A01
  v_mul_legacy_f32  v6, s1, v6                          // 0000000000A0: 0E0C0C01
  v_log_f32     v4, abs(v4)                             // 0000000000A4: D34E0104 00000104
  v_log_f32     v5, abs(v5)                             // 0000000000AC: D34E0105 00000105
  v_log_f32     v6, abs(v6)                             // 0000000000B4: D34E0106 00000106
  s_mov_b32     s1, 0x3e232000                          // 0000000000BC: BE8103FF 3E232000
  v_mul_legacy_f32  v4, s1, v4                          // 0000000000C4: 0E080801
  v_mul_legacy_f32  v5, s1, v5                          // 0000000000C8: 0E0A0A01
  v_mul_legacy_f32  v6, s1, v6                          // 0000000000CC: 0E0C0C01
  v_mul_legacy_f32  v0, s0, v0                          // 0000000000D0: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 0000000000D4: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 0000000000D8: 0E040400
  v_mov_b32     v7, 0x401b851f                          // 0000000000DC: 7E0E02FF 401B851F
  v_exp_f32     v4, v4                                  // 0000000000E4: 7E084B04
  v_exp_f32     v5, v5                                  // 0000000000E8: 7E0A4B05
  v_exp_f32     v6, v6                                  // 0000000000EC: 7E0C4B06
  s_mov_b32     s0, 0x41958000                          // 0000000000F0: BE8003FF 41958000
  v_mov_b32     v8, 0x4020a3d7                          // 0000000000F8: 7E1002FF 4020A3D7
  v_madak_f32   v9, v0, v7, 0x3f170a3d                  // 000000000100: 42120F00 3F170A3D
  v_madak_f32   v10, v1, v7, 0x3f170a3d                 // 000000000108: 42140F01 3F170A3D
  v_madak_f32   v7, v2, v7, 0x3f170a3d                  // 000000000110: 420E0F02 3F170A3D
  v_mov_b32     v11, 0x4196d000                         // 000000000118: 7E1602FF 4196D000
  v_mad_f32     v12, v4, s0, 1.0                        // 000000000120: D282000C 03C80104
  v_mad_f32     v13, v5, s0, 1.0                        // 000000000128: D282000D 03C80105
  v_mad_f32     v14, v6, s0, 1.0                        // 000000000130: D282000E 03C80106
  v_madak_f32   v15, v0, v8, 0x3cf5c28f                 // 000000000138: 421E1100 3CF5C28F
  v_madak_f32   v16, v1, v8, 0x3cf5c28f                 // 000000000140: 42201101 3CF5C28F
  v_madak_f32   v8, v2, v8, 0x3cf5c28f                  // 000000000148: 42101102 3CF5C28F
  v_madak_f32   v9, v0, v9, 0x3e0f5c29                  // 000000000150: 42121300 3E0F5C29
  v_madak_f32   v10, v1, v10, 0x3e0f5c29                // 000000000158: 42141501 3E0F5C29
  v_madak_f32   v7, v2, v7, 0x3e0f5c29                  // 000000000160: 420E0F02 3E0F5C29
  v_madak_f32   v4, v4, v11, 0x3f560000                 // 000000000168: 42081704 3F560000
  v_madak_f32   v5, v5, v11, 0x3f560000                 // 000000000170: 420A1705 3F560000
  v_madak_f32   v6, v6, v11, 0x3f560000                 // 000000000178: 420C1706 3F560000
  v_rcp_f32     v11, v12                                // 000000000180: 7E16550C
  v_rcp_f32     v12, v13                                // 000000000184: 7E18550D
  v_rcp_f32     v13, v14                                // 000000000188: 7E1A550E
  v_mul_legacy_f32  v0, v0, v15                         // 00000000018C: 0E001F00
  v_mul_legacy_f32  v1, v1, v16                         // 000000000190: 0E022101
  v_mul_legacy_f32  v2, v2, v8                          // 000000000194: 0E041102
  v_rcp_f32     v8, v9                                  // 000000000198: 7E105509
  v_rcp_f32     v9, v10                                 // 00000000019C: 7E12550A
  v_rcp_f32     v7, v7                                  // 0000000001A0: 7E0E5507
  v_mul_f32     v4, v4, v11                             // 0000000001A4: 10081704
  v_mul_f32     v5, v5, v12                             // 0000000001A8: 100A1905
  v_mul_f32     v6, v6, v13                             // 0000000001AC: 100C1B06
  v_mul_f32     v0, v0, v8 clamp                        // 0000000001B0: D2100800 00021100
  v_mul_f32     v1, v1, v9 clamp                        // 0000000001B8: D2100801 00021301
  v_mul_f32     v2, v2, v7 clamp                        // 0000000001C0: D2100802 00020F02
  v_log_f32     v4, v4                                  // 0000000001C8: 7E084F04
  v_log_f32     v5, v5                                  // 0000000001CC: 7E0A4F05
  v_log_f32     v6, v6                                  // 0000000001D0: 7E0C4F06
  s_mov_b32     s0, 0x429db000                          // 0000000001D4: BE8003FF 429DB000
  v_log_f32     v0, v0                                  // 0000000001DC: 7E004F00
  v_log_f32     v1, v1                                  // 0000000001E0: 7E024F01
  v_log_f32     v2, v2                                  // 0000000001E4: 7E044F02
  s_mov_b32     s1, 0x3ee8ba2f                          // 0000000001E8: BE8103FF 3EE8BA2F
  v_mul_legacy_f32  v4, s0, v4                          // 0000000001F0: 0E080800
  v_mul_legacy_f32  v5, s0, v5                          // 0000000001F4: 0E0A0A00
  v_mul_legacy_f32  v6, s0, v6                          // 0000000001F8: 0E0C0C00
  v_mul_legacy_f32  v0, s1, v0                          // 0000000001FC: 0E000001
  v_mul_legacy_f32  v1, s1, v1                          // 000000000200: 0E020201
  v_mul_legacy_f32  v2, s1, v2                          // 000000000204: 0E040401
  v_exp_f32     v4, v4                                  // 000000000208: 7E084B04
  v_exp_f32     v5, v5                                  // 00000000020C: 7E0A4B05
  v_exp_f32     v6, v6                                  // 000000000210: 7E0C4B06
  v_exp_f32     v0, v0                                  // 000000000214: 7E004B00
  v_exp_f32     v1, v1                                  // 000000000218: 7E024B01
  v_exp_f32     v2, v2                                  // 00000000021C: 7E044B02
  s_mov_b64     exec, s[20:21]                          // 000000000220: BEFE0414
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000224: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000228: 5E020702
  exp           mrt1, v0, v0, v1, v1 compr vm           // 00000000022C: F800141F 00000100
  v_cvt_pkrtz_f16_f32  v4, v4, v5                       // 000000000234: 5E080B04
  v_cvt_pkrtz_f16_f32  v5, v6, v3                       // 000000000238: 5E0A0706
  exp           mrt0, v4, v4, v5, v5 done compr vm      // 00000000023C: F8001C0F 00000504
  s_endpgm                                              // 000000000244: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   17
//  NumSRegs:                   24
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   161
//  CycleSimNWaves:             161
//  Code Size:                  584
//Assembler Counts:
//  num_32bit_ops                     : 93
//  num_64bit_ops                     : 12
//  num_alu                           : 86
//  num_fc                            : 16
//  num_inst_exp                      : 2
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 5
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 9
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 24
//  num_inst_vop2                     : 49
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 17
// m_uNumSRegs                       : 24
// m_uSCCodeSize                     : 584
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 161
// m_uCycleSimNWaves                 : 161

// Assembler Counts:
// num_32bit_ops                     : 93
// num_64bit_ops                     : 12
// num_alu                           : 86
// num_fc                            : 16
// num_inst_exp                      : 2
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 5
// num_inst_sopc                     : 0
// num_inst_sop1                     : 9
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 24
// num_inst_vop2                     : 49
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PSHDR10_ACESFilmic_SRGB[] =
{
     68,  88,  66,  67,  93, 223, 
    158, 228, 123, 222,  11,  87, 
     95, 246,   1,  31, 148, 194, 
     56, 246,   1,   0,   0,   0, 
    116,   9,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 216,   0, 
      0,   0,   0,   9,   0,   0, 
     16,   9,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     68,   0,   0,   0,   2,   0, 
      0,   0,   8,   0,   0,   0, 
     56,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     56,   0,   0,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  32,   8, 
      0,   0,  80,   0,   0,   0, 
      8,   2,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
      6,   1,   0,   0,  80,   0, 
      0,   0,   1,   1,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   1,   0,   0,   0, 
    104,   0,   0,   2,   3,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  16,   0, 
      0,  10,  18,   0,  16,   0, 
      1,   0,   0,   0,   2,  64, 
      0,   0, 140, 157,  32,  63, 
    166, 151, 168,  62, 154, 105, 
     49,  61,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  16,   0,   0,  10, 
     34,   0,  16,   0,   1,   0, 
      0,   0,   2,  64,   0,   0, 
    186, 130, 141,  61, 249, 102, 
    107,  63,  84,  36,  58,  60, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     16,   0,   0,  10,  66,   0, 
     16,   0,   1,   0,   0,   0, 
      2,  64,   0,   0, 173,  71, 
    134,  60,  68,  64, 180,  61, 
    183,  69, 101,  63,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     86, 133,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   0,   0,  10, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,   2,  64,   0,   0, 
     23, 183, 209,  56,  23, 183, 
    209,  56,  23, 183, 209,  56, 
      0,   0,   0,   0,  47,   0, 
      0,   6, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16, 128, 129,   0,   0,   0, 
      1,   0,   0,   0,  56,   0, 
      0,  10, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
      2,  64,   0,   0,   0,  32, 
     35,  62,   0,  32,  35,  62, 
      0,  32,  35,  62,   0,   0, 
      0,   0,  25,   0,   0,   5, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  50,   0, 
      0,  15, 114,   0,  16,   0, 
      2,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
      2,  64,   0,   0,   0, 208, 
    150,  65,   0, 208, 150,  65, 
      0, 208, 150,  65,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0,  86,  63,   0,   0, 
     86,  63,   0,   0,  86,  63, 
      0,   0,   0,   0,  50,   0, 
      0,  15, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
      2,  64,   0,   0,   0, 128, 
    149,  65,   0, 128, 149,  65, 
      0, 128, 149,  65,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0, 128,  63, 
      0,   0,   0,   0,  14,   0, 
      0,   7, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   2,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  47,   0,   0,   5, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  56,   0, 
      0,  10, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
      2,  64,   0,   0,   0, 176, 
    157,  66,   0, 176, 157,  66, 
      0, 176, 157,  66,   0,   0, 
      0,   0,  25,   0,   0,   5, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      6, 128,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   1,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  50,   0, 
      0,  15, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      2,  64,   0,   0, 215, 163, 
     32,  64, 215, 163,  32,  64, 
    215, 163,  32,  64,   0,   0, 
      0,   0,   2,  64,   0,   0, 
    143, 194, 245,  60, 143, 194, 
    245,  60, 143, 194, 245,  60, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,  15, 
    114,   0,  16,   0,   2,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,   2,  64, 
      0,   0,  31, 133,  27,  64, 
     31, 133,  27,  64,  31, 133, 
     27,  64,   0,   0,   0,   0, 
      2,  64,   0,   0,  61,  10, 
     23,  63,  61,  10,  23,  63, 
     61,  10,  23,  63,   0,   0, 
      0,   0,  50,   0,   0,  12, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   2,   0,   0,   0, 
      2,  64,   0,   0,  41,  92, 
     15,  62,  41,  92,  15,  62, 
     41,  92,  15,  62,   0,   0, 
      0,   0,  14,  32,   0,   7, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     47,   0,   0,   5, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,   2,  64, 
      0,   0,  47, 186, 232,  62, 
     47, 186, 232,  62,  47, 186, 
    232,  62,   0,   0,   0,   0, 
     25,   0,   0,   5, 114,  32, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0,   2,   1, 
      0,   0,  23,   0,   1,   0, 
     41, 137,  17,   0, 120,   1, 
    237,  88,  93, 104,  28,  85, 
     24, 253, 238, 221, 187, 155, 
    201, 100, 246, 206, 110, 178, 
    118,  83,  43, 102, 109,  43, 
     40, 136,  54, 111,  82, 242, 
    179, 187,  73,  77, 112, 209, 
     45, 205, 174, 148,  48, 230, 
    103, 147,  45,  46, 166,  77, 
     72, 130, 248,  52,  38,  69, 
    133,  66, 139,  62, 248, 135, 
     80,  80,  44, 226, 139, 224, 
    131,  80,   8, 178, 209,  62, 
    237,  67,   5,  91,  31,  20, 
    124,  17,  20, 241,  65, 193, 
      7,   5,   5, 113,  60, 223, 
    236,  76,  59, 141, 246, 109, 
     65, 197,  61, 112, 238, 153, 
    115, 231, 222, 111, 190, 251, 
    205,  44, 220, 187, 231, 210, 
    228, 163, 242, 192, 161,  75, 
    172, 233,  31, 119,  10,  74, 
     17, 197, 113,  45,  64,  86, 
    198,  27,  73, 110, 137, 142, 
    164, 184,  37, 186, 143,  27, 
     30,  32,  49,   7,  50,   8, 
     78, 227,  58,  15, 229, 123, 
     33,  63, 189, 122, 112, 226, 
    212, 119, 247,  78, 240,  80, 
     30, 151,   1, 223,  14, 248, 
     36, 104, 129,  79, 128,  28, 
     22, 211, 125, 240, 216,  16, 
    225, 243, 123, 185, 137, 128, 
    159,  55,  12, 134,  64, 202, 
     55, 230, 199, 192, 104,  12, 
    170, 115, 243, 247, 104, 128, 
    156, 215, 237, 192, 185, 133, 
    177,  56, 126, 176, 124, 255, 
    249, 255,  52, 218, 121, 221, 
    108, 153, 225, 123,  98, 240, 
    251, 136,  66, 131,  60, 134, 
    241, 181, 205, 109, 187,  86, 
    140, 159,   3, 207, 181, 224, 
    181, 125,  12, 222,  14,  30, 
     16, 214,  33,  68, 232,  57, 
    126,  66,  32, 170, 129, 139, 
    255,  41, 248,  91, 100, 112, 
     45, 194, 111, 198,   3,  67, 
    132, 247,  47, 112,  67,  91, 
    187, 204, 151,   7, 233,  87, 
    118, 161,  23, 240, 237, 113, 
    109,  31,  99, 239, 255,  24, 
     34,  30, 101,  86, 125, 198, 
     92, 162, 199, 156, 179, 239, 
    106, 223, 135, 119, 224, 157, 
    136, 159, 133, 159, 141, 248, 
      5, 248, 133, 136, 175, 193, 
    215,  66,  31, 198, 183, 253, 
    231,  37,  98, 231, 184,  43, 
    232, 219, 203, 116, 234, 214, 
    156,   7, 216, 243, 162, 163, 
     30,  57, 130, 115, 178,  71, 
    206,  13, 101, 130, 251,  49, 
    114, 224, 157, 136, 159, 133, 
    159, 141, 248,   5, 248, 133, 
    136, 175, 193, 215, 110, 248, 
     32, 254, 144, 255,  60,  25, 
    227, 239,  17, 157, 238, 191, 
    153, 221,  28,  59, 195, 110, 
    142, 157,  97,  55, 199, 206, 
    176, 155,  99, 103, 216, 205, 
    177,  51, 236, 230, 216,  25, 
    254,  23, 114,   4, 201,  85, 
    175,  52,  93, 243, 143,  38, 
    246,  65, 159, 200, 216, 239, 
     77, 108, 188,  91,  36, 172, 
    150, 160, 222, 150,  16, 201, 
    214, 115, 116, 126, 151, 236, 
    173, 159,  36,  45,  98, 115, 
    159, 191, 178, 102, 195,  99, 
    239, 228,  41,  67, 191, 217, 
     24,  30, 245, 148, 169,  43, 
    135, 143, 142, 120, 202, 210, 
    151, 143, 213, 199,  69, 175, 
    145, 127, 247, 245, 247, 198, 
     68, 159, 153, 255, 237, 212, 
    211, 227,  34, 105, 229,  39, 
    243,  31, 142,  18, 250, 207, 
     95, 204, 141,  19, 250, 119, 
    206,  94,  24,  37, 244, 191, 
     63, 245, 226,   8, 199,  23, 
    134, 161, 133, 105, 106,  97, 
     89, 218, 139, 109,  55, 179, 
    151, 175,  61,  28, 237,  83, 
    226, 241, 207,  21, 246, 109, 
    113, 104,  28, 154, 128,  38, 
    160,  60, 150, 114, 135, 198, 
    162,  99, 177,  36,  77,  82, 
    106,  82,  74, 123,  82, 187, 
     67,  47,  28, 200, 171, 146, 
    225, 198,  75, 166, 155,  40, 
     89, 174,  23, 219, 106, 210, 
    214, 171,   5,  79, 166, 220, 
     47, 222, 201, 229, 201, 238, 
     47, 142, 154, 217, 113,  97, 
    103, 124, 149, 182, 246, 213, 
    147, 251,  92, 250, 236, 181, 
    130,  69, 103, 175,  43, 209, 
    138,  37, 161, 113, 168, 134, 
     38, 160, 148, 190, 187, 248, 
    210, 149,  95,  70,  68,  58, 
    231, 171,  76, 167, 124, 165, 
    129, 254, 226, 253, 142,  61, 
     38, 238, 200, 248, 202, 241, 
     88,  85, 214,  40, 226,  52, 
     56,  30, 207, 154, 190,  38, 
    178, 150, 175,  86, 117, 159, 
    155, 172,  14, 186, 186, 122, 
    167,  75,  67, 164, 197,  61, 
     82, 203, 180, 210, 189, 213, 
    148, 107,  86, 251, 221, 158, 
    170, 118,  49,  55,  21, 223, 
    111, 166,  18,   7, 172,  20, 
     25, 169, 235, 148, 150,  36, 
    160,  98,  64, 146, 132,  74, 
     91, 146,  42,  99, 141, 101, 
    172, 177,  28, 172, 241, 131, 
    139,  69,  42, 147,  43, 202, 
    210, 149, 101, 133, 190, 237, 
    230,  67,  59, 223, 143,  17, 
    106,  69, 168,  21, 161,  86, 
     40, 161,  22, 168, 149,  64, 
    173, 162,  53, 162,  18, 230, 
    149,  48, 175, 164, 220, 140, 
    194, 183, 177, 103, 255, 141, 
     61, 255,  45, 103,   6, 162, 
    237, 221, 253, 232, 247,  15, 
     43, 123,  97, 240, 141, 155, 
    240,  29,  94, 102, 244, 120, 
    231,  79,  67,  31, 159, 229, 
     67, 172,   4,   7, 194, 233, 
     64,  15, 131, 124, 134,  23, 
     72, 134, 193, 113,  20,  37, 
    208,  18, 125, 243, 214,  87, 
     74,  60, 122, 252,  75, 190, 
    102,  92,  10, 230,  60,  31, 
    104,  14, 140, 198, 198,   8, 
    110, 254, 130, 171, 193, 248, 
    143,   2, 101, 225,  51, 148, 
     14, 255,  69, 224, 175,  11, 
    248,  33, 184, 255, 109, 160, 
    188, 150,  62, 112, 111,  30, 
     42, 248,  99, 128, 255, 167, 
    224,  76,  39, 143,  58, 133, 
    202, 148, 179, 177,  57, 191, 
     92, 127, 198,  41,  53,  54, 
     55, 156, 201, 198, 122, 125, 
    105, 243, 100, 165, 228, 108, 
    172,  47,  57,  51,  79,  45, 
     46, 215, 215,  55, 156, 137, 
    213, 211, 107, 141, 149, 250, 
    178, 115, 178, 182, 250, 108, 
    249,  76, 189, 178, 122, 166, 
    254, 216, 226, 218, 252, 241, 
    153, 233, 201,  19, 195,  71, 
    230,  11,  19, 199, 102,  30, 
    105, 172, 156, 110,  44, 205, 
    207, 156, 152,  42,  62, 184, 
    182,  92, 163,  63,   1, 149, 
    192,  78,  44,   0,   0,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0, 227, 160, 219,   4, 
      1,  74,  80, 216,  88,  80, 
     68,  80,  92,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  84, 111, 110, 
    101,  77,  97, 112,  95,  80, 
     83,  72,  68,  82,  49,  48, 
     95,  65,  67,  69,  83,  70, 
    105, 108, 109, 105,  99,  95, 
     83,  82,  71,  66,  46, 112, 
    100,  98
};
