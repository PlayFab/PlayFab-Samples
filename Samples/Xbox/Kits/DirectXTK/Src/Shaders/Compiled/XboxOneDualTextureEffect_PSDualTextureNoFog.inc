#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[83]
// Embedded Data:
//  0x00000053 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000004e - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.zwzz, t1.xyzw, s1
mul r0.xyzw, r0.xyzw, v0.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 1.000000)
mul o0.xyzw, r0.xyzw, r1.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[83], bundle is:[171] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDualTextureEffect_PSDualTextureNoFog.pdb
// Shader Semantic Hash      : 0x235532abb2069c56
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask 15, param1, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 192 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 4;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
NumVgprs             = 13;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0xAC, dwords=0x2B)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v0, off, off done vm          // 000000000008: F8001803 00000001
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000004: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v3, v0                      // 000000000004: 5C000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v3, v0                      // 000000000004: 5A000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v3, v0                          // 000000000004: 60000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v3, v0                          // 000000000004: 62000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v3, v0 done vm            // 000000000008: F800180F 00030201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 00000000000C: C0CA0110
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.z                      // 000000000014: C8080600
  v_interp_p1_f32  v3, v0, attr1.w                      // 000000000018: C80C0700
  v_interp_p1_f32  v4, v0, attr1.x                      // 00000000001C: C8100400
  v_interp_p1_f32  v5, v0, attr1.y                      // 000000000020: C8140500
  v_interp_p2_f32  v2, v1, attr1.z                      // 000000000024: C8090601
  v_interp_p2_f32  v3, v1, attr1.w                      // 000000000028: C80D0701
  v_interp_p2_f32  v4, v1, attr1.x                      // 00000000002C: C8110401
  v_interp_p2_f32  v5, v1, attr1.y                      // 000000000030: C8150501
  s_waitcnt     lgkmcnt(0)                              // 000000000034: BF8C007F
  image_sample  v[6:9], v[2:3], s[12:19], s[24:27] dmask:0xf // 000000000038: F0800F00 00C30602
  image_sample  v[2:5], v[4:5], s[4:11], s[20:23] dmask:0xf // 000000000040: F0800F00 00A10204
  v_interp_p1_f32  v10, v0, attr0.x                     // 000000000048: C8280000
  v_interp_p1_f32  v11, v0, attr0.y                     // 00000000004C: C82C0100
  v_interp_p1_f32  v12, v0, attr0.z                     // 000000000050: C8300200
  v_interp_p1_f32  v0, v0, attr0.w                      // 000000000054: C8000300
  v_interp_p2_f32  v10, v1, attr0.x                     // 000000000058: C8290001
  v_interp_p2_f32  v11, v1, attr0.y                     // 00000000005C: C82D0101
  v_interp_p2_f32  v12, v1, attr0.z                     // 000000000060: C8310201
  v_interp_p2_f32  v0, v1, attr0.w                      // 000000000064: C8010301
  s_waitcnt     vmcnt(1)                                // 000000000068: BF8C0F71
  v_mul_legacy_f32  v1, v6, v10                         // 00000000006C: 0E021506
  v_mul_legacy_f32  v6, v7, v11                         // 000000000070: 0E0C1707
  v_mul_legacy_f32  v7, v8, v12                         // 000000000074: 0E0E1908
  v_mul_legacy_f32  v0, v9, v0                          // 000000000078: 0E000109
  s_waitcnt     vmcnt(0)                                // 00000000007C: BF8C0F70
  v_max_f32     v2, v2, v2 mul:2                        // 000000000080: D2200002 08020502
  v_max_f32     v3, v3, v3 mul:2                        // 000000000088: D2200003 08020703
  v_max_f32     v4, v4, v4 mul:2                        // 000000000090: D2200004 08020904
  v_mul_legacy_f32  v1, v1, v2                          // 000000000098: 0E020501
  v_mul_legacy_f32  v2, v6, v3                          // 00000000009C: 0E040706
  v_mul_legacy_f32  v3, v7, v4                          // 0000000000A0: 0E060907
  v_mul_legacy_f32  v0, v0, v5                          // 0000000000A4: 0E000B00
  s_mov_b64     exec, s[28:29]                          // 0000000000A8: BEFE041C
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 0000000000AC: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 0000000000B0: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 0000000000B4: F8001C0F 00000001
  s_endpgm                                              // 0000000000BC: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   13
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   86
//  CycleSimNWaves:             86
//  Code Size:                  192
//Assembler Counts:
//  num_32bit_ops                     : 36
//  num_64bit_ops                     : 6
//  num_alu                           : 29
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 10
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 16
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 13
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 192
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 86
// m_uCycleSimNWaves                 : 86

// Assembler Counts:
// num_32bit_ops                     : 36
// num_64bit_ops                     : 6
// num_alu                           : 29
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 10
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 16
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DualTextureEffect_PSDualTextureNoFog[] =
{
     68,  88,  66,  67, 205, 169, 
     49, 149, 156, 146,  19,  27, 
    148, 138,  20, 128,  73,  65, 
    135, 146,   1,   0,   0,   0, 
     81,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    156,   0,   0,   0, 208,   0, 
      0,   0, 216,   4,   0,   0, 
    232,   4,   0,   0,  73,  83, 
     71,  78,  96,   0,   0,   0, 
      3,   0,   0,   0,   8,   0, 
      0,   0,  80,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  86,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  86,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  12,  12, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,   0,   4,   0,   0, 
     80,   0,   0,   0,   0,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  83,   0, 
      0,   0,  80,   0,   0,   0, 
     78,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   1,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   1,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      0,   0,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      1,   0,   0,   0,  98,  16, 
      0,   3, 194,  16,  16,   0, 
      1,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0, 230,  26,  16,   0, 
      1,   0,   0,   0,  70, 126, 
     16,   0,   1,   0,   0,   0, 
      0,  96,  16,   0,   1,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  16,  16,   0, 
      1,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,  10, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,   2,  64, 
      0,   0,   0,   0,   0,  64, 
      0,   0,   0,  64,   0,   0, 
      0,  64,   0,   0, 128,  63, 
     56,   0,   0,   7, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    173,   0,   0,   0,  23,   0, 
      1,   0,  41,  14,  16,   0, 
    120,   1, 237,  87,  59, 111, 
     19,  65,  16, 158, 221,  91, 
    159, 207, 137, 179,  54,  82, 
     34, 108,  41, 136,  72, 164, 
      8,  79,   1,  21,  66,  20, 
     16,  12,  41, 130, 120,  40, 
      6,  89, 209,  41,  15, 199, 
    103, 176, 100, 176, 177,  29, 
    148, 202,  24,   9, 186,  20, 
    148,  20, 105, 144, 160, 130, 
    138,  26, 217,  65,  52,  43, 
     74, 196, 207, 160,  72,  73, 
    129,   2,  51, 119, 187, 201, 
     17,  66, 119,  18,  72, 220, 
     39, 125,  51, 251, 237,  99, 
    110, 118, 247, 138,  29, 153, 
      5,  31,  51, 175, 223, 250, 
    173, 110, 253, 217, 173, 115, 
     12,  32, 129, 109, 116, 190, 
     39, 188,  24,  33,  11, 240, 
     94, 146,   5, 152,  34,  67, 
     19,  56,   0,  13,  77,  32, 
     55, 145,  23, 145,  52, 102, 
      8, 144, 157, 174,  86, 115, 
    211, 212, 202,  35, 105, 249, 
     29, 205,  73, 164, 141,  60, 
    132,  28,  66,  82,  56,   2, 
    134, 220, 129,  32, 131,  48, 
     62,  12,  90,  99,  64, 201, 
    155, 117,  22, 210, 196, 242, 
    225, 145, 217,  31, 199, 144, 
    122, 107, 251, 130, 114,  51, 
    113,  41, 166, 249,  38, 237, 
    247, 111,  35, 216,  99, 144, 
     29, 237, 153,  96, 238, 137, 
     64, 247,  17,   6, 157, 125, 
    176,   6, 160,  68,   2,  97, 
    206, 181, 174,  53,  45,  55, 
    119, 249,  39, 252,  64, 228, 
    168,  17, 130, 209, 148, 141, 
     13,  25, 180, 232, 217,  97, 
      0, 135,  90, 255,  23, 204, 
    153, 210,  89,  16, 233, 223, 
     12,  78,  36, 128,  25,  63, 
     78,   6, 122,   3, 226, 243, 
     28, 124,  35, 101,  52,  67, 
     29, 220,  85, 160,  45, 210, 
     20,  44, 172,  81, 177,   4, 
     95, 176,  24,  44, 100, 198, 
    119, 180, 139, 218,  13, 233, 
    121, 212, 243,  33, 189, 132, 
    122,  41, 164, 203, 168, 203, 
     70, 155, 248,  25, 255, 123, 
    150, 127, 215, 216, 217, 253, 
    151,  25, 231,  24,  13, 227, 
     28, 163,  97, 156,  99,  52, 
    140, 115, 140, 134, 113, 142, 
    209,  48, 206,  49,  26, 198, 
     57,  70,  70, 232, 138, 141, 
    126, 119, 104, 187,  15, 140, 
    127, 200, 178,  79, 155, 220, 
    250, 222,   7, 219,  81, 144, 
     76,  43,  16,  89,   5, 137, 
     81, 197, 236, 148,  98, 201, 
     17, 197, 196,   1, 197,  18, 
     99, 234,  49, 172,  15,  32, 
    211, 219, 226, 246,  71, 124, 
    152, 246, 182,   4, 127, 137, 
    145, 166,  20, 176,  19,  10, 
    248, 105, 133, 197, 132,  98, 
    112,  84,  49, 118,  82,  49, 
    126,  70,  49, 139, 169, 135, 
    153, 245, 129,  61, 198, 101, 
    242,  96,  90,  58, 121,  41, 
     83,  12, 100,  19, 251,  56, 
     76, 124, 230,   9, 238,  88, 
    232, 173,  36, 119,   4, 122, 
    145, 226,  14, 190,  43, 165, 
    157,  20,  50, 153, 178,  37, 
     12, 131,  28,  23, 219, 125, 
    236, 251, 229, 173,  10, 240, 
    100, 144, 167, 134, 255, 174, 
    221,   3,  39, 152, 177,   3, 
    146, 216,  23,  46,  39, 252, 
     25, 130, 249, 239, 107,   3, 
     70, 157, 216,  55, 138, 206, 
    224, 171, 174, 109, 190, 104, 
     79, 181,  74,  10,  41, 252, 
    234,  19, 107, 209,  13, 251, 
    221, 155, 179, 183, 143,  80, 
    155,  48, 169,  31, 235,  66, 
    123, 170, 135, 210, 200,  93, 
    188,  34, 243,  27, 174, 233, 
    249,  23, 180, 167, 188, 232, 
    173,  47,  77,  21, 173, 191, 
     95, 215, 227,  21, 237, 105, 
     79, 195, 200, 189, 121,  60, 
    213, 227, 101,  36, 101,  90, 
     56, 239,  94,  42, 206, 184, 
    237, 206,  98, 197, 123, 228, 
    206, 214,  58, 109, 183,  80, 
    107, 121,  43, 157,  82, 113, 
    214, 109, 183,  86, 220, 185, 
    123, 203,  21, 175, 213, 118, 
     47,  55, 238,  55, 107, 117, 
    175, 226, 150, 202, 141, 181, 
     27,  15, 188, 194, 234, 114, 
    189, 232, 173, 117,  86,  91, 
    222, 149, 106,  21,  23,  44, 
    222, 156,  11, 245,  93, 111, 
     92, 109, 220,  61, 213, 172, 
    148, 225,  39,   2,  31, 237, 
     27,   0,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
     86, 156,   6, 178, 171,  50, 
     85,  35,  88,  80,  68,  80, 
     97,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  68, 117,  97, 108,  84, 
    101, 120, 116, 117, 114, 101, 
     69, 102, 102, 101,  99, 116, 
     95,  80,  83,  68, 117,  97, 
    108,  84, 101, 120, 116, 117, 
    114, 101,  78, 111,  70, 111, 
    103,  46, 112, 100,  98
};
