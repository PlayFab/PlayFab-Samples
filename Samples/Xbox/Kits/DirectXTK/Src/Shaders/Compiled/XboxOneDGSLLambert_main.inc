#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float       
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyz         5     NONE   float       
// TEXCOORD                 4   xyzw        6     NONE   float       
// TEXCOORD                 5   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[161]
// Embedded Data:
//  0x000000a1 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000009c - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[21], immediateIndexed
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 3
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v3.xyzx
dp3_sat r0.w, cb1[9].xyzx, r0.xyzx
mul r1.xyz, r0.wwww, cb1[1].xyzx
mul r1.xyz, r1.xyzx, v1.xyzx
mad r1.xyz, cb0[0].xyzx, cb1[0].xyzx, r1.xyzx
dp3_sat r0.w, cb1[10].xyzx, r0.xyzx
mul r2.xyz, r0.wwww, cb1[2].xyzx
mad r1.xyz, r2.xyzx, v1.xyzx, r1.xyzx
dp3_sat r0.w, cb1[11].xyzx, r0.xyzx
dp3_sat r0.x, cb1[12].xyzx, r0.xyzx
mul r0.xyz, r0.xxxx, cb1[4].xyzx
mul r2.xyz, r0.wwww, cb1[3].xyzx
mad r1.xyz, r2.xyzx, v1.xyzx, r1.xyzx
mad_sat o0.xyz, r0.xyzx, v1.xyzx, r1.xyzx
mov o0.w, v1.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[161], bundle is:[203] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDGSLLambert_main.pdb
// Shader Semantic Hash      : 0x19ae90e4e9cc0931
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask 15, param0, paramSlot1, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 3, channelMask  7, param1, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 360 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_CONST_BUFFER 0, offset 0x0:3 dwords
;  extUserElements 1[1] = IMM_CONST_BUFFER 1, offset 0x4:7 dwords
NumVgprs             = 16;
NumSgprs             = 42;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000003

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x154, dwords=0x55)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v10, off, off, off done vm        // 000000000008: F8001801 0000000A
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v10, v11, off, off done vm        // 000000000008: F8001803 00000B0A
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v10, v0, off, off done vm         // 000000000008: F8001803 0000000A
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v10, v11                     // 000000000000: 5E02170A
  v_cvt_pkrtz_f16_f32  v0, v6, v0                       // 000000000004: 5E000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v10, v11                    // 000000000000: 5C02170A
  v_cvt_pknorm_u16_f32  v0, v6, v0                      // 000000000004: 5C000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v10, v11                    // 000000000000: 5A02170A
  v_cvt_pknorm_i16_f32  v0, v6, v0                      // 000000000004: 5A000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v10, v11                        // 000000000000: 6002170A
  v_cvt_pk_u16_u32  v0, v6, v0                          // 000000000004: 60000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v10, v11                        // 000000000000: 6202170A
  v_cvt_pk_i16_i32  v0, v6, v0                          // 000000000004: 62000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v10, v11, v6, v0 done vm          // 000000000008: F800180F 00060B0A
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000000: C0C20100
  s_mov_b32     m0, s2                                  // 000000000004: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.z                      // 000000000008: C8080600
  v_interp_p1_f32  v3, v0, attr1.y                      // 00000000000C: C80C0500
  v_interp_p2_f32  v2, v1, attr1.z                      // 000000000010: C8090601
  s_waitcnt     lgkmcnt(0)                              // 000000000014: BF8C007F
  s_buffer_load_dwordx4  s[0:3], s[8:11], 0x24          // 000000000018: C2800924
  v_interp_p1_f32  v4, v0, attr1.x                      // 00000000001C: C8100400
  v_interp_p2_f32  v3, v1, attr1.y                      // 000000000020: C80D0501
  v_mul_legacy_f32  v5, v2, v2                          // 000000000024: 0E0A0502
  v_interp_p2_f32  v4, v1, attr1.x                      // 000000000028: C8110401
  v_mac_f32     v5, v3, v3                              // 00000000002C: 3E0A0703
  s_buffer_load_dwordx4  s[12:15], s[8:11], 0x28        // 000000000030: C2860928
  v_mac_f32     v5, v4, v4                              // 000000000034: 3E0A0904
  s_buffer_load_dwordx4  s[16:19], s[8:11], 0x04        // 000000000038: C2880904
  s_buffer_load_dwordx4  s[20:23], s[8:11], 0x2c        // 00000000003C: C28A092C
  v_rsq_f32     v5, v5                                  // 000000000040: 7E0A5D05
  s_buffer_load_dwordx4  s[24:27], s[8:11], 0x00        // 000000000044: C28C0900
  s_buffer_load_dwordx4  s[28:31], s[8:11], 0x30        // 000000000048: C28E0930
  v_mul_legacy_f32  v2, v2, v5                          // 00000000004C: 0E040B02
  s_buffer_load_dwordx4  s[4:7], s[4:7], 0x00           // 000000000050: C2820500
  s_buffer_load_dwordx4  s[32:35], s[8:11], 0x08        // 000000000054: C2900908
  v_mul_legacy_f32  v3, v3, v5                          // 000000000058: 0E060B03
  s_waitcnt     lgkmcnt(0)                              // 00000000005C: BF8C007F
  v_mul_legacy_f32  v6, s2, v2                          // 000000000060: 0E0C0402
  s_buffer_load_dwordx4  s[36:39], s[8:11], 0x0c        // 000000000064: C292090C
  v_mul_legacy_f32  v4, v4, v5                          // 000000000068: 0E080B04
  v_mac_f32     v6, s1, v3                              // 00000000006C: 3E0C0601
  s_buffer_load_dwordx4  s[8:11], s[8:11], 0x10         // 000000000070: C2840910
  v_mad_legacy_f32  v6, s0, v4, v6 clamp                // 000000000074: D2800806 041A0800
  v_interp_p1_f32  v5, v0, attr0.x                      // 00000000007C: C8140000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000080: C81C0100
  v_interp_p1_f32  v8, v0, attr0.z                      // 000000000084: C8200200
  v_mul_legacy_f32  v9, s14, v2                         // 000000000088: 0E12040E
  v_mul_legacy_f32  v10, s16, v6                        // 00000000008C: 0E140C10
  v_mul_legacy_f32  v11, s17, v6                        // 000000000090: 0E160C11
  v_mul_legacy_f32  v6, s18, v6                         // 000000000094: 0E0C0C12
  v_interp_p2_f32  v5, v1, attr0.x                      // 000000000098: C8150001
  v_interp_p2_f32  v7, v1, attr0.y                      // 00000000009C: C81D0101
  v_interp_p2_f32  v8, v1, attr0.z                      // 0000000000A0: C8210201
  v_mac_f32     v9, s13, v3                             // 0000000000A4: 3E12060D
  v_mul_legacy_f32  v12, s22, v2                        // 0000000000A8: 0E180416
  v_mul_legacy_f32  v10, v10, v5                        // 0000000000AC: 0E140B0A
  v_mul_legacy_f32  v11, v11, v7                        // 0000000000B0: 0E160F0B
  v_mul_legacy_f32  v6, v6, v8                          // 0000000000B4: 0E0C1106
  v_mov_b32     v13, s24                                // 0000000000B8: 7E1A0218
  v_mov_b32     v14, s25                                // 0000000000BC: 7E1C0219
  v_mov_b32     v15, s26                                // 0000000000C0: 7E1E021A
  v_mad_legacy_f32  v9, s12, v4, v9 clamp               // 0000000000C4: D2800809 0426080C
  v_mac_f32     v12, s21, v3                            // 0000000000CC: 3E180615
  v_mul_legacy_f32  v2, s30, v2                         // 0000000000D0: 0E04041E
  v_mac_f32     v10, s4, v13                            // 0000000000D4: 3E141A04
  v_mac_f32     v11, s5, v14                            // 0000000000D8: 3E161C05
  v_mac_f32     v6, s6, v15                             // 0000000000DC: 3E0C1E06
  v_mul_legacy_f32  v13, s32, v9                        // 0000000000E0: 0E1A1220
  v_mul_legacy_f32  v14, s33, v9                        // 0000000000E4: 0E1C1221
  v_mul_legacy_f32  v9, s34, v9                         // 0000000000E8: 0E121222
  v_mad_legacy_f32  v12, s20, v4, v12 clamp             // 0000000000EC: D280080C 04320814
  v_mac_f32     v2, s29, v3                             // 0000000000F4: 3E04061D
  v_mac_f32     v10, v13, v5                            // 0000000000F8: 3E140B0D
  v_mac_f32     v11, v14, v7                            // 0000000000FC: 3E160F0E
  v_mac_f32     v6, v9, v8                              // 000000000100: 3E0C1109
  v_mad_legacy_f32  v2, s28, v4, v2 clamp               // 000000000104: D2800802 040A081C
  s_waitcnt     lgkmcnt(0)                              // 00000000010C: BF8C007F
  v_mul_legacy_f32  v3, s36, v12                        // 000000000110: 0E061824
  v_mul_legacy_f32  v4, s37, v12                        // 000000000114: 0E081825
  v_mul_legacy_f32  v9, s38, v12                        // 000000000118: 0E121826
  v_mul_legacy_f32  v12, s8, v2                         // 00000000011C: 0E180408
  v_mul_legacy_f32  v13, s9, v2                         // 000000000120: 0E1A0409
  v_mul_legacy_f32  v2, s10, v2                         // 000000000124: 0E04040A
  v_mac_f32     v10, v3, v5                             // 000000000128: 3E140B03
  v_mac_f32     v11, v4, v7                             // 00000000012C: 3E160F04
  v_mac_f32     v6, v9, v8                              // 000000000130: 3E0C1109
  v_mad_legacy_f32  v10, v12, v5, v10 clamp             // 000000000134: D280080A 042A0B0C
  v_mad_legacy_f32  v11, v13, v7, v11 clamp             // 00000000013C: D280080B 042E0F0D
  v_mad_legacy_f32  v6, v2, v8, v6 clamp                // 000000000144: D2800806 041A1102
  v_interp_p1_f32  v0, v0, attr0.w                      // 00000000014C: C8000300
  v_interp_p2_f32  v0, v1, attr0.w                      // 000000000150: C8010301
  v_cvt_pkrtz_f16_f32  v1, v10, v11                     // 000000000154: 5E02170A
  v_cvt_pkrtz_f16_f32  v0, v6, v0                       // 000000000158: 5E000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 00000000015C: F8001C0F 00000001
  s_endpgm                                              // 000000000164: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   16
//  NumSRegs:                   42
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   82
//  CycleSimNWaves:             82
//  Code Size:                  360
//Assembler Counts:
//  num_32bit_ops                     : 74
//  num_64bit_ops                     : 8
//  num_alu                           : 65
//  num_fc                            : 16
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 0
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 1
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 4
//  num_inst_vop2                     : 40
//  num_inst_vop3                     : 9
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 14
//  constant_literal_operands         : 0
//  num_tex                           : 1
//  num_vmem_group                    : 0
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 16
// m_uNumSRegs                       : 42
// m_uSCCodeSize                     : 360
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 82
// m_uCycleSimNWaves                 : 82

// Assembler Counts:
// num_32bit_ops                     : 74
// num_64bit_ops                     : 8
// num_alu                           : 65
// num_fc                            : 16
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 0
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 1
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 4
// num_inst_vop2                     : 40
// num_inst_vop3                     : 9
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 14
// num_inst_smem                     : 11
// constant_literal_operands         : 0
// num_tex                           : 1
// num_vmem_group                    : 0
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DGSLLambert_main[] =
{
     68,  88,  66,  67,  13, 255, 
     17,  87, 253, 179, 218,   9, 
    224,  89, 138, 211,  88, 125, 
     52,  90,   1,   0,   0,   0, 
    121,   7,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
     32,   1,   0,   0,  84,   1, 
      0,   0,  20,   7,   0,   0, 
     36,   7,   0,   0,  73,  83, 
     71,  78, 228,   0,   0,   0, 
      8,   0,   0,   0,   8,   0, 
      0,   0, 200,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0, 212,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 218,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   0, 
      0,   0, 218,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0, 218,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      5,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      6,   0,   0,   0,  15,   0, 
      0,   0, 218,   0,   0,   0, 
      5,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      7,   0,   0,   0,   7,   0, 
      0,   0,  83,  86,  95,  80, 
     79,  83,  73,  84,  73,  79, 
     78,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 184,   5,   0,   0, 
     80,   0,   0,   0, 110,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 161,   0, 
      0,   0,  80,   0,   0,   0, 
    156,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   5,   0,   0,   0, 
     89,   0,   0,   4,  70, 142, 
     32,   0,   1,   0,   0,   0, 
     21,   0,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      1,   0,   0,   0,  98,  16, 
      0,   3, 114,  16,  16,   0, 
      3,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   3,   0,   0,   0, 
     16,   0,   0,   7,  18,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  70,  18,  16,   0, 
      3,   0,   0,   0,  68,   0, 
      0,   5,  18,   0,  16,   0, 
      0,   0,   0,   0,  10,   0, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,   7, 114,   0, 
     16,   0,   0,   0,   0,   0, 
      6,   0,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      3,   0,   0,   0,  16,  32, 
      0,   8, 130,   0,  16,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
      9,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,   8, 114,   0, 
     16,   0,   1,   0,   0,   0, 
    246,  15,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,   1,   0, 
      0,   0,  56,   0,   0,   7, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     50,   0,   0,  11, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  16,  32,   0,   8, 
    130,   0,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,  10,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      2,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   2,   0,   0,   0, 
     50,   0,   0,   9, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     16,  32,   0,   8, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,  11,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  16,  32,   0,   8, 
     18,   0,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,  12,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      0,   0,   0,   0,   6,   0, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   4,   0,   0,   0, 
     56,   0,   0,   8, 114,   0, 
     16,   0,   2,   0,   0,   0, 
    246,  15,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,   3,   0, 
      0,   0,  50,   0,   0,   9, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      2,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  50,  32,   0,   9, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,  16,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    205,   0,   0,   0,  23,   0, 
      1,   0,  41, 146,  16,   0, 
    120,   1, 237,  87, 205, 107, 
     19,  65,  20, 127, 179,  59, 
     25, 247,  43, 147, 102,  73, 
    211,  52, 164, 165,  21,  45, 
    165, 148,  82, 237,  77, 100, 
    177, 181,  88, 177,  69, 193, 
     86,  40, 101, 237,  71, 154, 
     64,   3, 246, 131,  36, 136, 
    167,  24,  75, 145,  34,  69, 
     74,  79,  30,  60, 122,  16, 
      4, 255,   2, 177, 101,  79, 
    123, 208,  75, 209,  63,  64, 
    232, 197, 255, 160, 135, 130, 
    190,  23, 119,  53, 166, 246, 
     22,  80,  48,  63, 248, 189, 
    153, 223, 204, 203, 155, 247, 
    246, 229,  48, 179, 215,   6, 
     53, 124, 124, 243, 101, 147, 
    198,  27, 175,  63, 223, 220, 
     80,   0,  34,  56, 103,  72, 
     26,   9,  47, 162, 100,   1, 
    174, 198, 200,   2, 244, 147, 
     33,   7, 244, 165,  16,   3, 
    200,  21, 212, 215, 112, 164, 
    189, 144,   0, 213, 177, 145, 
    145, 237,  49, 116, 131,  65, 
     36, 249, 222,  13, 120,  11, 
    169,  33,  71, 145, 180,  78, 
    225,  26, 193, 201,  32,  26, 
    247, 104, 157, 226, 235,  72, 
    130,  68, 154,  72, 194, 169, 
     56, 121,  50, 127,   6, 229, 
     65, 103, 159,   5, 202,  45, 
      4, 197,  13, 125, 169, 222, 
    191, 141, 198,  58,  85, 100, 
    216,  39,   2, 245, 163,  30, 
    244, 141, 126,  46,   5, 125, 
    164, 190,  16,  18, 129, 166, 
    250, 168, 182,   3, 228,  89, 
    248, 134, 160, 190, 213,  35, 
    212,  20,  79,  48,  12, 134, 
     11,  66, 237,   0,  72, 225, 
    194, 127, 134, 240,  63,  75, 
    223, 130,  72, 223,  52, 248, 
    188,  53, 132, 251, 247, 200, 
     64, 117, 159, 184, 155, 130, 
     99,  82, 161, 102, 168,  13, 
    146, 129,  86,  73, 215, 254, 
    224, 117,  26, 149, 209, 161, 
    204,  11,   6, 243, 177,  12, 
     28,  83, 111,  81, 187, 168, 
    221,  58,  61, 135, 122, 174, 
     78,  47, 162,  94, 172, 211, 
     89, 212, 217,  80, 135, 241, 
     99, 181, 243,  68, 173, 215, 
    184,  88, 249, 151, 217, 202, 
    177,  57, 108, 229, 216,  28, 
    182, 114, 108,  14,  91,  57, 
     54, 135, 173,  28, 155, 195, 
     86, 142, 205,  97,  43, 199, 
    166,  17,  47, 244, 222, 129, 
    162, 158, 188,   7, 161, 249, 
     16, 177, 124,  38, 116, 255, 
     49, 236, 236,  95, 208, 171, 
     30, 240,  54, 159,  69, 162, 
    190,  18,  49,  36, 227, 113, 
     95,  61, 103,  56, 253, 250, 
     83, 143, 235, 134, 195, 245, 
    109, 111,  80, 127, 230,  69, 
    238,  27,  21, 208, 119, 188, 
     97, 253, 185, 167, 152,  92, 
     66, 100, 211, 211, 244,  93, 
     79,  53, 133, 164,  56,  10, 
    183, 164, 165, 239, 121, 220, 
    212,  36,  19, 150, 211, 166, 
    111, 121,  66, 171,  30, 130, 
    150, 198, 107, 108, 194,   7, 
    150, 241,  65, 233, 241,  37, 
    183, 101, 155, 149, 144, 113, 
     43,  41, 109, 203, 146,  12, 
    218, 125, 198, 186, 124, 166, 
    244, 250,  81,  97,  59,  73, 
    158, 146, 134, 153, 144, 102, 
     44,  41,  69, 220, 146,  41, 
     37,  93, 233,  84,  50, 149, 
    180, 210,  93, 209,  49, 158, 
    165, 245, 241, 118, 145, 114, 
    186,  57, 151,  60, 157, 112, 
     34, 153, 164,  35, 186,  45, 
    167, 199,  78, 203,  94,  59, 
     35, 207, 219, 182, 180, 208, 
     47, 161,  93, 230,  93, 130, 
     59,  81,  51, 225, 200,  88, 
    210, 209, 227, 150, 163, 224, 
    122,  70,  51, 120, 173, 238, 
    148, 144,  23,  83, 154, 236, 
     75, 217,  82, 195,  51, 117, 
    158, 150,   6, 198,  84, 209, 
    159,   7, 254,   6, 250,  91, 
    230,   0, 150,  84,  61, 140, 
    198, 134,  56, 213, 163, 196, 
    177,  30,  21, 124, 166,  50, 
     31, 239, 196, 191, 221, 169, 
      1, 158, 236, 119, 210, 132, 
     46, 243, 117, 168,  73, 254, 
    195,  35, 132,  66,  18, 215, 
    194,  59,  62,  97,  43, 184, 
    252, 207,   4, 227,  48, 146, 
    222, 173,  12,  15,  36, 247, 
    246,  96,  78, 160, 247,  54, 
      7, 129,  22, 224, 146, 254, 
    225, 235, 209, 238, 219,  78, 
    154,  19, 222,   5, 191, 127, 
     25, 140,  61,  72,  11, 249, 
     11, 175, 200, 156, 194,  81, 
    224, 255,  41,  24, 233,  61, 
     66, 249,  97, 179, 209,  34, 
    232,  97, 136, 224, 180, 129, 
     56,   9, 252, 232,  77,  71, 
     79, 142, 198,  60,  50, 129, 
    223, 109,  36, 101,  58, 126, 
    197,  29, 157, 153, 112,  75, 
    229, 133,  92, 254, 161,  59, 
     89,  40, 151, 220, 241,  66, 
     49, 191,  92, 158, 157, 153, 
    116,  75, 197, 101, 119, 122, 
    101,  41, 151,  47, 150, 220, 
    235, 235, 171,  27, 133,   7, 
    249, 156,  59, 155,  93, 127, 
    116, 103,  45,  63,  62,  49, 
     61,  53, 181, 180, 154, 205, 
     23, 203,  11, 171,  75, 133, 
    181, 161, 141,  92,  22, 190, 
      3, 152,  83,   1,  85,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  49,   9, 204, 233, 
    228, 144, 174,  25,  88,  80, 
     68,  80,  77,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  68,  71,  83, 
     76,  76,  97, 109,  98, 101, 
    114, 116,  95, 109,  97, 105, 
    110,  46, 112, 100,  98
};
