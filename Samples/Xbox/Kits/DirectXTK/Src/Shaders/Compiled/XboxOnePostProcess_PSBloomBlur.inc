#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[97]
// Embedded Data:
//  0x00000061 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000005c - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[32], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
mov r0.xyzw, l(0,0,0,0)
mov r1.x, l(0)
loop 
  ige r1.y, r1.x, l(15)
  breakc_nz r1.y
  add r1.yz, v1.xxyx, cb0[r1.x + 0].xxyx
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.yzyy, t0.xyzw, s0
  mad r0.xyzw, cb0[r1.x + 16].xyzw, r2.xyzw, r0.xyzw
  iadd r1.x, r1.x, l(1)
endloop 
mov o0.xyzw, r0.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[97], bundle is:[267] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSBloomBlur.pdb
// Shader Semantic Hash      : 0x4bd662fc94652301
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 732 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 28;
NumSgprs             = 64;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x2C8, dwords=0xB2)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v24, off, off, off done vm        // 000000000008: F8001801 00000018
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v24, v25, off, off done vm        // 000000000008: F8001803 00001918
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v24, v27, off, off done vm        // 000000000008: F8001803 00001B18
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v24, v25                     // 000000000000: 5E003318
  v_cvt_pkrtz_f16_f32  v1, v26, v27                     // 000000000004: 5E02371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v24, v25                    // 000000000000: 5C003318
  v_cvt_pknorm_u16_f32  v1, v26, v27                    // 000000000004: 5C02371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v24, v25                    // 000000000000: 5A003318
  v_cvt_pknorm_i16_f32  v1, v26, v27                    // 000000000004: 5A02371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v24, v25                        // 000000000000: 60003318
  v_cvt_pk_u16_u32  v1, v26, v27                        // 000000000004: 6002371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v24, v25                        // 000000000000: 62003318
  v_cvt_pk_i16_i32  v1, v26, v27                        // 000000000004: 6202371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v24, v25, v26, v27 done vm        // 000000000008: F800180F 1B1A1918
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[60:61], exec                          // 000000000000: BEBC047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     s58, s2                                 // 000000000008: BEBA0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  s_waitcnt     lgkmcnt(0)                              // 000000000010: BF8C007F
  s_buffer_load_dwordx2  s[48:49], s[12:15], 0x00       // 000000000014: C2580D00
  s_buffer_load_dwordx16  s[16:31], s[12:15], 0x40      // 000000000018: C3080D40
  s_buffer_load_dwordx2  s[50:51], s[12:15], 0x04       // 00000000001C: C2590D04
  s_buffer_load_dwordx2  s[52:53], s[12:15], 0x08       // 000000000020: C25A0D08
  s_buffer_load_dwordx2  s[54:55], s[12:15], 0x0c       // 000000000024: C25B0D0C
  s_buffer_load_dwordx2  s[56:57], s[12:15], 0x10       // 000000000028: C25C0D10
  s_buffer_load_dwordx16  s[32:47], s[12:15], 0x50      // 00000000002C: C3100D50
  s_mov_b32     m0, s58                                 // 000000000030: BEFC033A
  v_interp_p1_f32  v20, v0, attr0.x                     // 000000000034: C8500000
  v_interp_p2_f32  v20, v1, attr0.x                     // 000000000038: C8510001
  v_interp_p1_f32  v21, v0, attr0.y                     // 00000000003C: C8540100
  v_interp_p2_f32  v21, v1, attr0.y                     // 000000000040: C8550101
  s_waitcnt     lgkmcnt(0)                              // 000000000044: BF8C007F
  v_add_f32     v0, s48, v20                            // 000000000048: 06002830
  v_add_f32     v1, s49, v21                            // 00000000004C: 06022A31
  v_add_f32     v4, s50, v20                            // 000000000050: 06082832
  v_add_f32     v5, s51, v21                            // 000000000054: 060A2A33
  v_add_f32     v8, s52, v20                            // 000000000058: 06102834
  v_add_f32     v9, s53, v21                            // 00000000005C: 06122A35
  v_add_f32     v12, s54, v20                           // 000000000060: 06182836
  v_add_f32     v13, s55, v21                           // 000000000064: 061A2A37
  v_add_f32     v16, s56, v20                           // 000000000068: 06202838
  v_add_f32     v17, s57, v21                           // 00000000006C: 06222A39
  image_sample  v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf // 000000000070: F0800F00 00400000
  image_sample  v[4:7], v[4:5], s[0:7], s[8:11] dmask:0xf // 000000000078: F0800F00 00400404
  image_sample  v[8:11], v[8:9], s[0:7], s[8:11] dmask:0xf // 000000000080: F0800F00 00400808
  image_sample  v[12:15], v[12:13], s[0:7], s[8:11] dmask:0xf // 000000000088: F0800F00 00400C0C
  image_sample  v[16:19], v[16:17], s[0:7], s[8:11] dmask:0xf // 000000000090: F0800F00 00401010
  s_waitcnt     vmcnt(4)                                // 000000000098: BF8C0F74
  v_mul_legacy_f32  v0, s16, v0                         // 00000000009C: 0E000010
  v_mul_legacy_f32  v1, s17, v1                         // 0000000000A0: 0E020211
  v_mul_legacy_f32  v2, s18, v2                         // 0000000000A4: 0E040412
  v_mul_legacy_f32  v3, s19, v3                         // 0000000000A8: 0E060613
  s_waitcnt     vmcnt(3)                                // 0000000000AC: BF8C0F73
  v_mac_f32     v0, s20, v4                             // 0000000000B0: 3E000814
  v_mac_f32     v1, s21, v5                             // 0000000000B4: 3E020A15
  v_mac_f32     v2, s22, v6                             // 0000000000B8: 3E040C16
  v_mac_f32     v3, s23, v7                             // 0000000000BC: 3E060E17
  s_waitcnt     vmcnt(2)                                // 0000000000C0: BF8C0F72
  v_mac_f32     v0, s24, v8                             // 0000000000C4: 3E001018
  v_mac_f32     v1, s25, v9                             // 0000000000C8: 3E021219
  v_mac_f32     v2, s26, v10                            // 0000000000CC: 3E04141A
  v_mac_f32     v3, s27, v11                            // 0000000000D0: 3E06161B
  s_waitcnt     vmcnt(1)                                // 0000000000D4: BF8C0F71
  v_mac_f32     v0, s28, v12                            // 0000000000D8: 3E00181C
  v_mac_f32     v1, s29, v13                            // 0000000000DC: 3E021A1D
  v_mac_f32     v2, s30, v14                            // 0000000000E0: 3E041C1E
  v_mac_f32     v3, s31, v15                            // 0000000000E4: 3E061E1F
  s_buffer_load_dwordx2  s[48:49], s[12:15], 0x14       // 0000000000E8: C2580D14
  s_buffer_load_dwordx2  s[50:51], s[12:15], 0x18       // 0000000000EC: C2590D18
  s_buffer_load_dwordx2  s[52:53], s[12:15], 0x1c       // 0000000000F0: C25A0D1C
  s_buffer_load_dwordx2  s[54:55], s[12:15], 0x20       // 0000000000F4: C25B0D20
  s_buffer_load_dwordx16  s[16:31], s[12:15], 0x60      // 0000000000F8: C3080D60
  s_waitcnt     vmcnt(0)                                // 0000000000FC: BF8C0F70
  v_mad_f32     v16, s32, v16, v0                       // 000000000100: D2820010 04022020
  v_mad_f32     v17, s33, v17, v1                       // 000000000108: D2820011 04062221
  v_mad_f32     v18, s34, v18, v2                       // 000000000110: D2820012 040A2422
  v_mad_f32     v19, s35, v19, v3                       // 000000000118: D2820013 040E2623
  s_waitcnt     lgkmcnt(0)                              // 000000000120: BF8C007F
  v_add_f32     v0, s48, v20                            // 000000000124: 06002830
  v_add_f32     v1, s49, v21                            // 000000000128: 06022A31
  v_add_f32     v4, s50, v20                            // 00000000012C: 06082832
  v_add_f32     v5, s51, v21                            // 000000000130: 060A2A33
  v_add_f32     v8, s52, v20                            // 000000000134: 06102834
  v_add_f32     v9, s53, v21                            // 000000000138: 06122A35
  v_add_f32     v12, s54, v20                           // 00000000013C: 06182836
  v_add_f32     v13, s55, v21                           // 000000000140: 061A2A37
  image_sample  v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf // 000000000144: F0800F00 00400000
  image_sample  v[4:7], v[4:5], s[0:7], s[8:11] dmask:0xf // 00000000014C: F0800F00 00400404
  image_sample  v[8:11], v[8:9], s[0:7], s[8:11] dmask:0xf // 000000000154: F0800F00 00400808
  image_sample  v[12:15], v[12:13], s[0:7], s[8:11] dmask:0xf // 00000000015C: F0800F00 00400C0C
  s_waitcnt     vmcnt(3)                                // 000000000164: BF8C0F73
  v_mac_f32     v16, s36, v0                            // 000000000168: 3E200024
  v_mac_f32     v17, s37, v1                            // 00000000016C: 3E220225
  v_mac_f32     v18, s38, v2                            // 000000000170: 3E240426
  v_mac_f32     v19, s39, v3                            // 000000000174: 3E260627
  s_waitcnt     vmcnt(2)                                // 000000000178: BF8C0F72
  v_mac_f32     v16, s40, v4                            // 00000000017C: 3E200828
  v_mac_f32     v17, s41, v5                            // 000000000180: 3E220A29
  v_mac_f32     v18, s42, v6                            // 000000000184: 3E240C2A
  v_mac_f32     v19, s43, v7                            // 000000000188: 3E260E2B
  s_waitcnt     vmcnt(1)                                // 00000000018C: BF8C0F71
  v_mac_f32     v16, s44, v8                            // 000000000190: 3E20102C
  v_mac_f32     v17, s45, v9                            // 000000000194: 3E22122D
  v_mac_f32     v18, s46, v10                           // 000000000198: 3E24142E
  v_mac_f32     v19, s47, v11                           // 00000000019C: 3E26162F
  s_buffer_load_dwordx2  s[40:41], s[12:15], 0x24       // 0000000001A0: C2540D24
  s_buffer_load_dwordx2  s[42:43], s[12:15], 0x28       // 0000000001A4: C2550D28
  s_buffer_load_dwordx2  s[44:45], s[12:15], 0x2c       // 0000000001A8: C2560D2C
  s_buffer_load_dwordx2  s[46:47], s[12:15], 0x30       // 0000000001AC: C2570D30
  s_buffer_load_dwordx8  s[32:39], s[12:15], 0x70       // 0000000001B0: C2D00D70
  s_waitcnt     vmcnt(0)                                // 0000000001B4: BF8C0F70
  v_mad_f32     v24, s16, v12, v16                      // 0000000001B8: D2820018 04421810
  v_mad_f32     v25, s17, v13, v17                      // 0000000001C0: D2820019 04461A11
  v_mad_f32     v26, s18, v14, v18                      // 0000000001C8: D282001A 044A1C12
  v_mad_f32     v27, s19, v15, v19                      // 0000000001D0: D282001B 044E1E13
  s_waitcnt     lgkmcnt(0)                              // 0000000001D8: BF8C007F
  v_add_f32     v0, s40, v20                            // 0000000001DC: 06002828
  v_add_f32     v1, s41, v21                            // 0000000001E0: 06022A29
  s_buffer_load_dwordx2  s[16:17], s[12:15], 0x34       // 0000000001E4: C2480D34
  v_add_f32     v4, s42, v20                            // 0000000001E8: 0608282A
  v_add_f32     v5, s43, v21                            // 0000000001EC: 060A2A2B
  s_buffer_load_dwordx2  s[18:19], s[12:15], 0x38       // 0000000001F0: C2490D38
  v_add_f32     v8, s44, v20                            // 0000000001F4: 0610282C
  v_add_f32     v9, s45, v21                            // 0000000001F8: 06122A2D
  s_buffer_load_dwordx4  s[12:15], s[12:15], 0x78       // 0000000001FC: C2860D78
  v_add_f32     v12, s46, v20                           // 000000000200: 0618282E
  v_add_f32     v13, s47, v21                           // 000000000204: 061A2A2F
  s_waitcnt     lgkmcnt(0)                              // 000000000208: BF8C007F
  v_add_f32     v16, s16, v20                           // 00000000020C: 06202810
  v_add_f32     v17, s17, v21                           // 000000000210: 06222A11
  v_add_f32     v20, s18, v20                           // 000000000214: 06282812
  v_add_f32     v21, s19, v21                           // 000000000218: 062A2A13
  image_sample  v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf // 00000000021C: F0800F00 00400000
  image_sample  v[4:7], v[4:5], s[0:7], s[8:11] dmask:0xf // 000000000224: F0800F00 00400404
  image_sample  v[8:11], v[8:9], s[0:7], s[8:11] dmask:0xf // 00000000022C: F0800F00 00400808
  image_sample  v[12:15], v[12:13], s[0:7], s[8:11] dmask:0xf // 000000000234: F0800F00 00400C0C
  image_sample  v[16:19], v[16:17], s[0:7], s[8:11] dmask:0xf // 00000000023C: F0800F00 00401010
  image_sample  v[20:23], v[20:21], s[0:7], s[8:11] dmask:0xf // 000000000244: F0800F00 00401414
  s_waitcnt     vmcnt(5)                                // 00000000024C: BF8C0F75
  v_mac_f32     v24, s20, v0                            // 000000000250: 3E300014
  v_mac_f32     v25, s21, v1                            // 000000000254: 3E320215
  v_mac_f32     v26, s22, v2                            // 000000000258: 3E340416
  v_mac_f32     v27, s23, v3                            // 00000000025C: 3E360617
  s_waitcnt     vmcnt(4)                                // 000000000260: BF8C0F74
  v_mac_f32     v24, s24, v4                            // 000000000264: 3E300818
  v_mac_f32     v25, s25, v5                            // 000000000268: 3E320A19
  v_mac_f32     v26, s26, v6                            // 00000000026C: 3E340C1A
  v_mac_f32     v27, s27, v7                            // 000000000270: 3E360E1B
  s_waitcnt     vmcnt(3)                                // 000000000274: BF8C0F73
  v_mac_f32     v24, s28, v8                            // 000000000278: 3E30101C
  v_mac_f32     v25, s29, v9                            // 00000000027C: 3E32121D
  v_mac_f32     v26, s30, v10                           // 000000000280: 3E34141E
  v_mac_f32     v27, s31, v11                           // 000000000284: 3E36161F
  s_waitcnt     vmcnt(2)                                // 000000000288: BF8C0F72
  v_mac_f32     v24, s32, v12                           // 00000000028C: 3E301820
  v_mac_f32     v25, s33, v13                           // 000000000290: 3E321A21
  v_mac_f32     v26, s34, v14                           // 000000000294: 3E341C22
  v_mac_f32     v27, s35, v15                           // 000000000298: 3E361E23
  s_waitcnt     vmcnt(1)                                // 00000000029C: BF8C0F71
  v_mac_f32     v24, s36, v16                           // 0000000002A0: 3E302024
  v_mac_f32     v25, s37, v17                           // 0000000002A4: 3E322225
  v_mac_f32     v26, s38, v18                           // 0000000002A8: 3E342426
  v_mac_f32     v27, s39, v19                           // 0000000002AC: 3E362627
  s_waitcnt     vmcnt(0)                                // 0000000002B0: BF8C0F70
  v_mac_f32     v24, s12, v20                           // 0000000002B4: 3E30280C
  v_mac_f32     v25, s13, v21                           // 0000000002B8: 3E322A0D
  v_mac_f32     v26, s14, v22                           // 0000000002BC: 3E342C0E
  v_mac_f32     v27, s15, v23                           // 0000000002C0: 3E362E0F
  s_mov_b64     exec, s[60:61]                          // 0000000002C4: BEFE043C
  v_cvt_pkrtz_f16_f32  v0, v24, v25                     // 0000000002C8: 5E003318
  v_cvt_pkrtz_f16_f32  v1, v26, v27                     // 0000000002CC: 5E02371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000002D0: F8001C0F 00000100
  s_endpgm                                              // 0000000002D8: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         32
//  WorkgroupSize:              64
//  NumVRegs:                   28
//  NumSRegs:                   64
//  NumActiveWaveFrontByVReg:   36
//  NumActiveWaveFrontBySReg:   32
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   186
//  CycleSimNWaves:             186
//  Code Size:                  732
//Assembler Counts:
//  num_32bit_ops                     : 135
//  num_64bit_ops                     : 24
//  num_alu                           : 96
//  num_fc                            : 47
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 15
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 21
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 84
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 16
//  num_vmem_group                    : 3
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 32
// m_uVRegLimit                      : 47
// m_uSRegLimit                      : 100
// m_uNumVRegs                       : 28
// m_uNumSRegs                       : 64
// m_uSCCodeSize                     : 732
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 36
// m_uNumActiveWaveFrontBySReg       : 32
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 186
// m_uCycleSimNWaves                 : 186

// Assembler Counts:
// num_32bit_ops                     : 135
// num_64bit_ops                     : 24
// num_alu                           : 96
// num_fc                            : 47
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 15
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 21
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 84
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 21
// constant_literal_operands         : 0
// num_tex                           : 16
// num_vmem_group                    : 3
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSBloomBlur[] =
{
     68,  88,  66,  67, 110, 128, 
    123, 247,  23, 232,  21,  77, 
    143, 141, 165,  81,  40,  68, 
     20, 107,   1,   0,   0,   0, 
    236,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 128,   6,   0,   0, 
    144,   6,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 184,   5, 
      0,   0,  80,   0,   0,   0, 
    110,   1,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     97,   0,   0,   0,  80,   0, 
      0,   0,  92,   0,   0,   0, 
    106,   8,   0,   1,  89,   8, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,  32,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   3,   0, 
      0,   0,  54,   0,   0,   8, 
    242,   0,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  54,   0, 
      0,   5,  18,   0,  16,   0, 
      1,   0,   0,   0,   1,  64, 
      0,   0,   0,   0,   0,   0, 
     48,   0,   0,   1,  33,   0, 
      0,   7,  34,   0,  16,   0, 
      1,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
      1,  64,   0,   0,  15,   0, 
      0,   0,   3,   0,   4,   3, 
     26,   0,  16,   0,   1,   0, 
      0,   0,   0,   0,   0,   9, 
     98,   0,  16,   0,   1,   0, 
      0,   0,   6,  17,  16,   0, 
      1,   0,   0,   0,   6, 129, 
     32,   4,   0,   0,   0,   0, 
     10,   0,  16,   0,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      2,   0,   0,   0, 150,   5, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  50,   0, 
      0,  12, 242,   0,  16,   0, 
      0,   0,   0,   0,  70, 142, 
     32,   6,   0,   0,   0,   0, 
     16,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
     70,  14,  16,   0,   2,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  30,   0, 
      0,   7,  18,   0,  16,   0, 
      1,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
      1,  64,   0,   0,   1,   0, 
      0,   0,  22,   0,   0,   1, 
     54,   0,   0,   5, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0,  13,   1, 
      0,   0,  23,   0,   1,   0, 
     41,  37,  19,   0, 120,   1, 
    237,  88, 207, 111,  27,  69, 
     20,  30, 111, 166, 131,  49, 
    222, 245, 250,  71, 220, 245, 
    143, 186,  91, 199, 113, 183, 
    219,  52,  49, 174, 113,  67, 
     65,  79, 110,  18, 241,  43, 
     18,  24, 213, 129,  16,  86, 
    173, 113, 108, 137,  72,  41, 
     54, 182, 139, 114,  10, 129, 
      3, 112, 232, 129,   3, 135, 
    222, 184, 112, 226, 200, 177, 
     66,  54, 108, 123, 200,  17, 
    113, 224, 196, 191, 128, 196, 
      9, 113, 168,  10, 239, 173, 
    119, 131,  91,  40, 234, 193, 
     18,   8, 252,  73, 223, 251, 
    246, 205, 206, 206, 126, 111, 
    198, 182,  60,  51,  31, 101, 
     14, 138, 119, 126, 249, 146, 
    116, 109, 152,  13, 118, 124, 
    140,  29, 195, 107,  20,  71, 
      9,  55, 101, 138, 140, 221, 
     81,  41,  50, 166,  35, 151, 
    144,  77, 100,  26,  89,  65, 
    254,  40, 141,  52, 135, 164, 
    251,   6, 146,  85, 242, 171, 
    236, 192,  88, 165, 203, 103, 
    144, 212, 247, 150, 203, 143, 
    145,  26, 178, 142, 164, 177, 
    232, 125, 132,  16,   5,  23, 
    179,  20,  16, 158, 143, 113, 
    212,  40, 184, 224,  72, 175, 
     47,  89, 156,  65,  30, 161, 
     69, 225, 175, 241,  57, 146, 
     60,  61,  12, 228, 205, 243, 
     67, 254, 200,  39, 129, 234, 
    252, 167,  49, 154, 175,  63, 
     34, 209,  91,  39,   2, 173, 
    199,  56,  20,  36, 245,  33, 
    244, 221, 117, 244, 230, 233, 
     19,  55, 167, 185, 160, 218, 
    190,  65,  62,  12, 191,  33, 
    220, 238,  71, 240, 114,  26, 
     95, 248, 112,  84,  63,  94, 
    252,  79,  65, 159,  69,   2, 
    205,   5,  45,   1, 205, 205, 
    248, 103, 218, 187, 255,  21, 
      5, 118,  48,  36, 126, 170, 
    177,  95,  41, 243, 114,  31, 
    230, 244, 221, 240, 242,  25, 
    202,  19,  15, 228,  41, 252, 
    254, 156, 103,  87, 146,  23, 
    164,  43, 161,  52,  62, 143, 
     47, 196, 220, 194, 220,  26, 
    203, 183,  48, 223,  26, 203, 
    235, 152, 215, 199, 242,   6, 
    230,  13,  47, 247, 198,  15, 
     57, 239,  75, 166, 104, 173, 
    177, 113, 255, 223, 204, 169, 
    199, 201, 112, 234, 113,  50, 
    156, 122, 156,  12, 167,  30, 
     39, 195, 169, 199, 201, 112, 
    234, 113,  50, 156, 122, 156, 
     24, 217,  62, 255, 122, 176, 
     31, 184,  55, 144, 102, 110, 
     13, 240, 255, 219, 183, 239, 
    179,  27,  67,  38, 111, 218, 
     21, 217, 127, 155, 203, 111, 
    216, 126, 121, 203,  14, 202, 
    111, 218, 170, 108, 217,  85, 
     89, 189, 125, 113, 230, 238, 
    128, 177, 234, 161, 143, 189, 
    122, 200, 124, 181,  67, 159, 
    111, 227, 144, 158,  41,  24, 
     76,  60, 105,  74, 162, 104, 
    248, 197, 121,  51,  32,  74, 
    134,  42, 158,  50,  35, 162, 
    108, 104, 226, 130, 153,  20, 
    203, 134,  46, 158,  54, 179, 
    130, 133,  14, 126, 118, 118, 
      8, 168, 156, 143, 212, 239, 
     31, 105,  48,  56,  82,  85, 
    173, 176, 126, 232, 198,  16, 
    255, 247,  42,  97,  73,  82, 
     34, 156,  43,  81,  33, 148, 
     30, 182, 197, 252,  12, 102, 
      3,  18, 196, 131,  28, 142, 
     43,   2, 186, 216, 166, 169, 
     12,  18,  17,   9, 146,  49, 
     14, 169, 184, 128, 119, 177, 
     45, 173,  49,  56, 145, 148, 
     32, 147, 230, 112,  50,  35, 
     32, 134,  53, 105,  88,  79, 
     26, 235, 209, 177, 158,  58, 
    214, 215, 193, 126,  42, 251, 
    240, 123,  93, 151, 120,  24, 
    245,  84,  86, 240,   8, 106, 
     54,  23, 224,  81, 212, 185, 
    188, 194,  31, 165,  54, 242, 
    252, 119,  53, 145, 239,  28, 
    211,  97,  94, 202,  66, 158, 
    231, 224, 180, 200,  59, 190, 
     13, 191,  14, 103,   2,  89, 
     48, 131,  57,  56, 171, 228, 
     29, 223,  11, 170,  14, 231, 
     34,  89,  88, 140, 229,  96, 
     41, 158, 135, 156,  92, 179, 
     13, 121, 195,  94, 144,  95, 
    179,  11, 242, 235, 118,  71, 
    254, 206,  38, 223,  26, 250, 
     83, 181,  21, 158,  64,  13, 
     39, 159, 227,  73, 212,  72, 
    250,  37, 158,  66, 141, 102, 
     94, 118, 124,  27, 232, 251, 
     12, 250,  46, 201,  47, 216, 
     38, 122,  63, 139, 222, 151, 
    229,  23, 237,   5, 244, 127, 
     14, 253, 239, 201,  31, 217, 
    139,  88, 195,  18, 214,  64, 
    253,  85,  92, 163,  48, 174, 
     81, 196,  48,  68, 212,  52, 
     31, 121, 173,  72,  99, 177, 
     10, 187, 142, 190,  98, 172, 
      0, 179,  82,  17, 226, 188, 
      4, 199,  69,  25, 104,  29, 
     53, 127,   1,  18, 129,  34, 
     36, 131,  37,  72,  41, 101, 
    160, 249,  72, 171,   5,  56, 
     17,  41,  66,  38,  86, 130, 
    147, 241, 178,  51,  31, 186, 
     86, 128,  83, 201,  34, 100, 
    211,  37, 152, 203, 148, 157, 
    249, 200, 233,   5, 152, 207, 
     22,  33, 159,  43, 193, 233, 
    124,  25, 168, 246, 160,  81, 
      0, 217,  44, 130, 178,  80, 
    130, 208,  98,  25, 158, 229, 
    247,   6, 184,  15, 185, 111, 
     31, 195, 216,   7, 195,   4, 
    233,   3, 123,  88,   7, 126, 
    167, 195,  17, 156, 140, 251, 
    238, 219, 114,  58, 143,  97, 
     91, 144, 212,  67, 152,   2, 
    238, 139, 105,  67, 134, 160, 
    115, 138, 199, 145,  62, 119, 
     23,  76, 103,  22, 156,   9, 
    140, 216,  54, 215, 250, 236, 
    110, 227, 135, 117, 186,  38, 
     44, 187, 207, 106, 174,  82, 
     95, 111, 236,  37, 124,  93, 
    147, 125,  65, 151, 127,  66, 
    221, 237,  95, 117, 149,  94, 
     77, 251,  63, 197,  61, 209, 
     56,  80, 232, 132,   1, 213, 
    189, 191, 231,  42, 213, 242, 
      4, 210, 243, 241, 147, 219, 
    126, 211, 213,  13,  36,  57, 
     93, 187, 104,  93, 170,  61, 
    111, 245, 250,  87, 155, 173, 
    247, 172, 245, 157, 126, 207, 
     90, 219, 233, 182, 182, 251, 
    155, 181, 117, 171, 215, 221, 
    182,  46, 191, 253,  86, 179, 
    213, 237,  89, 171, 237, 107, 
    157, 157, 221,  86, 211, 218, 
    108, 180, 247,  94, 121, 167, 
     85, 109, 247, 250, 213, 110, 
    123, 187, 213, 235,  93, 173, 
     94,  94, 217, 109, 183, 175, 
    173, 236,  94, 239,  46, 118, 
    154,  13,  28, 118, 132,  99, 
     17, 138,  12,  87, 100, 116, 
     80,  64,  19,  77,  63, 140, 
    222,   6, 118,  84,  56,  66, 
    173,  60, 230, 158,  35, 253, 
      7, 193, 216, 239,  18,  10, 
    116, 185,  88,  72,  83,  72, 
      8,   0,   0,   0,   1,  35, 
    101, 148, 252,  98, 214,  75, 
     88,  80,  68,  80,  84,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  80, 
    111, 115, 116,  80, 114, 111, 
     99, 101, 115, 115,  95,  80, 
     83,  66, 108, 111, 111, 109, 
     66, 108, 117, 114,  46, 112, 
    100,  98
};
