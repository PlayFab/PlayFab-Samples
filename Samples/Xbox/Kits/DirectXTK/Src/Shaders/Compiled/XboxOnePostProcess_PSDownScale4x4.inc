#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[97]
// Embedded Data:
//  0x00000061 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000005c - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[32], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
mov r0.xyzw, l(0,0,0,0)
mov r1.x, l(0)
loop 
  ige r1.y, r1.x, l(16)
  breakc_nz r1.y
  add r1.yz, v1.xxyx, cb0[r1.x + 0].xxyx
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.yzyy, t0.xyzw, s0
  add r0.xyzw, r0.xyzw, r2.xyzw
  iadd r1.x, r1.x, l(1)
endloop 
mul o0.xyzw, r0.xyzw, l(0.062500, 0.062500, 0.062500, 0.062500)
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[97], bundle is:[239] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSDownScale4x4.pdb
// Shader Semantic Hash      : 0x3d277806c11dc301
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 712 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 38;
NumSgprs             = 52;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x2B4, dwords=0xAD)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[48:49], exec                          // 000000000000: BEB0047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     s46, s2                                 // 000000000008: BEAE0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  s_waitcnt     lgkmcnt(0)                              // 000000000010: BF8C007F
  s_buffer_load_dwordx2  s[16:17], s[12:15], 0x00       // 000000000014: C2480D00
  s_buffer_load_dwordx2  s[18:19], s[12:15], 0x04       // 000000000018: C2490D04
  s_buffer_load_dwordx2  s[20:21], s[12:15], 0x08       // 00000000001C: C24A0D08
  s_buffer_load_dwordx2  s[22:23], s[12:15], 0x0c       // 000000000020: C24B0D0C
  s_buffer_load_dwordx2  s[24:25], s[12:15], 0x10       // 000000000024: C24C0D10
  s_buffer_load_dwordx2  s[26:27], s[12:15], 0x14       // 000000000028: C24D0D14
  s_buffer_load_dwordx2  s[28:29], s[12:15], 0x18       // 00000000002C: C24E0D18
  s_buffer_load_dwordx2  s[30:31], s[12:15], 0x1c       // 000000000030: C24F0D1C
  s_buffer_load_dwordx2  s[32:33], s[12:15], 0x20       // 000000000034: C2500D20
  s_buffer_load_dwordx2  s[34:35], s[12:15], 0x24       // 000000000038: C2510D24
  s_buffer_load_dwordx2  s[36:37], s[12:15], 0x28       // 00000000003C: C2520D28
  s_buffer_load_dwordx2  s[38:39], s[12:15], 0x2c       // 000000000040: C2530D2C
  s_buffer_load_dwordx2  s[40:41], s[12:15], 0x30       // 000000000044: C2540D30
  s_buffer_load_dwordx2  s[42:43], s[12:15], 0x34       // 000000000048: C2550D34
  s_buffer_load_dwordx2  s[44:45], s[12:15], 0x38       // 00000000004C: C2560D38
  s_buffer_load_dwordx2  s[12:13], s[12:15], 0x3c       // 000000000050: C2460D3C
  s_mov_b32     m0, s46                                 // 000000000054: BEFC032E
  v_interp_p1_f32  v32, v0, attr0.x                     // 000000000058: C8800000
  v_interp_p2_f32  v32, v1, attr0.x                     // 00000000005C: C8810001
  v_interp_p1_f32  v33, v0, attr0.y                     // 000000000060: C8840100
  v_interp_p2_f32  v33, v1, attr0.y                     // 000000000064: C8850101
  s_waitcnt     lgkmcnt(0)                              // 000000000068: BF8C007F
  v_add_f32     v0, s16, v32                            // 00000000006C: 06004010
  v_add_f32     v1, s17, v33                            // 000000000070: 06024211
  v_add_f32     v4, s18, v32                            // 000000000074: 06084012
  v_add_f32     v5, s19, v33                            // 000000000078: 060A4213
  v_add_f32     v8, s20, v32                            // 00000000007C: 06104014
  v_add_f32     v9, s21, v33                            // 000000000080: 06124215
  v_add_f32     v12, s22, v32                           // 000000000084: 06184016
  v_add_f32     v13, s23, v33                           // 000000000088: 061A4217
  v_add_f32     v16, s24, v32                           // 00000000008C: 06204018
  v_add_f32     v17, s25, v33                           // 000000000090: 06224219
  v_add_f32     v20, s26, v32                           // 000000000094: 0628401A
  v_add_f32     v21, s27, v33                           // 000000000098: 062A421B
  v_add_f32     v24, s28, v32                           // 00000000009C: 0630401C
  v_add_f32     v25, s29, v33                           // 0000000000A0: 0632421D
  v_add_f32     v28, s30, v32                           // 0000000000A4: 0638401E
  v_add_f32     v29, s31, v33                           // 0000000000A8: 063A421F
  image_sample  v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf // 0000000000AC: F0800F00 00400000
  image_sample  v[4:7], v[4:5], s[0:7], s[8:11] dmask:0xf // 0000000000B4: F0800F00 00400404
  image_sample  v[8:11], v[8:9], s[0:7], s[8:11] dmask:0xf // 0000000000BC: F0800F00 00400808
  image_sample  v[12:15], v[12:13], s[0:7], s[8:11] dmask:0xf // 0000000000C4: F0800F00 00400C0C
  image_sample  v[16:19], v[16:17], s[0:7], s[8:11] dmask:0xf // 0000000000CC: F0800F00 00401010
  image_sample  v[20:23], v[20:21], s[0:7], s[8:11] dmask:0xf // 0000000000D4: F0800F00 00401414
  image_sample  v[24:27], v[24:25], s[0:7], s[8:11] dmask:0xf // 0000000000DC: F0800F00 00401818
  image_sample  v[28:31], v[28:29], s[0:7], s[8:11] dmask:0xf // 0000000000E4: F0800F00 00401C1C
  s_waitcnt     vmcnt(6)                                // 0000000000EC: BF8C0F76
  v_add_f32     v0, v0, v4                              // 0000000000F0: 06000900
  v_add_f32     v1, v1, v5                              // 0000000000F4: 06020B01
  v_add_f32     v2, v2, v6                              // 0000000000F8: 06040D02
  v_add_f32     v3, v3, v7                              // 0000000000FC: 06060F03
  s_waitcnt     vmcnt(5)                                // 000000000100: BF8C0F75
  v_add_f32     v0, v0, v8                              // 000000000104: 06001100
  v_add_f32     v1, v1, v9                              // 000000000108: 06021301
  v_add_f32     v2, v2, v10                             // 00000000010C: 06041502
  v_add_f32     v3, v3, v11                             // 000000000110: 06061703
  s_waitcnt     vmcnt(4)                                // 000000000114: BF8C0F74
  v_add_f32     v0, v0, v12                             // 000000000118: 06001900
  v_add_f32     v1, v1, v13                             // 00000000011C: 06021B01
  v_add_f32     v2, v2, v14                             // 000000000120: 06041D02
  v_add_f32     v3, v3, v15                             // 000000000124: 06061F03
  s_waitcnt     vmcnt(3)                                // 000000000128: BF8C0F73
  v_add_f32     v0, v0, v16                             // 00000000012C: 06002100
  v_add_f32     v1, v1, v17                             // 000000000130: 06022301
  v_add_f32     v2, v2, v18                             // 000000000134: 06042502
  v_add_f32     v3, v3, v19                             // 000000000138: 06062703
  s_waitcnt     vmcnt(2)                                // 00000000013C: BF8C0F72
  v_add_f32     v0, v0, v20                             // 000000000140: 06002900
  v_add_f32     v1, v1, v21                             // 000000000144: 06022B01
  v_add_f32     v2, v2, v22                             // 000000000148: 06042D02
  v_add_f32     v3, v3, v23                             // 00000000014C: 06062F03
  s_waitcnt     vmcnt(1)                                // 000000000150: BF8C0F71
  v_add_f32     v0, v0, v24                             // 000000000154: 06003100
  v_add_f32     v1, v1, v25                             // 000000000158: 06023301
  v_add_f32     v2, v2, v26                             // 00000000015C: 06043502
  v_add_f32     v3, v3, v27                             // 000000000160: 06063703
  s_waitcnt     vmcnt(0)                                // 000000000164: BF8C0F70
  v_add_f32     v34, v0, v28                            // 000000000168: 06443900
  v_add_f32     v35, v1, v29                            // 00000000016C: 06463B01
  v_add_f32     v36, v2, v30                            // 000000000170: 06483D02
  v_add_f32     v37, v3, v31                            // 000000000174: 064A3F03
  v_add_f32     v0, s32, v32                            // 000000000178: 06004020
  v_add_f32     v1, s33, v33                            // 00000000017C: 06024221
  v_add_f32     v4, s34, v32                            // 000000000180: 06084022
  v_add_f32     v5, s35, v33                            // 000000000184: 060A4223
  v_add_f32     v8, s36, v32                            // 000000000188: 06104024
  v_add_f32     v9, s37, v33                            // 00000000018C: 06124225
  v_add_f32     v12, s38, v32                           // 000000000190: 06184026
  v_add_f32     v13, s39, v33                           // 000000000194: 061A4227
  v_add_f32     v16, s40, v32                           // 000000000198: 06204028
  v_add_f32     v17, s41, v33                           // 00000000019C: 06224229
  v_add_f32     v20, s42, v32                           // 0000000001A0: 0628402A
  v_add_f32     v21, s43, v33                           // 0000000001A4: 062A422B
  v_add_f32     v24, s44, v32                           // 0000000001A8: 0630402C
  v_add_f32     v25, s45, v33                           // 0000000001AC: 0632422D
  v_add_f32     v28, s12, v32                           // 0000000001B0: 0638400C
  v_add_f32     v29, s13, v33                           // 0000000001B4: 063A420D
  image_sample  v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf // 0000000001B8: F0800F00 00400000
  image_sample  v[4:7], v[4:5], s[0:7], s[8:11] dmask:0xf // 0000000001C0: F0800F00 00400404
  image_sample  v[8:11], v[8:9], s[0:7], s[8:11] dmask:0xf // 0000000001C8: F0800F00 00400808
  image_sample  v[12:15], v[12:13], s[0:7], s[8:11] dmask:0xf // 0000000001D0: F0800F00 00400C0C
  image_sample  v[16:19], v[16:17], s[0:7], s[8:11] dmask:0xf // 0000000001D8: F0800F00 00401010
  image_sample  v[20:23], v[20:21], s[0:7], s[8:11] dmask:0xf // 0000000001E0: F0800F00 00401414
  image_sample  v[24:27], v[24:25], s[0:7], s[8:11] dmask:0xf // 0000000001E8: F0800F00 00401818
  image_sample  v[28:31], v[28:29], s[0:7], s[8:11] dmask:0xf // 0000000001F0: F0800F00 00401C1C
  s_waitcnt     vmcnt(7)                                // 0000000001F8: BF8C0F77
  v_add_f32     v0, v34, v0                             // 0000000001FC: 06000122
  v_add_f32     v1, v35, v1                             // 000000000200: 06020323
  v_add_f32     v2, v36, v2                             // 000000000204: 06040524
  v_add_f32     v3, v37, v3                             // 000000000208: 06060725
  s_waitcnt     vmcnt(6)                                // 00000000020C: BF8C0F76
  v_add_f32     v0, v0, v4                              // 000000000210: 06000900
  v_add_f32     v1, v1, v5                              // 000000000214: 06020B01
  v_add_f32     v2, v2, v6                              // 000000000218: 06040D02
  v_add_f32     v3, v3, v7                              // 00000000021C: 06060F03
  s_waitcnt     vmcnt(5)                                // 000000000220: BF8C0F75
  v_add_f32     v0, v0, v8                              // 000000000224: 06001100
  v_add_f32     v1, v1, v9                              // 000000000228: 06021301
  v_add_f32     v2, v2, v10                             // 00000000022C: 06041502
  v_add_f32     v3, v3, v11                             // 000000000230: 06061703
  s_waitcnt     vmcnt(4)                                // 000000000234: BF8C0F74
  v_add_f32     v0, v0, v12                             // 000000000238: 06001900
  v_add_f32     v1, v1, v13                             // 00000000023C: 06021B01
  v_add_f32     v2, v2, v14                             // 000000000240: 06041D02
  v_add_f32     v3, v3, v15                             // 000000000244: 06061F03
  s_waitcnt     vmcnt(3)                                // 000000000248: BF8C0F73
  v_add_f32     v0, v0, v16                             // 00000000024C: 06002100
  v_add_f32     v1, v1, v17                             // 000000000250: 06022301
  v_add_f32     v2, v2, v18                             // 000000000254: 06042502
  v_add_f32     v3, v3, v19                             // 000000000258: 06062703
  s_waitcnt     vmcnt(2)                                // 00000000025C: BF8C0F72
  v_add_f32     v0, v0, v20                             // 000000000260: 06002900
  v_add_f32     v1, v1, v21                             // 000000000264: 06022B01
  v_add_f32     v2, v2, v22                             // 000000000268: 06042D02
  v_add_f32     v3, v3, v23                             // 00000000026C: 06062F03
  s_waitcnt     vmcnt(1)                                // 000000000270: BF8C0F71
  v_add_f32     v0, v0, v24                             // 000000000274: 06003100
  v_add_f32     v1, v1, v25                             // 000000000278: 06023301
  v_add_f32     v2, v2, v26                             // 00000000027C: 06043502
  v_add_f32     v3, v3, v27                             // 000000000280: 06063703
  s_waitcnt     vmcnt(0)                                // 000000000284: BF8C0F70
  v_add_f32     v0, v0, v28                             // 000000000288: 06003900
  v_add_f32     v1, v1, v29                             // 00000000028C: 06023B01
  v_add_f32     v2, v2, v30                             // 000000000290: 06043D02
  v_add_f32     v3, v3, v31                             // 000000000294: 06063F03
  s_mov_b32     s0, 0x3d800000                          // 000000000298: BE8003FF 3D800000
  v_mul_legacy_f32  v0, s0, v0                          // 0000000002A0: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 0000000002A4: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 0000000002A8: 0E040400
  v_mul_legacy_f32  v3, s0, v3                          // 0000000002AC: 0E060600
  s_mov_b64     exec, s[48:49]                          // 0000000002B0: BEFE0430
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 0000000002B4: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 0000000002B8: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000002BC: F8001C0F 00000100
  s_endpgm                                              // 0000000002C4: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         24
//  WorkgroupSize:              64
//  NumVRegs:                   38
//  NumSRegs:                   52
//  NumActiveWaveFrontByVReg:   24
//  NumActiveWaveFrontBySReg:   36
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   198
//  CycleSimNWaves:             198
//  Code Size:                  712
//Assembler Counts:
//  num_32bit_ops                     : 143
//  num_64bit_ops                     : 17
//  num_alu                           : 102
//  num_fc                            : 41
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 16
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 18
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 6
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 98
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 17
//  num_vmem_group                    : 2
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 24
// m_uVRegLimit                      : 47
// m_uSRegLimit                      : 100
// m_uNumVRegs                       : 38
// m_uNumSRegs                       : 52
// m_uSCCodeSize                     : 712
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 24
// m_uNumActiveWaveFrontBySReg       : 36
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 198
// m_uCycleSimNWaves                 : 198

// Assembler Counts:
// num_32bit_ops                     : 143
// num_64bit_ops                     : 17
// num_alu                           : 102
// num_fc                            : 41
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 16
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 18
// num_inst_sopc                     : 0
// num_inst_sop1                     : 6
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 98
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 17
// constant_literal_operands         : 0
// num_tex                           : 17
// num_vmem_group                    : 2
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSDownScale4x4[] =
{
     68,  88,  66,  67, 173, 212, 
    115,  88,  54, 193, 115, 164, 
    168, 235, 174, 226, 106, 243, 
     22, 205,   1,   0,   0,   0, 
    127,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0,  16,   6,   0,   0, 
     32,   6,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  72,   5, 
      0,   0,  80,   0,   0,   0, 
     82,   1,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     97,   0,   0,   0,  80,   0, 
      0,   0,  92,   0,   0,   0, 
    106,   8,   0,   1,  89,   8, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,  32,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   3,   0, 
      0,   0,  54,   0,   0,   8, 
    242,   0,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  54,   0, 
      0,   5,  18,   0,  16,   0, 
      1,   0,   0,   0,   1,  64, 
      0,   0,   0,   0,   0,   0, 
     48,   0,   0,   1,  33,   0, 
      0,   7,  34,   0,  16,   0, 
      1,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
      1,  64,   0,   0,  16,   0, 
      0,   0,   3,   0,   4,   3, 
     26,   0,  16,   0,   1,   0, 
      0,   0,   0,   0,   0,   9, 
     98,   0,  16,   0,   1,   0, 
      0,   0,   6,  17,  16,   0, 
      1,   0,   0,   0,   6, 129, 
     32,   4,   0,   0,   0,   0, 
     10,   0,  16,   0,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      2,   0,   0,   0, 150,   5, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   7, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   2,   0, 
      0,   0,  30,   0,   0,   7, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  10,   0,  16,   0, 
      1,   0,   0,   0,   1,  64, 
      0,   0,   1,   0,   0,   0, 
     22,   0,   0,   1,  56,   0, 
      0,  10, 242,  32,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
      2,  64,   0,   0,   0,   0, 
    128,  61,   0,   0, 128,  61, 
      0,   0, 128,  61,   0,   0, 
    128,  61,  62,   0,   0,   1, 
     53,  16,   0,   0, 241,   0, 
      0,   0,  23,   0,   1,   0, 
     41,  20,  19,   0, 120,   1, 
    237,  88,  77, 111,  91,  69, 
     20, 157, 247, 209,  27, 183, 
    245, 216,  78, 226,  82, 167, 
    113, 104, 154,  56,  77, 210, 
    175, 164,  16, 160, 180, 141, 
    250, 112, 162,  82, 154,  66, 
      3,   9,  40, 170, 158, 218, 
     52, 177,  17, 145,  66,  29, 
    108, 211, 102,  67,  72, 165, 
    178,   2,   9,  54,  72,  44, 
     89, 176,   5, 245,  23,  56, 
    244,  85,  66, 254,  17, 108, 
    217, 177,  96, 193, 130,   5, 
    106,  57, 231, 121,  94, 226, 
      6, 186, 179,  84,   4,  62, 
    210, 153,  59, 247, 188, 241, 
    204, 125, 103,  44, 203,  51, 
    233, 110,  21, 226, 243, 177, 
     79,  38,  25, 127, 249, 250, 
    225, 203, 107, 150,  82, 123, 
    208,  71,   8,  35, 241, 141, 
    102, 171, 212, 253,  20,  91, 
    165,  50, 224,  24,  88,   0, 
    143, 130,  19,  96, 221,  86, 
    202,  67, 228, 179,  28,  56, 
      2,  42, 175, 103,  74, 109, 
    246,  78, 177, 123,  26,  28, 
      2, 127,  50, 252,  18, 236, 
      4, 223,   7,  71,  65, 174, 
     71, 152,  37,  66, 116, 177, 
      1, 132, 205,  46,  44, 177, 
     49, 112,  65, 206,  69,  48, 
    162, 148,  29,  20, 217, 252, 
     51, 190,   5,  89, 255, 211, 
    192, 218, 162, 122,  88,  31, 
    235,  36, 248, 190, 207,  26, 
     13, 191, 118,  90,  50, 218, 
     39, 130, 251, 209, 140,   4, 
    200,  49, 196, 162, 121,  41, 
    135,  13,  80,  53, 121, 180, 
    151,  63, 130,  79, 195,  99, 
    192,  12, 223,  70, 148, 115, 
    126, 177,  48, 107,  12, 157, 
    255,  41, 248,  93,  36, 232, 
      5, 183, 128, 222,  36, 193, 
      8, 209, 243, 239, 217, 168, 
    205,  45, 242, 171, 140, 250, 
    131,  89, 148,  91, 187, 114, 
    135,  57,  39, 108, 206, 185, 
    121, 142, 186, 110, 119, 216, 
    215, 147,  89, 243, 220,  81, 
     62, 114, 191,  41, 191, 134, 
    252,  90,  83, 190, 136, 124, 
    177,  41,  95,  66, 190, 180, 
    157, 155, 249, 147, 225, 122, 
    182, 195, 189, 134, 184, 241, 
    111, 102, 187, 198, 214, 176, 
     93,  99, 107, 216, 174, 177, 
     53, 108, 215, 216,  26, 182, 
    107, 108,  13, 219,  53, 182, 
    134, 237,  26,  91,  70, 181, 
    225, 222, 175, 109, 236, 123, 
     84, 179, 157,  31, 106, 248, 
    255, 246, 224,  83, 245, 197, 
    150, 210, 151,   2,  87, 191, 
     17, 196, 244, 229,  32, 174, 
    103, 130, 148, 190,  18, 164, 
    245, 155,  65,  70, 191,  21, 
    100, 245, 213, 160,  95, 207, 
      6,  57, 253, 118,  48, 162, 
    223,   9,  78, 232, 185,  96, 
     92, 207,   7,  19, 250, 221, 
    224, 140, 126,  47,  56, 175, 
     47,   6, 167, 156,  63, 107, 
    248,  15,  88, 183, 212, 221, 
    186, 178, 238, 213,  45, 235, 
    179,  58, 231,  77, 121,  74, 
     58, 243, 182, 116, 121,  49, 
    233, 206, 239, 147, 180, 151, 
    146,   3, 249,  46, 121, 206, 
    203, 200, 193, 252,  33, 201, 
    120, 253, 210, 147,  31, 144, 
     67, 222, 136, 244, 230, 143, 
     73, 214,  27, 151, 190, 252, 
     11, 242, 188, 119,  70,  14, 
    231, 207, 138,  74, 110, 254, 
     22, 158,  16,  17,  93, 183, 
     17,  99, 177,  70, 140, 199, 
     27,  49, 133,  69,  24, 211, 
    233,  70, 204, 100,  26,  49, 
    155, 245, 212, 237,  36, 222, 
    109,  47, 142,  23, 251, 109, 
    177, 181,  43,  78,  82, 228, 
     99, 106, 157, 208, 186, 161, 
     29, 128, 118,  80, 164,  74, 
    173,   7,  90,  47, 180,  62, 
    104, 135,  69,  42, 212, 142, 
     64,  27, 132,  54,   4, 109, 
     88, 164,  76, 109,  20, 218, 
    113, 104,  39, 161, 141, 137, 
    124,  68, 237,  52, 180,  23, 
    161, 189,   4, 237,  21, 145, 
     53, 106, 175,  78, 139, 117, 
    238, 162, 216, 147, 151, 196, 
    185, 112,  89, 250, 225, 197, 
     17, 120,  49,   0,  47,   6, 
    225,  69,  14,  94,  12, 193, 
    139, 163, 240,  98,  24,  94, 
    140, 192, 139,  81, 120, 113, 
     12,  94,  28, 135,  23,  39, 
    224, 197,  73, 120,  17, 135, 
     23, 186,   5,  94, 220,  65, 
     77,   3, 150, 146,  65, 199, 
    150, 220,  30,  87, 134,  58, 
     68, 158, 173,  63, 208, 206, 
     65, 155, 132, 118,  65, 228, 
    177, 179, 201, 239,  16, 239, 
     20,  18, 202, 182,  19, 202, 
    117,  19,  74,  36,  49, 238, 
     62, 170, 225, 204, 241, 228, 
    153,  69, 221, 221, 234,  97, 
    220, 117,  94,  13,  17,  11, 
      7, 108,  35, 204,  92, 235, 
    137, 227, 101, 248,  49, 104, 
    113,  70, 131,  95, 205, 129, 
    180, 110,  34, 239,  35, 246, 
    130,  22,  22,  39, 250,  65, 
    215, 220,  42,  88,  15, 251, 
     30, 200, 250, 112, 120, 255, 
     65, 228, 204,  69, 130, 107, 
     34, 199,  70, 115, 143,  97, 
    185, 130, 250, 142, 221, 191, 
    225, 138,  25, 127, 222,  68, 
     46, 205, 179,  94, 194, 220, 
    162, 108,  38,  22,  25, 212, 
    170, 121,  94,  48, 145, 239, 
    178,  31, 140, 234, 248, 217, 
    232, 247,  76,  92,   0,  89, 
    233, 244,  89, 255, 181, 249, 
    215, 253,  74, 245,  70, 161, 
    120, 219, 159,  89, 169,  86, 
    252, 233, 149, 114, 113, 185, 
    186,  48,  63, 227,  87, 202, 
    203, 254, 220,   7,  55,  11, 
    197, 114, 197, 159,  42, 125, 
    184, 182, 178,  90,  44, 248, 
     11,  75, 165, 245, 171, 183, 
    138, 179, 165,  74, 117, 182, 
     92,  90,  46,  86,  42,  55, 
    102, 231, 166,  75, 119, 110, 
    205,  45, 223,  92,  45,  78, 
    172,  79, 156,  90,  43, 236, 
    220, 162, 252, 110, 214, 227, 
    193, 147,  46, 209, 107, 254, 
     14, 186,  97,  47, 122, 119, 
     32, 229, 117, 152, 107, 163, 
    255,  32, 148, 250,  11, 227, 
    202,  79, 104,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
      1, 195,  29, 193,   6, 120, 
     39,  61,  88,  80,  68,  80, 
     87,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  80, 111, 115, 116,  80, 
    114, 111,  99, 101, 115, 115, 
     95,  80,  83,  68, 111, 119, 
    110,  83,  99,  97, 108, 101, 
     52, 120,  52,  46, 112, 100, 
     98
};
