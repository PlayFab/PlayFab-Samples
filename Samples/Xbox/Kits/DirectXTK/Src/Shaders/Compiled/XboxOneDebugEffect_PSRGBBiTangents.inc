#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float    y  
// TEXCOORD                 1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 2   xyz         2     NONE   float       
// COLOR                    0   xyzw        3     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[149]
// Embedded Data:
//  0x00000095 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000090 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_input_ps linear v0.y
dcl_input_ps linear v1.xyz
dcl_input_ps linear v3.w
dcl_output o0.xyzw
dcl_temps 5
deriv_rtx_coarse r0.x, v0.y
deriv_rty_coarse r0.y, v0.y
deriv_rtx_coarse r1.xyz, v1.yzxy
deriv_rty_coarse r2.xyz, v1.zxyz
mul r3.xyz, r1.xyzx, r2.yzxy
mad r3.xyz, r1.zxyz, r2.zxyz, -r3.xyzx
mul r4.xyz, r1.xyzx, r3.xyzx
mad r1.xyz, r3.zxyz, r1.yzxy, -r4.xyzx
mul r0.yzw, r0.yyyy, r1.xxyz
mul r1.xyz, r2.xyzx, r3.zxyz
mad r1.xyz, r2.zxyz, r3.xyzx, -r1.xyzx
mad r0.xyz, r0.xxxx, r1.xyzx, r0.yzwy
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mad o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, v3.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[149], bundle is:[200] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDebugEffect_PSRGBBiTangents.pdb
// Shader Semantic Hash      : 0xd36771b239d73496
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask  2, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  7, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 3, channelMask  8, param2, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 452 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 0;
extUserElementCount  = 0;
NumVgprs             = 16;
NumSgprs             = 5;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000003
SPIC:NUM_INTERP             = 3
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x1B0, dwords=0x6C)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v3, off, off, off done vm         // 000000000008: F8001801 00000003
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v3, v4, off, off done vm          // 000000000008: F8001803 00000403
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v3, v0, off, off done vm          // 000000000008: F8001803 00000003
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v3, v4                       // 000000000000: 5E020903
  v_cvt_pkrtz_f16_f32  v0, v2, v0                       // 000000000004: 5E000102
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v3, v4                      // 000000000000: 5C020903
  v_cvt_pknorm_u16_f32  v0, v2, v0                      // 000000000004: 5C000102
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v3, v4                      // 000000000000: 5A020903
  v_cvt_pknorm_i16_f32  v0, v2, v0                      // 000000000004: 5A000102
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v3, v4                          // 000000000000: 60020903
  v_cvt_pk_u16_u32  v0, v2, v0                          // 000000000004: 60000102
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v3, v4                          // 000000000000: 62020903
  v_cvt_pk_i16_i32  v0, v2, v0                          // 000000000004: 62000102
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v3, v4, v2, v0 done vm            // 000000000008: F800180F 00020403
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[0:1], exec                            // 000000000000: BE80047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.y                      // 00000000000C: C8080100
  v_interp_p2_f32  v2, v1, attr0.y                      // 000000000010: C8090101
  ds_swizzle_b32  v3, v2 offset:32853                   // 000000000014: D8D48055 03000002
  ds_swizzle_b32  v4, v2 offset:32768                   // 00000000001C: D8D48000 04000002
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  v_sub_f32     v3, v3, v4                              // 000000000028: 08060903
  ds_swizzle_b32  v4, v2 offset:32938                   // 00000000002C: D8D480AA 04000002
  ds_swizzle_b32  v2, v2 offset:32768                   // 000000000034: D8D48000 02000002
  s_waitcnt     lgkmcnt(0)                              // 00000000003C: BF8C007F
  v_sub_f32     v2, v4, v2                              // 000000000040: 08040504
  v_interp_p1_f32  v4, v0, attr1.x                      // 000000000044: C8100400
  v_interp_p2_f32  v4, v1, attr1.x                      // 000000000048: C8110401
  v_interp_p1_f32  v5, v0, attr1.y                      // 00000000004C: C8140500
  v_interp_p2_f32  v5, v1, attr1.y                      // 000000000050: C8150501
  v_interp_p1_f32  v6, v0, attr1.z                      // 000000000054: C8180600
  v_interp_p2_f32  v6, v1, attr1.z                      // 000000000058: C8190601
  ds_swizzle_b32  v7, v5 offset:32853                   // 00000000005C: D8D48055 07000005
  ds_swizzle_b32  v8, v5 offset:32768                   // 000000000064: D8D48000 08000005
  s_waitcnt     lgkmcnt(0)                              // 00000000006C: BF8C007F
  v_sub_f32     v7, v7, v8                              // 000000000070: 080E1107
  ds_swizzle_b32  v8, v6 offset:32853                   // 000000000074: D8D48055 08000006
  ds_swizzle_b32  v9, v6 offset:32768                   // 00000000007C: D8D48000 09000006
  s_waitcnt     lgkmcnt(0)                              // 000000000084: BF8C007F
  v_sub_f32     v8, v8, v9                              // 000000000088: 08101308
  ds_swizzle_b32  v9, v4 offset:32853                   // 00000000008C: D8D48055 09000004
  ds_swizzle_b32  v10, v4 offset:32768                  // 000000000094: D8D48000 0A000004
  s_waitcnt     lgkmcnt(0)                              // 00000000009C: BF8C007F
  v_sub_f32     v9, v9, v10                             // 0000000000A0: 08121509
  ds_swizzle_b32  v10, v6 offset:32938                  // 0000000000A4: D8D480AA 0A000006
  ds_swizzle_b32  v6, v6 offset:32768                   // 0000000000AC: D8D48000 06000006
  s_waitcnt     lgkmcnt(0)                              // 0000000000B4: BF8C007F
  v_sub_f32     v6, v10, v6                             // 0000000000B8: 080C0D0A
  ds_swizzle_b32  v10, v4 offset:32938                  // 0000000000BC: D8D480AA 0A000004
  ds_swizzle_b32  v4, v4 offset:32768                   // 0000000000C4: D8D48000 04000004
  s_waitcnt     lgkmcnt(0)                              // 0000000000CC: BF8C007F
  v_sub_f32     v4, v10, v4                             // 0000000000D0: 0808090A
  ds_swizzle_b32  v10, v5 offset:32938                  // 0000000000D4: D8D480AA 0A000005
  ds_swizzle_b32  v5, v5 offset:32768                   // 0000000000DC: D8D48000 05000005
  s_waitcnt     lgkmcnt(0)                              // 0000000000E4: BF8C007F
  v_sub_f32     v5, v10, v5                             // 0000000000E8: 080A0B0A
  v_mul_legacy_f32  v10, v7, v4                         // 0000000000EC: 0E140907
  v_mul_legacy_f32  v11, v8, v5                         // 0000000000F0: 0E160B08
  v_mul_legacy_f32  v12, v9, v6                         // 0000000000F4: 0E180D09
  v_mad_legacy_f32  v10, v9, v5, -v10                   // 0000000000F8: D280000A 842A0B09
  v_mad_legacy_f32  v11, v7, v6, -v11                   // 000000000100: D280000B 842E0D07
  v_mad_legacy_f32  v12, v8, v4, -v12                   // 000000000108: D280000C 84320908
  v_mul_legacy_f32  v13, v7, v10                        // 000000000110: 0E1A1507
  v_mul_legacy_f32  v14, v8, v11                        // 000000000114: 0E1C1708
  v_mul_legacy_f32  v15, v9, v12                        // 000000000118: 0E1E1909
  v_mad_legacy_f32  v13, v12, v8, -v13                  // 00000000011C: D280000D 8436110C
  v_mad_legacy_f32  v14, v10, v9, -v14                  // 000000000124: D280000E 843A130A
  v_mad_legacy_f32  v15, v11, v7, -v15                  // 00000000012C: D280000F 843E0F0B
  v_mul_legacy_f32  v7, v2, v13                         // 000000000134: 0E0E1B02
  v_mul_legacy_f32  v8, v2, v14                         // 000000000138: 0E101D02
  v_mul_legacy_f32  v2, v2, v15                         // 00000000013C: 0E041F02
  v_mul_legacy_f32  v9, v6, v12                         // 000000000140: 0E121906
  v_mul_legacy_f32  v13, v4, v10                        // 000000000144: 0E1A1504
  v_mul_legacy_f32  v14, v5, v11                        // 000000000148: 0E1C1705
  v_mad_legacy_f32  v9, v5, v10, -v9                    // 00000000014C: D2800009 84261505
  v_mad_legacy_f32  v13, v6, v11, -v13                  // 000000000154: D280000D 84361706
  v_mad_legacy_f32  v14, v4, v12, -v14                  // 00000000015C: D280000E 843A1904
  v_mac_f32     v7, v3, v9                              // 000000000164: 3E0E1303
  v_mac_f32     v8, v3, v13                             // 000000000168: 3E101B03
  v_mac_f32     v2, v3, v14                             // 00000000016C: 3E041D03
  v_mul_legacy_f32  v3, v2, v2                          // 000000000170: 0E060502
  v_mac_f32     v3, v8, v8                              // 000000000174: 3E061108
  v_mac_f32     v3, v7, v7                              // 000000000178: 3E060F07
  v_rsq_f32     v3, v3                                  // 00000000017C: 7E065D03
  v_mul_legacy_f32  v4, v7, v3                          // 000000000180: 0E080707
  v_mul_legacy_f32  v5, v8, v3                          // 000000000184: 0E0A0708
  v_mul_legacy_f32  v2, v2, v3                          // 000000000188: 0E040702
  v_mad_f32     v3, v4, 0.5, 0.5                        // 00000000018C: D2820003 03C1E104
  v_mad_f32     v4, v5, 0.5, 0.5                        // 000000000194: D2820004 03C1E105
  v_mad_f32     v2, v2, 0.5, 0.5                        // 00000000019C: D2820002 03C1E102
  v_interp_p1_f32  v0, v0, attr2.w                      // 0000000001A4: C8000B00
  v_interp_p2_f32  v0, v1, attr2.w                      // 0000000001A8: C8010B01
  s_mov_b64     exec, s[0:1]                            // 0000000001AC: BEFE0400
  v_cvt_pkrtz_f16_f32  v1, v3, v4                       // 0000000001B0: 5E020903
  v_cvt_pkrtz_f16_f32  v0, v2, v0                       // 0000000001B4: 5E000102
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 0000000001B8: F8001C0F 00000001
  s_endpgm                                              // 0000000001C0: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   16
//  NumSRegs:                   5
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   87
//  CycleSimNWaves:             87
//  Code Size:                  452
//Assembler Counts:
//  num_32bit_ops                     : 55
//  num_64bit_ops                     : 29
//  num_alu                           : 54
//  num_fc                            : 13
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 16
//  num_inst_mimg                     : 0
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 9
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 1
//  num_inst_vop2                     : 31
//  num_inst_vop3                     : 12
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 10
//  constant_literal_operands         : 0
//  num_tex                           : 17
//  num_vmem_group                    : 0
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 16
// m_uNumSRegs                       : 5
// m_uSCCodeSize                     : 452
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 87
// m_uCycleSimNWaves                 : 87

// Assembler Counts:
// num_32bit_ops                     : 55
// num_64bit_ops                     : 29
// num_alu                           : 54
// num_fc                            : 13
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 16
// num_inst_mimg                     : 0
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 9
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 1
// num_inst_vop2                     : 31
// num_inst_vop3                     : 12
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 10
// num_inst_smem                     : 0
// constant_literal_operands         : 0
// num_tex                           : 17
// num_vmem_group                    : 0
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 0
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DebugEffect_PSRGBBiTangents[] =
{
     68,  88,  66,  67, 239, 233, 
    162,  74, 201,  44, 248, 139, 
    231,  22,  13, 144, 138,  88, 
    117, 254,   1,   0,   0,   0, 
    220,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0, 108,   6,   0,   0, 
    124,   6,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,   3,   2, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   7, 
      0,   0, 104,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   7,   0, 
      0,   0, 113,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,  15,   8, 
      0,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0,  67, 
     79,  76,  79,  82,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 124,   5,   0,   0, 
     80,   0,   0,   0,  95,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 149,   0, 
      0,   0,  80,   0,   0,   0, 
    144,   0,   0,   0, 106,   8, 
      0,   1,  98,  16,   0,   3, 
     34,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
    130,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      5,   0,   0,   0, 122,   0, 
      0,   5,  18,   0,  16,   0, 
      0,   0,   0,   0,  26,  16, 
     16,   0,   0,   0,   0,   0, 
    124,   0,   0,   5,  34,   0, 
     16,   0,   0,   0,   0,   0, 
     26,  16,  16,   0,   0,   0, 
      0,   0, 122,   0,   0,   5, 
    114,   0,  16,   0,   1,   0, 
      0,   0, 150,  20,  16,   0, 
      1,   0,   0,   0, 124,   0, 
      0,   5, 114,   0,  16,   0, 
      2,   0,   0,   0,  38,  25, 
     16,   0,   1,   0,   0,   0, 
     56,   0,   0,   7, 114,   0, 
     16,   0,   3,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0, 150,   4,  16,   0, 
      2,   0,   0,   0,  50,   0, 
      0,  10, 114,   0,  16,   0, 
      3,   0,   0,   0,  38,   9, 
     16,   0,   1,   0,   0,   0, 
     38,   9,  16,   0,   2,   0, 
      0,   0,  70,   2,  16, 128, 
     65,   0,   0,   0,   3,   0, 
      0,   0,  56,   0,   0,   7, 
    114,   0,  16,   0,   4,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   3,   0,   0,   0, 
     50,   0,   0,  10, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     38,   9,  16,   0,   3,   0, 
      0,   0, 150,   4,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      4,   0,   0,   0,  56,   0, 
      0,   7, 226,   0,  16,   0, 
      0,   0,   0,   0,  86,   5, 
     16,   0,   0,   0,   0,   0, 
      6,   9,  16,   0,   1,   0, 
      0,   0,  56,   0,   0,   7, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      2,   0,   0,   0,  38,   9, 
     16,   0,   3,   0,   0,   0, 
     50,   0,   0,  10, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     38,   9,  16,   0,   2,   0, 
      0,   0,  70,   2,  16,   0, 
      3,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      1,   0,   0,   0,  50,   0, 
      0,   9, 114,   0,  16,   0, 
      0,   0,   0,   0,   6,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0, 150,   7,  16,   0, 
      0,   0,   0,   0,  16,   0, 
      0,   7, 130,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  68,   0,   0,   5, 
    130,   0,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 114,   0,  16,   0, 
      0,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  50,   0,   0,  15, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,   2,  64, 
      0,   0,   0,   0,   0,  63, 
      0,   0,   0,  63,   0,   0, 
      0,  63,   0,   0,   0,   0, 
      2,  64,   0,   0,   0,   0, 
      0,  63,   0,   0,   0,  63, 
      0,   0,   0,  63,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,  16,  16,   0, 
      3,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    202,   0,   0,   0,  23,   0, 
      1,   0,  41, 165,  16,   0, 
    120,   1, 237,  87,  77,  79, 
     19,  81,  20, 125, 243, 253, 
    209, 246, 181,   5,  42, 173, 
    128, 184,  48, 198, 184,  96, 
     33,   6,  35, 139,   6,  17, 
    195, 130, 133,  70, 106,  68, 
     50, 242,  81,  90, 176,   9, 
      2, 182, 213, 184, 170,  72, 
    102, 101,  88,  24,  23, 198, 
     31,   0,  27, 151, 254, 128, 
    162,   9, 139,  89,  35, 137, 
     46, 220, 184, 112, 231,  15, 
     32, 209, 128, 247,  76, 223, 
    152,  17,  48, 110, 154, 104, 
     98,  79, 114, 238, 233, 189, 
    239, 190,  55, 119, 222, 155, 
     38, 239, 110,  38, 152, 143, 
    242, 193, 220,  38, 244, 203, 
    183,  93, 119,  72, 102,  76, 
    163, 223,  18,  17,  10, 188, 
    138, 193,  50, 230, 196,  97, 
     25,  59,   7, 131,   4, 202, 
    197,  18, 200, 219,  38, 127, 
    136,  20,  99,   1,  25, 123, 
     54, 220, 223, 255,  98, 152, 
    210, 152,  66,  68, 238, 109, 
    193,  75, 196,  30, 226,   0, 
     17, 203,  99,  57, 140, 135, 
     97, 193,  16,  84, 152,  16, 
    144, 219,  75, 140,  18,   1, 
     27,  70,  32,   9,  19,  70, 
      1, 230, 120, 228, 136, 135, 
    159,  25,   6, 106,   3, 144, 
    131, 103, 138, 109, 248, 185, 
     47, 127,  19, 168, 231,  48, 
    130, 115,   2, 112,  30,  97, 
    112, 152,  63,   0, 239, 137, 
    119, 123,  75, 252,  29,  14, 
      8, 208, 227, 128,  51, 214, 
    241,  81,  16, 116, 169, 147, 
     49, 147,  84, 161,  47,  33, 
    141, 200, 255, 129, 224,  91, 
    197,  94,  96,  39, 176, 167, 
    226, 111, 227,  35,  24,  95, 
    132,  97, 171,  91, 224, 243, 
     52, 219, 131,  23, 248,  18, 
    249, 152,  31, 248,  10, 124, 
    127,  98, 200,  39,  79, 177, 
    228,  41,  89,  98,  83, 241, 
    110, 182, 135, 227,  38, 223, 
     33, 223,   9, 249, 147, 228, 
     79, 134, 252,  25, 242, 103, 
     66, 126, 158, 252, 124, 224, 
      7, 235, 199, 253, 231, 201, 
    193,  89, 215, 254, 101, 182, 
    106, 108,  14,  91,  53,  54, 
    135, 173,  26, 155, 195,  86, 
    141, 205,  97, 171, 198, 230, 
    176,  85,  99, 115, 216, 170, 
    177, 105, 100,  53, 117, 181, 
     94, 179, 247, 235, 178, 242, 
    189, 206,  36, 211, 147,  36, 
    203, 187, 181, 186, 251, 145, 
    238, 157,  10, 107, 168, 250, 
    132, 173, 111,  41, 150, 110, 
    190,  22, 190, 136, 203, 136, 
    171, 154, 106,  50,  53, 225, 
     73, 106, 210,  99,  90, 135, 
     39, 105,  41, 143, 233, 105, 
     79, 210,  51, 254,  58, 212, 
     11,  24, 200,  39,  53, 145, 
    111,  36, 185, 137, 184, 142, 
    155, 125,  67,  45, 196, 205, 
    246, 132,  31, 167,  43, 170, 
    133,  56, 169, 141, 184, 149, 
    106, 243, 159,  75, 121, 182, 
    200, 215,  17, 183,  99,  81, 
     63, 142,  60, 145, 239, 215, 
    105,  91, 166,  31, 167, 231, 
    249, 113,  82, 205, 143,  71, 
    108, 211, 176,  58, 184,  25, 
     57, 193, 173,  88, 154, 211, 
    224, 142,  21,  57, 239,  70, 
     72, 141,  88, 159,  27,  37, 
     53, 173,  11, 174, 145,  58, 
    201, 205, 206, 110, 110, 101, 
     78, 241,  24, 197, 162, 201, 
      1, 151, 147, 218, 237, 131, 
    110, 156,  52,  18, 207, 186, 
    114,  23, 231, 114,  79, 130, 
    203, 189,  42, 215,  51, 109, 
     92, 165,  57,  26, 230, 208, 
    184, 150,  58, 235,  98, 158, 
    222, 217, 152, 167, 102,   6, 
     93, 165, 157, 103, 149, 174, 
     68,  86, 233,  81, 179, 178, 
    166, 115,  51, 169, 103, 141, 
    184, 158,  85, 238, 234,  53, 
    195,  48, 185, 105, 216,  92, 
     54,  84, 174, 176, 181,  29, 
    245, 243,  59, 186, 166, 175, 
    237, 104, 164,  50, 169,  76, 
    202,  34, 204, 147,  34, 146, 
    199, 212, 253,  58, 221, 183, 
    127, 185, 175,  51, 246, 116, 
    107,  93,  52,   7,  85, 161, 
    104, 149, 208, 247, 170, 212, 
     73,   1,  47,  47, 126, 184, 
    252, 230, 193, 194, 123, 252, 
      6, 182,  69, 222, 134, 208, 
    211, 196, 160,  15, 110,  96, 
      3, 230,   8, 190, 138, 252, 
     79,  66, 209, 151, 208, 190, 
     83,  95,  72, 187,  12, 136, 
      6,  49, 138,   1, 130,  42, 
    148,  90,  56, 122, 133, 163, 
    117, 156,  17, 227, 119, 136, 
    168, 116, 100, 208, 185, 146, 
     27, 117,  42, 213, 233,  66, 
    241, 145,  51,  86, 170,  86, 
    156, 145,  82, 185,  56,  87, 
    157, 200, 141,  57, 149, 242, 
    156,  51, 126, 111, 182,  80, 
     44,  87, 156, 171, 203, 247, 
     87,  74, 139, 197, 130,  51, 
    145,  95, 126, 124, 125, 169, 
     56,  82, 204,  63,  92, 184, 
     54,  63,  79, 169, 211,  55, 
    198, 111, 142,  14,  15, 151, 
    114, 179,  75,  11, 197, 165, 
    106, 165, 111, 165, 144, 103, 
     63,   0, 149,  57,  50,  96, 
     88,  72,  83,  72,   8,   0, 
      0,   0, 150,  52, 215,  57, 
    178, 113, 103, 211,  88,  80, 
     68,  80,  88,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  68, 101,  98, 
    117, 103,  69, 102, 102, 101, 
     99, 116,  95,  80,  83,  82, 
     71,  66,  66, 105,  84,  97, 
    110, 103, 101, 110, 116, 115, 
     46, 112, 100,  98
};
