#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[95]
// Embedded Data:
//  0x0000005f - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000005a - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r1.x, r0.w, v0.w, -cb0[1].x
mul r0.xyzw, r0.xyzw, v0.xyzw
mov o0.xyzw, r0.xyzw
lt r0.x, |r1.x|, cb0[1].y
movc r0.x, r0.x, cb0[1].z, cb0[1].w
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[95], bundle is:[167] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneAlphaTestEffect_PSAlphaTestEqNeNoFog.pdb
// Shader Semantic Hash      : 0xf70810b2367c602a
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  3, param1, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 160 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 10;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000050
DB:Z_ORDER                  = 1
DB:KILL_ENABLE              = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x8C, dwords=0x23)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v3, off, off done vm          // 000000000008: F8001803 00000301
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000004: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v0, v3                      // 000000000004: 5C000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v0, v3                      // 000000000004: 5A000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v0, v3                          // 000000000004: 60000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v0, v3                          // 000000000004: 62000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v0, v3 done vm            // 000000000008: F800180F 03000201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000010: C8080400
  v_interp_p2_f32  v2, v1, attr1.x                      // 000000000014: C8090401
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000018: C80C0500
  v_interp_p2_f32  v3, v1, attr1.y                      // 00000000001C: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[2:5], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400202
  s_buffer_load_dwordx4  s[0:3], s[12:15], 0x04         // 00000000002C: C2800D04
  v_interp_p1_f32  v6, v0, attr0.w                      // 000000000030: C8180300
  v_interp_p2_f32  v6, v1, attr0.w                      // 000000000034: C8190301
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000038: BF8C0070
  v_mad_legacy_f32  v7, v5, v6, -s0                     // 00000000003C: D2800007 80020D05
  v_interp_p1_f32  v8, v0, attr0.x                      // 000000000044: C8200000
  v_interp_p2_f32  v8, v1, attr0.x                      // 000000000048: C8210001
  v_interp_p1_f32  v9, v0, attr0.y                      // 00000000004C: C8240100
  v_interp_p2_f32  v9, v1, attr0.y                      // 000000000050: C8250101
  v_interp_p1_f32  v0, v0, attr0.z                      // 000000000054: C8000200
  v_interp_p2_f32  v0, v1, attr0.z                      // 000000000058: C8010201
  v_mul_legacy_f32  v1, v2, v8                          // 00000000005C: 0E021102
  v_mul_legacy_f32  v2, v3, v9                          // 000000000060: 0E041303
  v_mul_legacy_f32  v0, v4, v0                          // 000000000064: 0E000104
  v_mul_legacy_f32  v3, v5, v6                          // 000000000068: 0E060D05
  v_cmp_gt_f32  vcc, s1, abs(v7)                        // 00000000006C: D008026A 00020E01
  v_mov_b32     v4, s2                                  // 000000000074: 7E080202
  v_mov_b32     v5, s3                                  // 000000000078: 7E0A0203
  v_cndmask_b32  v4, v5, v4, vcc                        // 00000000007C: 00080905
  v_cmp_gt_f32  vcc, 0, v4                              // 000000000080: 7C080880
  s_andn2_b64   s[16:17], s[16:17], vcc // wrscc        // 000000000084: 8A906A10
  s_mov_b64     exec, s[16:17]                          // 000000000088: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 00000000008C: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000090: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000094: F8001C0F 00000001
  s_endpgm                                              // 00000000009C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   10
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   82
//  CycleSimNWaves:             82
//  Code Size:                  160
//Assembler Counts:
//  num_32bit_ops                     : 32
//  num_64bit_ops                     : 4
//  num_alu                           : 24
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 1
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 2
//  num_inst_vop2                     : 7
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 12
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 10
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 160
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 82
// m_uCycleSimNWaves                 : 82

// Assembler Counts:
// num_32bit_ops                     : 32
// num_64bit_ops                     : 4
// num_alu                           : 24
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 1
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 2
// num_inst_vop2                     : 7
// num_inst_vop3                     : 0
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 12
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE AlphaTestEffect_PSAlphaTestEqNeNoFog[] =
{
     68,  88,  66,  67,  53, 147, 
    186, 161, 111, 201, 163,  72, 
     10, 225,  52, 116, 210, 113, 
    252,  89,   1,   0,   0,   0, 
     89,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    132,   0,   0,   0, 184,   0, 
      0,   0, 224,   4,   0,   0, 
    240,   4,   0,   0,  73,  83, 
     71,  78,  72,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  62,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,  32,   4,   0,   0, 
     80,   0,   0,   0,   8,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  95,   0, 
      0,   0,  80,   0,   0,   0, 
     90,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   8,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      0,   0,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      1,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  16,  16,   0, 
      1,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  50,   0,   0,  11, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  58,  16, 
     16,   0,   0,   0,   0,   0, 
     10, 128,  32, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   7, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    242,  32,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  49,   0, 
      0,   9,  18,   0,  16,   0, 
      0,   0,   0,   0,  10,   0, 
     16, 128, 129,   0,   0,   0, 
      1,   0,   0,   0,  26, 128, 
     32,   0,   0,   0,   0,   0, 
      1,   0,   0,   0,  55,   0, 
      0,  11,  18,   0,  16,   0, 
      0,   0,   0,   0,  10,   0, 
     16,   0,   0,   0,   0,   0, 
     42, 128,  32,   0,   0,   0, 
      0,   0,   1,   0,   0,   0, 
     58, 128,  32,   0,   0,   0, 
      0,   0,   1,   0,   0,   0, 
     49,   0,   0,   7,  18,   0, 
     16,   0,   0,   0,   0,   0, 
     10,   0,  16,   0,   0,   0, 
      0,   0,   1,  64,   0,   0, 
      0,   0,   0,   0,  13,   0, 
      4,   3,  10,   0,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    169,   0,   0,   0,  23,   0, 
      1,   0,  41, 230,  15,   0, 
    120,   1, 237,  87,  77, 107, 
     19,  81,  20, 189, 239, 205, 
     76,  58, 137, 205,  36, 210, 
     46,  82, 112,  97,  49, 130, 
    184, 112, 167, 136, 184, 104, 
     52, 234, 162,  82, 139, 205, 
    162, 148, 161,  77, 211,  76, 
     77,  74,  53,  49,   9, 226, 
    162, 196,  20,  55,  34,  46, 
    178, 116, 217, 133, 191, 192, 
     31, 144, 104, 113,  49, 139, 
     22,  68, 183,  46, 197, 181, 
     11,  65,  23, 165, 122,  79, 
    242,  30,  29, 107, 187,  27, 
     80, 112,  14, 156, 123, 223, 
    121, 159, 119, 230, 206, 192, 
    187,  95,  82,  52, 192, 100, 
    226, 227,  83, 248, 139, 159, 
     55, 183,  43, 130, 200, 226, 
     54, 187, 129,   7,  94,  38, 
     97, 137, 158,  57, 176,  68, 
    231,  96,  48,  65,  18,  37, 
    216, 141,  51, 183, 152,  83, 
     76, 140, 105, 238, 238, 124, 
    203, 237, 238, 200, 107, 220, 
    164,  52, 243,   4, 243, 174, 
    226, 105, 166, 201, 204,  48, 
    177,   7, 182,   3, 180,   7, 
     12,  24,   6, 230,   5, 251, 
    249,  88,  26,  97,   2, 232, 
     31, 101, 162,  15, 128,  15, 
    206,  37,  15, 230, 104, 100, 
    153,  56, 251,  56,  32,  54, 
    189,  23, 188, 158, 139, 231, 
    253, 219,  24, 198, 117,  96, 
     65, 157,  39,   0, 249,   8, 
      2, 169, 195,  28, 224, 178, 
    202, 163, 126, 191, 183, 149, 
    198, 243, 225, 217, 222,  48, 
    143, 195,  79,   6, 114,  25, 
    132, 214, 120, 247,  49,  26, 
    126,  84,  49,  49,  70, 100, 
    163, 245, 127,   1, 223,  42, 
    128, 119,   1, 206,  50, 213, 
    111,  54, 128,  30,  63,   3, 
     67, 157,  62, 216, 205, 208, 
     15,  40, 173,   5, 235,  97, 
    174, 134, 218, 128, 198, 102, 
     65, 205, 201,  19, 150,  92, 
    228,  31,  97,  49, 117, 138, 
     53, 143, 178, 118,  89, 187, 
      1, 189, 192, 122,  33, 160, 
    139, 172, 139,   1,  93,  98, 
     93, 210,  90, 239, 159,  26, 
    158, 103,  32, 215, 220, 217, 
    254, 151,  25, 197,  24,  14, 
    163,  24, 195,  97,  20,  99, 
     56, 140,  98,  12, 135,  81, 
    140, 225,  48, 138,  49,  28, 
     70,  49, 134,  70, 106, 155, 
    221,  94,  59, 177, 223, 147, 
    198,  94, 143,  47, 247, 111, 
    201, 180, 125,  97, 198, 125, 
    178,  70, 125,  97,  37, 253, 
     39, 244, 162,  79, 169, 206, 
     87,  41, 167, 200,  76, 118, 
    182, 201, 200, 248, 194, 152, 
    240, 235, 220,  63,  66, 157, 
     15,  86,  82, 118, 184,  18, 
    243,   5,  77, 250,  36, 178, 
    190,  16, 103, 125, 190, 180, 
    250,  66,  10,  95, 158, 148, 
    142,  49, 102,  58, 166,  32, 
    199,  74, 198, 156,  53, 105, 
    191,  23, 142,  36,  41, 237, 
    182,  33,  19, 109,  43, 110, 
     83, 199, 182,  55, 210, 107, 
    221, 231, 105, 115, 191, 199, 
    119, 201, 223, 238, 162,  68, 
    155, 253,   9,  52,   6, 247, 
    214,  67, 176, 135,  51,  52, 
      6, 138,  15,  10, 150,  11, 
    131, 101, 220, 135, 218,  78, 
    227, 157, 170,  83, 182, 148, 
     71, 253,  22, 103,  10,  85, 
    201,  96, 189, 201,  21,   8, 
    112, 190, 184, 113, 233, 117, 
    218, 254, 142,  54, 176, 167, 
    214, 124,  82,  30, 245, 103, 
    112, 111, 162,  87,  48, 127, 
     32, 171,  46, 239, 227, 202, 
    163, 214, 193,  29, 222, 209, 
    213, 177, 218,  47, 175, 198, 
    175,  42, 143,  88,  80, 239, 
     30, 142, 195,  85, 227,  37, 
     38,  34, 205,  95, 113, 115, 
    133,  91, 110, 179, 181,  84, 
    246,  30, 185, 211, 213,  86, 
    211, 205,  87,  27, 222,  74, 
    107, 190,  48, 237,  54,  27, 
     43, 238,  92, 101, 185, 236, 
     53, 154, 238, 245, 218, 253, 
    122, 117, 221,  43, 187, 243, 
    165, 218, 227,  59,  15, 188, 
    220, 122, 189, 178,  92, 240, 
    154, 173,  27, 171, 171,  60, 
    125, 105, 118, 238, 160, 231, 
    225, 140,  55,  83, 187,  89, 
    187, 119, 161,  94,  46, 209, 
     47, 251,  76, 235, 120,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  42,  96, 124,  54, 
    178,  16,   8, 247,  88,  80, 
     68,  80,  97,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  65, 108, 112, 
    104,  97,  84, 101, 115, 116, 
     69, 102, 102, 101,  99, 116, 
     95,  80,  83,  65, 108, 112, 
    104,  97,  84, 101, 115, 116, 
     69, 113,  78, 101,  78, 111, 
     70, 111, 103,  46, 112, 100, 
     98
};
