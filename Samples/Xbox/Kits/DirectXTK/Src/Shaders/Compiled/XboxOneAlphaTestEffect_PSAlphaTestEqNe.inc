#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float      w
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[118]
// Embedded Data:
//  0x00000076 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000071 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mad r1.x, r0.w, v0.w, -cb0[1].x
mul r0.xyzw, r0.xyzw, v0.xyzw
lt r1.x, |r1.x|, cb0[1].y
movc r1.x, r1.x, cb0[1].z, cb0[1].w
lt r1.x, r1.x, l(0.000000)
discard_nz r1.x
mad r1.xyz, cb0[2].xyzx, r0.wwww, -r0.xyzx
mad o0.xyz, v1.wwww, r1.xyzx, r0.xyzx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[118], bundle is:[180] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneAlphaTestEffect_PSAlphaTestEqNe.pdb
// Shader Semantic Hash      : 0x6e56b230be04dbbe
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  8, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}

codeLenInByte        = 224 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 12;
NumSgprs             = 24;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000003
SPIC:NUM_INTERP             = 3
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000050
DB:Z_ORDER                  = 1
DB:KILL_ENABLE              = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0xCC, dwords=0x33)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v5, off, off done vm          // 000000000008: F8001803 00000502
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000004: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000004: 5C020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000004: 5A020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000004: 60020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000004: 62020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v5 done vm            // 000000000008: F800180F 05040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[20:21], exec                          // 000000000000: BE94047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_mov_b32     m0, s2                                  // 00000000000C: BEFC0302
  v_interp_p1_f32  v2, v0, attr2.x                      // 000000000010: C8080800
  v_interp_p1_f32  v3, v0, attr2.y                      // 000000000014: C80C0900
  v_interp_p2_f32  v2, v1, attr2.x                      // 000000000018: C8090801
  v_interp_p2_f32  v3, v1, attr2.y                      // 00000000001C: C80D0901
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000024: F0800F00 00610202
  s_buffer_load_dwordx4  s[0:3], s[16:19], 0x04         // 00000000002C: C2801104
  v_interp_p1_f32  v6, v0, attr0.w                      // 000000000030: C8180300
  v_interp_p2_f32  v6, v1, attr0.w                      // 000000000034: C8190301
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000038: BF8C0070
  v_mad_legacy_f32  v7, v5, v6, -s0                     // 00000000003C: D2800007 80020D05
  v_interp_p1_f32  v8, v0, attr0.x                      // 000000000044: C8200000
  v_interp_p1_f32  v9, v0, attr0.y                      // 000000000048: C8240100
  v_interp_p1_f32  v10, v0, attr0.z                     // 00000000004C: C8280200
  v_cmp_gt_f32  vcc, s1, abs(v7)                        // 000000000050: D008026A 00020E01
  v_mov_b32     v7, s2                                  // 000000000058: 7E0E0202
  v_mov_b32     v11, s3                                 // 00000000005C: 7E160203
  v_interp_p2_f32  v8, v1, attr0.x                      // 000000000060: C8210001
  v_interp_p2_f32  v9, v1, attr0.y                      // 000000000064: C8250101
  v_interp_p2_f32  v10, v1, attr0.z                     // 000000000068: C8290201
  v_cndmask_b32  v7, v11, v7, vcc                       // 00000000006C: 000E0F0B
  v_mul_legacy_f32  v2, v2, v8                          // 000000000070: 0E041102
  v_mul_legacy_f32  v3, v3, v9                          // 000000000074: 0E061303
  v_mul_legacy_f32  v4, v4, v10                         // 000000000078: 0E081504
  v_mul_legacy_f32  v5, v5, v6                          // 00000000007C: 0E0A0D05
  v_cmp_gt_f32  vcc, 0, v7                              // 000000000080: 7C080E80
  s_andn2_b64   s[20:21], s[20:21], vcc // wrscc        // 000000000084: 8A946A14
  s_cbranch_scc0  label_0032                            // 000000000088: BF84000F
  s_and_b64     exec, exec, s[20:21] // wrscc           // 00000000008C: 87FE147E
  s_wqm_b64     exec, exec // wrscc                     // 000000000090: BEFE0A7E
  s_buffer_load_dwordx4  s[0:3], s[16:19], 0x08         // 000000000094: C2801108
  v_interp_p1_f32  v0, v0, attr1.w                      // 000000000098: C8000700
  s_waitcnt     lgkmcnt(0)                              // 00000000009C: BF8C007F
  v_mad_legacy_f32  v6, s0, v5, -v2                     // 0000000000A0: D2800006 840A0A00
  v_mad_legacy_f32  v7, s1, v5, -v3                     // 0000000000A8: D2800007 840E0A01
  v_mad_legacy_f32  v8, s2, v5, -v4                     // 0000000000B0: D2800008 84120A02
  v_interp_p2_f32  v0, v1, attr1.w                      // 0000000000B8: C8010701
  v_mac_f32     v2, v0, v6                              // 0000000000BC: 3E040D00
  v_mac_f32     v3, v0, v7                              // 0000000000C0: 3E060F00
  v_mac_f32     v4, v0, v8                              // 0000000000C4: 3E081100
label_0032:
  s_mov_b64     exec, s[20:21]                          // 0000000000C8: BEFE0414
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 0000000000CC: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 0000000000D0: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000D4: F8001C0F 00000100
  s_endpgm                                              // 0000000000DC: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   12
//  NumSRegs:                   24
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   84
//  CycleSimNWaves:             84
//  Code Size:                  224
//Assembler Counts:
//  num_32bit_ops                     : 42
//  num_64bit_ops                     : 7
//  num_alu                           : 32
//  num_fc                            : 15
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 5
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 2
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 2
//  num_inst_vop2                     : 10
//  num_inst_vop3                     : 3
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 14
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 12
// m_uNumSRegs                       : 24
// m_uSCCodeSize                     : 224
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 84
// m_uCycleSimNWaves                 : 84

// Assembler Counts:
// num_32bit_ops                     : 42
// num_64bit_ops                     : 7
// num_alu                           : 32
// num_fc                            : 15
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 5
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 2
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 2
// num_inst_vop2                     : 10
// num_inst_vop3                     : 3
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 14
// num_inst_smem                     : 3
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE AlphaTestEffect_PSAlphaTestEqNe[] =
{
     68,  88,  66,  67, 206, 181, 
     91,  22, 146, 100,  30, 119, 
    204,  21, 170,  99, 103, 139, 
    231, 237,   1,   0,   0,   0, 
    252,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    156,   0,   0,   0, 208,   0, 
      0,   0, 136,   5,   0,   0, 
    152,   5,   0,   0,  73,  83, 
     71,  78,  96,   0,   0,   0, 
      3,   0,   0,   0,   8,   0, 
      0,   0,  80,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  80,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   8, 
      0,   0,  86,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 176,   4,   0,   0, 
     80,   0,   0,   0,  44,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 118,   0, 
      0,   0,  80,   0,   0,   0, 
    113,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   8,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      0,   0,   0,   0,  98,  16, 
      0,   3, 130,  16,  16,   0, 
      1,   0,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      2,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  16,  16,   0, 
      2,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  50,   0,   0,  11, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  58,  16, 
     16,   0,   0,   0,   0,   0, 
     10, 128,  32, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   7, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  49,   0,   0,   9, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  10,   0,  16, 128, 
    129,   0,   0,   0,   1,   0, 
      0,   0,  26, 128,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  55,   0,   0,  11, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  10,   0,  16,   0, 
      1,   0,   0,   0,  42, 128, 
     32,   0,   0,   0,   0,   0, 
      1,   0,   0,   0,  58, 128, 
     32,   0,   0,   0,   0,   0, 
      1,   0,   0,   0,  49,   0, 
      0,   7,  18,   0,  16,   0, 
      1,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
      1,  64,   0,   0,   0,   0, 
      0,   0,  13,   0,   4,   3, 
     10,   0,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,  11, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   2,   0, 
      0,   0, 246,  15,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      0,   0,   0,   0,  50,   0, 
      0,   9, 114,  32,  16,   0, 
      0,   0,   0,   0, 246,  31, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  54,   0, 
      0,   5, 130,  32,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     62,   0,   0,   1,  53,  16, 
      0,   0, 182,   0,   0,   0, 
     23,   0,   1,   0,  41,  33, 
     16,   0, 120,   1, 237,  87, 
     65, 107,  19,  65,  24, 253, 
    102, 118, 147, 108, 182, 205, 
    174, 213,  90,  90, 232, 193, 
     98, 133, 234,  65,  20, 111, 
     34, 197, 214, 138, 135, 130, 
     86,  26, 180, 148, 181, 182, 
    105,  54, 180, 165, 182, 177, 
      9, 210,  67, 137,  17,  34, 
    130, 244, 224, 161,   7,  15, 
     30, 197,  31, 224,  15,  72, 
     84,  60, 236,  65,  65,   4, 
     79,  94, 250,  19,  60, 246, 
     32, 213, 239, 109, 103, 210, 
    173, 218, 219, 130, 130, 251, 
    224, 125, 223, 188, 157, 217, 
    153, 151, 153,  13, 204,  55, 
    112, 132,  66, 220, 124, 245, 
    248,  54,  50, 205, 124, 201, 
    191,  23,  68,  41, 110, 114, 
     10,  51, 240,  60, 135,  72, 
     20,  56, 136,  68,  67,   8, 
     24,  32, 137,  58,  57, 245, 
     50, 183, 153, 151, 153, 232, 
    211,  44, 149, 250,  71,  63, 
    126,  24,  28, 229,  38, 245, 
     48,  49,  54, 175, 120, 134, 
    153,  97, 158,  96, 186,  76, 
     76,   7, 232,  12, 232, 245, 
    145, 121, 169,  54, 208, 182, 
    153,   6,  19, 227,  97,  11, 
    109,   0, 125, 209,  57, 200, 
     71, 248,  51, 206,  51, 225, 
    233,  48, 192, 155, 158,  11, 
     25,  62,   1, 252, 222, 191, 
    141,  61,  95, 251,  17, 212, 
    231,   4, 224,  60, 162, 192, 
     30,  97,  12, 176,  14, 193, 
    208, 123, 182, 169,  52, 246, 
      2, 191, 237,  13, 243,  48, 
    252,  96, 168, 207, 166,  13, 
    173,  49,  95,  90, 237,  82, 
     90, 240,  76,  22, 103, 121, 
    114, 127, 192, 127,   0,  19, 
    129, 129, 189, 192, 183,  56, 
    193, 212, 223,  13, 160, 251, 
     47,  32,  80, 189,   5,  62, 
    235, 165,  29,  40, 173, 121, 
    235, 118, 240, 174, 214,   6, 
     52,  38, 140, 106, 254,  83, 
    200,  12, 205, 152,  29, 114, 
    198, 237, 231, 247, 249, 112, 
     89, 123, 172, 189, 136, 158, 
    102,  61,  29, 209, 179, 172, 
    103,  35, 186, 192, 186, 160, 
    181, 158, 223,  13, 215,  51, 
     83,  56, 107, 126,  88, 251, 
    151, 153, 120, 140, 135, 137, 
    199, 120, 152, 120, 140, 135, 
    137, 199, 120, 152, 120, 140, 
    135, 137, 199, 120, 152, 120, 
    140, 141,  84,  51, 183, 154, 
     53, 123, 183,  73,  66, 190, 
    149, 198, 247,  38,  89,  86, 
     64, 217, 206,  64,  88, 217, 
     64, 100, 115, 193,  67, 218, 
    108, 145,  91, 255,  38, 229, 
     28, 153,  93, 245, 119, 100, 
    244,   6, 194, 232,  11, 202, 
    252,  60,  67, 245, 207, 169, 
    156, 172, 115, 149,  19, 144, 
     24,  12,  72,  14,   5,  75, 
    210, 250,  36,  28,  73,  82, 
     58,  53,  67, 246, 212,   4, 
     13,   4,  66, 156,  10, 132, 
     60,  29, 116, 184,  14, 201, 
     46, 211,  49, 142, 165,  29, 
    243, 184, 229, 164, 114, 182, 
     83, 119, 172, 141, 238, 165, 
    173, 167,  46,  53,  90, 181, 
    238, 221,  39, 240,  98,  97, 
    157,  12, 133, 107, 167, 121, 
     13, 178, 237,   6, 214,  18, 
    182, 211, 176,  56,  75, 251, 
    104,  67, 100,  68,  64,  57, 
    115, 152, 220, 244,  48, 117, 
     89, 195, 221, 230, 110, 147, 
    239, 162,   7, 238, 178,  68, 
    143,  90, 125, 200, 123,  23, 
    225, 131, 176, 194,   1, 109, 
    132, 202,  20,  40,  55, 218, 
      8,  95, 227, 103, 209, 250, 
    206,  84,  23, 241, 109,  85, 
    239,  12,  50, 179,  76,  17, 
    222, 214, 195, 114, 133, 239, 
    231, 105, 142,  68, 205, 175, 
    102, 243, 220, 235,  91,  43, 
    104,   3, 151, 212, 187, 253, 
     42, 163,  54, 140, 206,  77, 
    244,  18, 225,  55,  20, 213, 
    248, 188, 202,  40, 133,  80, 
      3,  56, 186, 186,  85,  94, 
     26, 170, 127,  67, 101, 120, 
    233,  96, 254, 234, 227, 133, 
    234, 191, 195, 132, 211, 177, 
    139, 222,  72, 254, 154,  87, 
    169, 222,  45, 250,  15, 188, 
    241, 197, 106, 197,  27,  91, 
     92, 243, 231, 171,  83, 249, 
    113, 175, 178,  54, 239,  77, 
     46, 204,  21, 253, 181, 138, 
    119, 101, 245,  94, 121, 113, 
    217,  47, 122,  83, 133, 213, 
    245,  27,  43, 254, 200, 114, 
    121,  97,  46, 239,  87, 170, 
     87,  75,  37,  30, 126, 119, 
     98, 114, 255, 201, 253, 235, 
    254, 217, 114, 177,  64,  63, 
      1, 116,   9, 252, 234,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0, 190, 219,   4, 190, 
     48, 178,  86, 110,  88,  80, 
     68,  80,  92,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  65, 108, 112, 
    104,  97,  84, 101, 115, 116, 
     69, 102, 102, 101,  99, 116, 
     95,  80,  83,  65, 108, 112, 
    104,  97,  84, 101, 115, 116, 
     69, 113,  78, 101,  46, 112, 
    100,  98
};
