#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[67]
// Embedded Data:
//  0x00000043 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000003e - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
add r0.xyzw, r0.xyzw, -cb0[16].xyzw
add r1.xyzw, -cb0[16].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
div_sat o0.xyzw, r0.xyzw, r1.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[67], bundle is:[161] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSBloomExtract.pdb
// Shader Semantic Hash      : 0xd68a02fe4c903825
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 176 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 8;
NumSgprs             = 24;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x9C, dwords=0x27)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[20:21], exec                          // 000000000000: BE94047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_mov_b32     m0, s2                                  // 00000000000C: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000014: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000018: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000024: F0800F00 00610002
  s_buffer_load_dwordx4  s[0:3], s[16:19], 0x40         // 00000000002C: C2801140
  s_waitcnt     lgkmcnt(0)                              // 000000000030: BF8C007F
  v_subrev_f32  v4, s0, 1.0                             // 000000000034: D20A0004 0001E400
  v_subrev_f32  v5, s1, 1.0                             // 00000000003C: D20A0005 0001E401
  v_subrev_f32  v6, s2, 1.0                             // 000000000044: D20A0006 0001E402
  v_subrev_f32  v7, s3, 1.0                             // 00000000004C: D20A0007 0001E403
  s_waitcnt     vmcnt(0)                                // 000000000054: BF8C0F70
  v_subrev_f32  v0, s0, v0                              // 000000000058: 0A000000
  v_subrev_f32  v1, s1, v1                              // 00000000005C: 0A020201
  v_subrev_f32  v2, s2, v2                              // 000000000060: 0A040402
  v_subrev_f32  v3, s3, v3                              // 000000000064: 0A060603
  v_rcp_f32     v4, v4                                  // 000000000068: 7E085504
  v_rcp_f32     v5, v5                                  // 00000000006C: 7E0A5505
  v_rcp_f32     v6, v6                                  // 000000000070: 7E0C5506
  v_rcp_f32     v7, v7                                  // 000000000074: 7E0E5507
  v_mul_f32     v0, v0, v4 clamp                        // 000000000078: D2100800 00020900
  v_mul_f32     v1, v1, v5 clamp                        // 000000000080: D2100801 00020B01
  v_mul_f32     v2, v2, v6 clamp                        // 000000000088: D2100802 00020D02
  v_mul_f32     v3, v3, v7 clamp                        // 000000000090: D2100803 00020F03
  s_mov_b64     exec, s[20:21]                          // 000000000098: BEFE0414
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 00000000009C: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 0000000000A0: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000A4: F8001C0F 00000100
  s_endpgm                                              // 0000000000AC: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   8
//  NumSRegs:                   24
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   83
//  CycleSimNWaves:             83
//  Code Size:                  176
//Assembler Counts:
//  num_32bit_ops                     : 24
//  num_64bit_ops                     : 10
//  num_alu                           : 22
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 4
//  num_inst_vop2                     : 6
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 8
// m_uNumSRegs                       : 24
// m_uSCCodeSize                     : 176
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 83
// m_uCycleSimNWaves                 : 83

// Assembler Counts:
// num_32bit_ops                     : 24
// num_64bit_ops                     : 10
// num_alu                           : 22
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 4
// num_inst_vop2                     : 6
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSBloomExtract[] =
{
     68,  88,  66,  67, 251,  46, 
    112, 218,  42, 229, 118, 227, 
     29, 186,  84, 154, 204, 133, 
    104,  59,   1,   0,   0,   0, 
    207,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0,  96,   4,   0,   0, 
    112,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 152,   3, 
      0,   0,  80,   0,   0,   0, 
    230,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     67,   0,   0,   0,  80,   0, 
      0,   0,  62,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,  32,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   2,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   9, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70, 142,  32, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
     16,   0,   0,   0,   0,   0, 
      0,  12, 242,   0,  16,   0, 
      1,   0,   0,   0,  70, 142, 
     32, 128,  65,   0,   0,   0, 
      0,   0,   0,   0,  16,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0, 128,  63, 
      0,   0, 128,  63,  14,  32, 
      0,   7, 242,  32,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   1,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 163,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 236,  15,   0, 120,   1, 
    237,  87,  77, 107,  19,  81, 
     20, 189, 239, 205, 116, 146, 
     76, 147,  76,  11,  42,  21, 
     92, 168,  84,  20,  23, 174, 
     92, 136,  11, 169, 181, 162, 
    208, 130, 129,  36,  16, 202, 
    208,  54,  31,   3,  13, 164, 
     78, 200,  12, 210, 213,  24, 
    183, 226, 162,  11,  23, 234, 
    218,  31, 208,  95, 144, 168, 
    171, 236, 132,  32, 254,   0, 
    233, 178,  11, 233, 202, 133, 
     84, 239, 153, 190, 169,  99, 
    180, 174,   6,  20, 153,   3, 
    231, 158,  57, 121, 243, 238, 
    156, 204,  75, 224, 189, 125, 
    139,  66,  88,   7, 123, 167, 
    161, 183,  14, 222, 127, 250, 
    194,  58, 197,  20,  74, 129, 
     23,   5,  84, 214,  34,  42, 
    209,  21,  20, 220,  32, 137, 
    178,  44, 115, 204,  93, 230, 
      2,  19,  99,  17,  95, 189, 
    188, 176,  72, 116, 149,  73, 
     52, 203, 156, 102, 150,  21, 
     49, 199, 100, 158,  81, 138, 
    118,  64, 164, 128, 142, 194, 
    136,  52,   2, 188, 193, 140, 
      0, 207,  81,  66,  64, 227, 
     61, 200,  65, 249,  61,  46, 
     50, 145, 255,  36,  32,  91, 
    212,  11, 138, 156,   0, 178, 
    255, 109,  28, 229, 250,  81, 
    193, 104, 157,   0, 172,  71, 
     28,  88,  58, 220,   3, 220, 
     87, 235, 168, 161,  48, 108, 
    229, 163, 181, 124, 195,  60, 
      9, 223,  24,  51, 184, 136, 
     33, 242, 232, 111,   8, 238, 
    250, 167, 151, 250, 159,   3, 
    191,  69,   0, 239,   2, 191, 
     69, 188,  27, 245,  55,  11, 
     17, 141,  95,  70, 161, 254, 
     16, 220, 153,  35, 252, 237, 
     24,  71,  94,  76, 120,  13, 
     30,  13, 227,  30, 139, 167, 
    209, 154, 204, 200,  53, 235, 
    156,  26, 215, 200, 102, 111, 
    199, 252,  42, 251, 213, 152, 
    223,  96, 191,  17, 243,  13, 
    246, 141,  99, 175, 250,  91, 
    225, 243, 164, 134, 181, 230, 
     15, 131, 127, 153, 105, 198, 
    100, 152, 102,  76, 134, 105, 
    198, 100, 152, 102,  76, 134, 
    105, 198, 100, 152, 102,  76, 
    134, 105, 198, 196,  72, 129, 
    254, 124,  16, 152, 135,   3, 
    222, 171, 189, 149, 218, 215, 
      1, 111, 188,  71,  36, 242, 
     35,  65, 185, 145,  16, 133, 
    209,  99, 122,  54,  36, 171, 
    255,  89,  82, 157,  22, 102, 
    251, 239, 224, 117,  50, 199, 
    180,  39, 248, 108, 103, 142, 
      5, 171, 193,  42,  89,  51, 
    172,  26, 107, 215, 226,  57, 
    124, 212,  17,  82, 154,  82, 
    215,  77, 205,  48,  76, 189, 
    154,  13, 166, 170, 102,  96, 
     84, 243,  65, 166,  90,  12, 
     40,  59,  51, 166, 156,  36, 
    193,  42, 166,  37,  73,  86, 
     89, 144, 164, 177, 106, 150, 
    164,  83,  58, 103, 154, 220, 
    155, 210, 147, 225,  89,  40, 
     54, 197, 147, 200, 134,  55, 
     28,  35, 116, 186, 248, 233, 
     24,  17,  78, 227, 207, 242, 
     80, 133,  15, 234, 220, 178, 
    171, 116, 158, 153,  99,  10, 
    126,  56, 112, 158, 169, 171, 
    147, 226, 165,  27,  59,  43, 
    135, 242, 233,  71,  92,   3, 
    121, 181,  41, 223,  87, 115, 
    113, 111, 188,  55, 209, 107, 
    148,  95, 112,  93, 205, 155, 
     87, 138, 253,  61, 246, 244, 
    197, 232, 180, 172, 250,  85, 
    212, 248, 138,  82, 124,  23, 
    156, 127,  39, 115, 116, 212, 
    120, 141, 137, 164,  75,  55, 
    237, 219, 149, 123, 182, 231, 
    175, 183, 156,  71, 246, 114, 
    219, 247, 236, 165, 118, 207, 
    105, 250, 181, 202, 178, 237, 
    245, 154, 118, 121, 179, 222, 
    114, 122, 158, 125, 199, 221, 
    234, 182,  59,  78, 203, 174, 
     53, 220, 237,   7,  15, 157, 
    146, 235, 249, 165, 158, 219, 
    116,  60, 111, 189,  84,  94, 
    236, 184, 238, 214, 221, 109, 
    191,  87, 111, 250, 215, 186, 
    173,   6, 125,   7,  62,  58, 
    234,  70,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
     37,  56, 144,  76, 254,   2, 
    138, 214,  88,  80,  68,  80, 
     87,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  80, 111, 115, 116,  80, 
    114, 111,  99, 101, 115, 115, 
     95,  80,  83,  66, 108, 111, 
    111, 109,  69, 120, 116, 114, 
     97,  99, 116,  46, 112, 100, 
     98
};
