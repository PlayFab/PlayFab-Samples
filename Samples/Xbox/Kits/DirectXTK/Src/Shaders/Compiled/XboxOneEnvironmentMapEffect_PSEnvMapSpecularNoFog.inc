#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[114]
// Embedded Data:
//  0x00000072 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000006d - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texturecube)(float,float,float,float) r0.xyzw, v3.xyzx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, v0.xyzw
mad r0.xyz, r0.xyzx, r1.wwww, -r1.xyzx
mul r0.w, r0.w, r1.w
mad r0.xyz, v1.xyzx, r0.xyzx, r1.xyzx
mov o0.w, r1.w
mad o0.xyz, cb0[0].xyzx, r0.wwww, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[114], bundle is:[202] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneEnvironmentMapEffect_PSEnvMapSpecularNoFog.pdb
// Shader Semantic Hash      : 0xba74b26c0674405f
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  7, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}
;   [3] generic,  usageIdx 3, channelMask  7, param3, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 308 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 5;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
;  extUserElements 1[4] = IMM_CONST_BUFFER 0, offset 0x18:27 dwords
NumVgprs             = 14;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000004
SPIC:NUM_INTERP             = 4
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

dx9TexCubeMask           = 0x00000002

; export table for mrt0 [patch@(bytes=0x120, dwords=0x48)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v5, off, off done vm          // 000000000008: F8001803 00000502
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000004: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000004: 5C020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000004: 5A020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000004: 60020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000004: 62020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v5 done vm            // 000000000008: F800180F 05040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 00000000000C: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 000000000010: C0CA0110
  v_interp_p1_f32  v2, v0, attr3.x                      // 000000000014: C8080C00
  v_interp_p1_f32  v3, v0, attr3.y                      // 000000000018: C80C0D00
  v_interp_p1_f32  v4, v0, attr3.z                      // 00000000001C: C8100E00
  v_interp_p2_f32  v2, v1, attr3.x                      // 000000000020: C8090C01
  v_interp_p2_f32  v3, v1, attr3.y                      // 000000000024: C80D0D01
  v_interp_p2_f32  v4, v1, attr3.z                      // 000000000028: C8110E01
  v_cubema_f32  v5, v2, v3, v4                          // 00000000002C: D28E0005 04120702
  v_interp_p1_f32  v6, v0, attr2.x                      // 000000000034: C8180800
  v_interp_p1_f32  v7, v0, attr2.y                      // 000000000038: C81C0900
  v_cubetc_f32  v8, v2, v3, v4                          // 00000000003C: D28C0008 04120702
  v_cubesc_f32  v9, v2, v3, v4                          // 000000000044: D28A0009 04120702
  v_rcp_f32     v5, abs(v5)                             // 00000000004C: D3540105 00000105
  v_interp_p2_f32  v6, v1, attr2.x                      // 000000000054: C8190801
  v_interp_p2_f32  v7, v1, attr2.y                      // 000000000058: C81D0901
  v_cubeid_f32  v4, v2, v3, v4                          // 00000000005C: D2880004 04120702
  v_madak_f32   v3, v8, v5, 0x3fc00000                  // 000000000064: 42060B08 3FC00000
  v_madak_f32   v2, v9, v5, 0x3fc00000                  // 00000000006C: 42040B09 3FC00000
  s_waitcnt     lgkmcnt(0)                              // 000000000074: BF8C007F
  image_sample  v[5:8], v[6:7], s[4:11], s[20:23] dmask:0xf // 000000000078: F0800F00 00A10506
  image_sample  v[9:12], v[2:3], s[12:19], s[24:27] dmask:0xf // 000000000080: F0800F00 00C30902
  s_load_dwordx4  s[0:3], s[0:1], 0x18                  // 000000000088: C0800118
  s_waitcnt     lgkmcnt(0)                              // 00000000008C: BF8C007F
  s_buffer_load_dwordx4  s[0:3], s[0:3], 0x00           // 000000000090: C2800100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000094: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000098: C80C0100
  v_interp_p1_f32  v4, v0, attr0.z                      // 00000000009C: C8100200
  v_interp_p1_f32  v13, v0, attr0.w                     // 0000000000A0: C8340300
  v_interp_p2_f32  v2, v1, attr0.x                      // 0000000000A4: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 0000000000A8: C80D0101
  v_interp_p2_f32  v4, v1, attr0.z                      // 0000000000AC: C8110201
  v_interp_p2_f32  v13, v1, attr0.w                     // 0000000000B0: C8350301
  s_waitcnt     vmcnt(1)                                // 0000000000B4: BF8C0F71
  v_mul_legacy_f32  v2, v5, v2                          // 0000000000B8: 0E040505
  v_mul_legacy_f32  v3, v6, v3                          // 0000000000BC: 0E060706
  v_mul_legacy_f32  v4, v7, v4                          // 0000000000C0: 0E080907
  v_mul_legacy_f32  v5, v8, v13                         // 0000000000C4: 0E0A1B08
  v_interp_p1_f32  v6, v0, attr1.x                      // 0000000000C8: C8180400
  v_interp_p1_f32  v7, v0, attr1.y                      // 0000000000CC: C81C0500
  v_interp_p1_f32  v0, v0, attr1.z                      // 0000000000D0: C8000600
  s_waitcnt     vmcnt(0)                                // 0000000000D4: BF8C0F70
  v_mad_legacy_f32  v8, v9, v5, -v2                     // 0000000000D8: D2800008 840A0B09
  v_mad_legacy_f32  v9, v10, v5, -v3                    // 0000000000E0: D2800009 840E0B0A
  v_mad_legacy_f32  v10, v11, v5, -v4                   // 0000000000E8: D280000A 84120B0B
  v_interp_p2_f32  v6, v1, attr1.x                      // 0000000000F0: C8190401
  v_interp_p2_f32  v7, v1, attr1.y                      // 0000000000F4: C81D0501
  v_interp_p2_f32  v0, v1, attr1.z                      // 0000000000F8: C8010601
  v_mul_legacy_f32  v1, v12, v5                         // 0000000000FC: 0E020B0C
  v_mac_f32     v2, v6, v8                              // 000000000100: 3E041106
  v_mac_f32     v3, v7, v9                              // 000000000104: 3E061307
  v_mac_f32     v4, v0, v10                             // 000000000108: 3E081500
  s_waitcnt     lgkmcnt(0)                              // 00000000010C: BF8C007F
  v_mac_f32     v2, s0, v1                              // 000000000110: 3E040200
  v_mac_f32     v3, s1, v1                              // 000000000114: 3E060201
  v_mac_f32     v4, s2, v1                              // 000000000118: 3E080202
  s_mov_b64     exec, s[28:29]                          // 00000000011C: BEFE041C
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000120: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000124: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000128: F8001C0F 00000100
  s_endpgm                                              // 000000000130: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   14
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   83
//  CycleSimNWaves:             83
//  Code Size:                  308
//Assembler Counts:
//  num_32bit_ops                     : 53
//  num_64bit_ops                     : 11
//  num_alu                           : 47
//  num_fc                            : 14
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 6
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 15
//  num_inst_vop3                     : 10
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 24
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 14
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 308
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 83
// m_uCycleSimNWaves                 : 83

// Assembler Counts:
// num_32bit_ops                     : 53
// num_64bit_ops                     : 11
// num_alu                           : 47
// num_fc                            : 14
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 6
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 15
// num_inst_vop3                     : 10
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 24
// num_inst_smem                     : 4
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE EnvironmentMapEffect_PSEnvMapSpecularNoFog[] =
{
     68,  88,  66,  67, 250,  89, 
    178, 164, 118,  88, 161, 221, 
     55,  72, 203,  80, 106, 130, 
    141,  55,   1,   0,   0,   0, 
    103,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0, 232,   5,   0,   0, 
    248,   5,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   7, 
      0,   0, 110,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 110,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 248,   4,   0,   0, 
     80,   0,   0,   0,  62,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 114,   0, 
      0,   0,  80,   0,   0,   0, 
    109,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  24,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  88,  48, 
      0,   4,   0, 112,  16,   0, 
      1,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      2,   0,   0,   0,  69,   0, 
      0, 139, 130,   1,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  70, 126,  16,   0, 
      1,   0,   0,   0,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  16,  16,   0, 
      2,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  10, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0, 246,  15,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   7, 130,   0,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,   9, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      1,   0,   0,   0,  50,   0, 
      0,  10, 114,  32,  16,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 204,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 168,  16,   0, 120,   1, 
    237,  87, 207, 107,  19,  65, 
     20, 126, 179, 217, 221, 236, 
    102, 147,  77,  90,  21,  83, 
     77,  65,  80, 193, 147,  30, 
    218,  34, 120, 136, 181, 182, 
     42,  20, 127,  64, 114,  40, 
    101, 233, 143,  52,  91,  27, 
    108, 147, 152, 196, 226,  65, 
    234,  10,  61, 136,  20, 241, 
     88, 208, 139, 224, 193, 179, 
    120,  16,  15,  77, 212, 203, 
     32,  21, 164, 254,   3,  61, 
    248,   7, 244, 216, 131, 168, 
    239, 205, 238, 180, 177, 218, 
     91,  64, 145, 253, 224, 155, 
    183, 223, 219, 217, 153, 111, 
    242, 114, 152, 247,  50,   5, 
      2, 247, 188, 252,  73, 138, 
    227,  95, 211,  79,  95,  51, 
      0,  13, 159,  49, 136,  72, 
     88,  77, 208,   8,  48, 156, 
    164,  17, 224,  20,  13,  52, 
     65,   1, 176,  49,  28,  67, 
    246, 163,  30, 196,  72, 239, 
     36,  63, 173,  23, 134, 250, 
    250, 110,  13, 225,  35,  28, 
     65, 210, 118, 185, 128,   3, 
     72,  11, 121,   6,  73, 107, 
    208, 114,   4,  92, 114,   7, 
     58,  13,   8, 149, 134,  61, 
     32,  43,  49,  36,  33, 141, 
    148, 115,  34,  72, 185, 150, 
    128,  75, 195, 159,  65, 126, 
    105, 239, 253,  64, 222, 164, 
     31,  90,  83, 206, 165, 243, 
    254, 109, 248, 103, 244, 221, 
    201,  51, 203,  58,  17, 168, 
     30, 237,  32, 239,  50, 181, 
     30,  28,  68, 214, 119,  51, 
    208,  20, 232, 108,  45, 228, 
    126, 248, 129, 200, 208,  67, 
     27, 164, 166,  26, 232, 162, 
     50,  24, 217,  97,   0,   3, 
    163, 114,  92,  20,  94, 143, 
    156, 245,  11, 245, 159,  67, 
    254,  15,  41,  82, 117, 232, 
     63, 239, 255,  34,  62, 228, 
    251,  43,  52, 128, 215,  36, 
     62,  73, 195,  54,  41, 169, 
     25, 106, 191, 178, 190, 142, 
    144, 166,  34, 183, 107,  44, 
    158,  18, 133,   9, 213,  82, 
     38, 146,  25, 252,  30, 139, 
    139, 218,  65, 237, 180, 233, 
    113, 212, 227, 109, 122,  10, 
    245,  84, 155,  46, 160,  46, 
     72,  45, 215,  79, 138, 253, 
     84, 141, 106, 141, 201, 165, 
    127, 153, 161, 199, 206,  48, 
    244, 216,  25, 134,  30,  59, 
    195, 208,  99, 103,  24, 122, 
    236,  12,  67, 143, 157,  97, 
    232, 177,  51, 164, 251, 225, 
    146, 250, 108, 109,  41, 246, 
    125,  77, 137, 124,  91,   3, 
    166, 188,  75, 177, 143,  45, 
    136,  27,  28,  18, 113,  14, 
    118, 138, 179, 184, 201,  89, 
     34, 193, 153, 221, 197,  53, 
    120, 188, 161,  68, 187,  85, 
     48, 210,  28, 204,  12,  55, 
     96,  69, 104,  19,  30, 137, 
    168, 177, 252,  23,  13, 239, 
    128, 204, 232, 225, 204, 236, 
    229,  42,  60,  20, 121, 195, 
    210, 177, 127, 107, 157,  55, 
     45,  85, 196, 251, 176, 210, 
    132, 164, 183, 165, 107, 207, 
    241,  98, 235, 109,  41, 230, 
      7,  72,  51, 175,  37, 242, 
    204, 123, 143, 151, 126,  14, 
     12, 247,  87,  82,  28,  34, 
    253, 156,   1, 122,  96, 232, 
     65, 233, 226,  44,  50, 192, 
    111,  39,  87, 154, 154, 166, 
    218, 122,  84, 183, 163, 166, 
     97,  27,  71,  99,  54, 168, 
    232,  73, 203, 112, 108,  30, 
    120,  21, 223,  27, 224, 109, 
    152,  86, 108, 217, 196,  24, 
    179, 236, 229,  24,  70, 203, 
    234,  94, 102,  42, 122, 211, 
    122,  57, 211,  25, 143,  91, 
    138, 173, 119, 169, 217, 232, 
      1,  61,  11, 135, 140, 172, 
    216,  95,  81, 179,  76, 209, 
    179, 138,  98, 100,  51,  42, 
    254,  46, 123, 238, 199,   0, 
     15, 154,  61,  20, 253, 203, 
    245, 175,  48, 196, 132,  93, 
    144, 196,  28, 182,  48,  59, 
     16,  51,  84,  38, 238, 244, 
     18, 140, 146, 152,  59, 136, 
     65,  66,  44, 143, 185, 246, 
    118, 199,  11, 154,   0,  39, 
    136,  39, 144,  38, 146, 137, 
    238,  77, 246, 176, 126, 199, 
     59,  57, 216, 208, 231,  95, 
     53, 222, 210,  51, 225,  77, 
    240, 205, 106,  16, 169,  71, 
    139,  35, 119, 241, 130, 134, 
    223, 176,  25, 204, 255,  28, 
     68, 242,  77, 253, 135,  45, 
     59, 191, 160, 239, 147,   7, 
    218,  14, 230, 209, 153, 169, 
     55, 223, 235,  35,  29, 204, 
    155,  67, 146, 211, 225, 115, 
    206, 133, 252, 101, 167, 222, 
    152,  44, 186, 139, 206, 104, 
    169,  81, 119, 134,  75,  53, 
    119, 166,  49, 150,  31, 117, 
    234, 181,  25,  39,  55,  55, 
     93, 116, 107, 117, 231,  98, 
    101, 161,  90, 154, 119, 139, 
    206,  88, 161, 114, 247, 122, 
    217,  29,  41,  47, 150, 106, 
    149, 242, 130,  91, 110,  92, 
    157, 174, 142, 204, 206, 226, 
     55, 147,  55, 114, 152,  70, 
    153, 171, 186,  51, 119, 230, 
    167, 107, 215,  42, 151,  42, 
     55,  79,  87, 139,   5, 248, 
      9, 218, 179,  17,  32,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  95,  64, 116,   6, 
    108, 178, 116, 186,  88,  80, 
     68,  80, 103,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  69, 110, 118, 
    105, 114, 111, 110, 109, 101, 
    110, 116,  77,  97, 112,  69, 
    102, 102, 101,  99, 116,  95, 
     80,  83,  69, 110, 118,  77, 
     97, 112,  83, 112, 101,  99, 
    117, 108,  97, 114,  78, 111, 
     70, 111, 103,  46, 112, 100, 
     98
};
