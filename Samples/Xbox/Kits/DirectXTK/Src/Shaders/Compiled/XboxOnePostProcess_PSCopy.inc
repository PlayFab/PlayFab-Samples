#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[40]
// Embedded Data:
//  0x00000028 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000023 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mov o0.xyzw, r0.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[40], bundle is:[138] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSCopy.pdb
// Shader Semantic Hash      : 0x1d86ac57509b6b64
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 76 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 4;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x38, dwords=0xE)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000014: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 00000000001C: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000020: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610002
  s_mov_b64     exec, s[16:17]                          // 000000000030: BEFE0410
  s_waitcnt     vmcnt(0)                                // 000000000034: BF8C0F70
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000038: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 00000000003C: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000040: F8001C0F 00000100
  s_endpgm                                              // 000000000048: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   4
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   79
//  CycleSimNWaves:             79
//  Code Size:                  76
//Assembler Counts:
//  num_32bit_ops                     : 15
//  num_64bit_ops                     : 2
//  num_alu                           : 6
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 2
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 4
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 76
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 79
// m_uCycleSimNWaves                 : 79

// Assembler Counts:
// num_32bit_ops                     : 15
// num_64bit_ops                     : 2
// num_alu                           : 6
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 2
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSCopy[] =
{
     68,  88,  66,  67,  61,  34, 
    171, 112, 214,  21, 238, 164, 
    233, 106,  43, 162,  99, 244, 
    173,  93,   1,   0,   0,   0, 
    255,   3,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 152,   3,   0,   0, 
    168,   3,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 208,   2, 
      0,   0,  80,   0,   0,   0, 
    180,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     40,   0,   0,   0,  80,   0, 
      0,   0,  35,   0,   0,   0, 
    106,   8,   0,   1,  90,   0, 
      0,   3,   0,  96,  16,   0, 
      0,   0,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      0,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   1,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      1,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  16,  16,   0,   1,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 140,   0, 
      0,   0,  23,   0,   1,   0, 
     41,  96,  15,   0, 120,   1, 
    237,  87, 191,  79, 219,  64, 
     20, 126, 103,  27,  26, 202, 
     15,  83, 137, 129,  74, 173, 
    196, 200, 196, 140, 152,  64, 
     32, 117, 128,  22,  75,  32, 
    129, 208, 137, 132, 196,  70, 
     68, 109, 177,  21,  91,  85, 
    187,   4, 186, 160,  14,  12, 
    140, 149, 186, 116, 232, 208, 
    161,   3, 127,  65,  18, 117, 
    242, 216,  63, 162,  67,  71, 
     70,   6, 148, 246, 125, 206, 
     29,  28,   1,  54,  75,  32, 
    213, 159, 244, 189, 207,  95, 
    238, 249, 249, 249,  46, 150, 
    238,  42,  46, 101, 120, 249, 
    125, 162,  12, 157, 235,  38, 
    229,  99, 214,   1, 166,  80, 
     10, 124,  30,  69,  36, 154, 
     26,  67,  36, 154,  70,  64, 
    130,  69, 228, 176,  76,  48, 
     87, 152, 243,  76, 140, 105, 
    238, 238, 190,  90,  32, 138, 
    152,  68,  40, 129, 220,  85, 
     69,  60, 154, 111, 167,  65, 
    230,  16,  19, 229,   0, 173, 
    128, 141, 192, 192, 125, 253, 
    192, 189,  26,  24, 215,  30, 
    106, 214, 160,   0, 225, 118, 
     60,  97, 222,  86,  91,   3, 
    189, 233,  90,  80, 244,   9, 
    224, 125, 239,  27, 189, 190, 
    204, 120, 181,  78,   0, 214, 
    195,   4, 150,  78, 231, 253, 
     86, 121, 122, 206, 206, 149, 
    199,  92, 224, 221,  58, 204, 
    187, 240, 151,  49, 130,  11, 
      3, 218, 163, 254, 160, 224, 
     85,  43, 241, 197, 127,  10, 
    253, 127, 194,  92,  96, 126, 
    199, 153, 234,  51, 203, 160, 
    199, 123, 159, 210,  97,  27, 
     60, 153, 164, 115,  56, 237, 
     69, 159, 183, 225,  81, 208, 
    244, 248,  56, 108, 218, 182, 
     30,  89, 219, 238,  51,  53, 
    110, 147, 100,  47,  13, 191, 
    197, 126, 203, 240,  21, 246, 
     21, 195,  87, 217,  87,  47, 
    189, 170, 239, 102, 207, 179, 
    108, 172,  53, 255, 216, 124, 
    200,  44, 122, 204, 135,  69, 
    143, 249, 176, 232,  49,  31, 
     22,  61, 230, 195, 162, 199, 
    124,  88, 244, 152,  15, 139, 
     30, 115,  35,  53, 157, 147, 
     86, 243, 113, 183,  69, 226, 
    103, 167,  36, 142,  58, 150, 
    125, 209, 226, 205, 119,  74, 
     98,  36,  21,  52, 148,  10, 
     49, 154,  30, 208, 113, 155, 
    220, 195,  51, 139, 118, 104, 
    220, 233, 182,  34, 151, 125, 
    255, 190, 145,  62, 182, 159, 
     66, 245, 129, 192,  68,  41, 
     75, 184,  68, 230,  28, 113, 
    109, 139, 239, 245,  54, 179, 
     52, 171, 116, 146, 137, 179, 
    146, 147, 157, 160, 136, 252, 
    215,  95, 188, 141,  31,  71, 
    207, 113,  13, 124,  82, 121, 
    123,  74, 167, 152, 215, 207, 
     20, 223,  16, 110, 224,  84, 
    229, 127,  85, 138, 189,  53, 
    246, 211,  99, 250, 164, 170, 
    126, 255, 165,  52,  85, 138, 
     94, 135, 153, 253, 125, 252, 
     81, 227,  30,  19, 157,  46, 
    205, 201, 133, 245,  23,  50, 
     78, 202, 126, 240,  78,  46, 
    215, 147,  88,  46, 213,  27, 
     65,  45, 217,  92,  95, 150, 
    113, 163,  38, 215, 246, 118, 
    252, 160,  17, 203, 197, 240, 
    109,  84, 127,  19, 248, 114, 
    179,  26, 190,  95, 221,  15, 
    188,  48,  78, 188,  70,  88, 
     11, 226, 184, 236, 173,  45, 
    134, 209, 135, 153, 200, 175, 
    210,  63, 107, 103, 212, 128, 
      0,   0,  88,  72,  83,  72, 
      8,   0,   0,   0, 100, 107, 
    155,  80,  87, 172, 134,  29, 
     88,  80,  68,  80,  79,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  80, 
    111, 115, 116,  80, 114, 111, 
     99, 101, 115, 115,  95,  80, 
     83,  67, 111, 112, 121,  46, 
    112, 100,  98
};
