#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyz         5     NONE   float       
// TEXCOORD                 4   xyzw        6     NONE   float       
// TEXCOORD                 5   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[191]
// Embedded Data:
//  0x000000bf - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x000000ba - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 3
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v3.xyzx
dp3_sat r0.w, cb1[9].xyzx, r0.xyzx
mul r1.xyz, r0.wwww, cb1[1].xyzx
mul r1.xyz, r1.xyzx, v1.xyzx
mad r1.xyz, cb0[0].xyzx, cb1[0].xyzx, r1.xyzx
dp3_sat r0.w, cb1[10].xyzx, r0.xyzx
mul r2.xyz, r0.wwww, cb1[2].xyzx
mad r1.xyz, r2.xyzx, v1.xyzx, r1.xyzx
dp3_sat r0.w, cb1[11].xyzx, r0.xyzx
dp3_sat r0.x, cb1[12].xyzx, r0.xyzx
mul r0.xyz, r0.xxxx, cb1[4].xyzx
mul r2.xyz, r0.wwww, cb1[3].xyzx
mad r1.xyz, r2.xyzx, v1.xyzx, r1.xyzx
mad_sat r0.xyz, r0.xyzx, v1.xyzx, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul o0.xyz, r0.xyzx, r1.xyzx
mul o0.w, r1.w, v1.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[191], bundle is:[222] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDGSLLambert_mainTx.pdb
// Shader Semantic Hash      : 0xd0a029b46b1c694c
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask 15, param0, paramSlot1, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 2, channelMask  3, param1, paramSlot2, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 3, channelMask  7, param2, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 428 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 4;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
;  extUserElements 1[3] = IMM_CONST_BUFFER 1, offset 0x10:19 dwords
NumVgprs             = 20;
NumSgprs             = 44;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000003

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000003
SPIC:NUM_INTERP             = 3
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x198, dwords=0x66)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v0, off, off done vm          // 000000000008: F8001803 00000001
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000004: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v3, v0                      // 000000000004: 5C000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v3, v0                      // 000000000004: 5A000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v3, v0                          // 000000000004: 60000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v3, v0                          // 000000000004: 62000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v3, v0 done vm            // 000000000008: F800180F 00030201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[40:41], exec                          // 000000000000: BEA8047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000014: C8080400
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000018: C80C0500
  v_interp_p2_f32  v2, v1, attr1.x                      // 00000000001C: C8090401
  v_interp_p2_f32  v3, v1, attr1.y                      // 000000000020: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610202
  s_load_dwordx8  s[0:7], s[0:1], 0x0c                  // 000000000030: C0C0010C
  v_interp_p1_f32  v6, v0, attr2.z                      // 000000000034: C8180A00
  v_interp_p1_f32  v7, v0, attr2.y                      // 000000000038: C81C0900
  v_interp_p2_f32  v6, v1, attr2.z                      // 00000000003C: C8190A01
  s_waitcnt     lgkmcnt(0)                              // 000000000040: BF8C007F
  s_buffer_load_dwordx4  s[8:11], s[4:7], 0x24          // 000000000044: C2840524
  v_interp_p1_f32  v8, v0, attr2.x                      // 000000000048: C8200800
  v_interp_p2_f32  v7, v1, attr2.y                      // 00000000004C: C81D0901
  v_mul_legacy_f32  v9, v6, v6                          // 000000000050: 0E120D06
  v_interp_p2_f32  v8, v1, attr2.x                      // 000000000054: C8210801
  v_mac_f32     v9, v7, v7                              // 000000000058: 3E120F07
  s_buffer_load_dwordx4  s[12:15], s[4:7], 0x28         // 00000000005C: C2860528
  v_mac_f32     v9, v8, v8                              // 000000000060: 3E121108
  s_buffer_load_dwordx4  s[16:19], s[4:7], 0x04         // 000000000064: C2880504
  s_buffer_load_dwordx4  s[20:23], s[4:7], 0x2c         // 000000000068: C28A052C
  v_rsq_f32     v9, v9                                  // 00000000006C: 7E125D09
  s_buffer_load_dwordx4  s[24:27], s[4:7], 0x00         // 000000000070: C28C0500
  s_buffer_load_dwordx4  s[28:31], s[4:7], 0x30         // 000000000074: C28E0530
  v_mul_legacy_f32  v6, v6, v9                          // 000000000078: 0E0C1306
  s_buffer_load_dwordx4  s[0:3], s[0:3], 0x00           // 00000000007C: C2800100
  s_buffer_load_dwordx4  s[32:35], s[4:7], 0x08         // 000000000080: C2900508
  v_mul_legacy_f32  v7, v7, v9                          // 000000000084: 0E0E1307
  s_waitcnt     lgkmcnt(0)                              // 000000000088: BF8C007F
  v_mul_legacy_f32  v10, s10, v6                        // 00000000008C: 0E140C0A
  s_buffer_load_dwordx4  s[36:39], s[4:7], 0x0c         // 000000000090: C292050C
  v_mul_legacy_f32  v8, v8, v9                          // 000000000094: 0E101308
  v_mac_f32     v10, s9, v7                             // 000000000098: 3E140E09
  s_buffer_load_dwordx4  s[4:7], s[4:7], 0x10           // 00000000009C: C2820510
  v_mad_legacy_f32  v10, s8, v8, v10 clamp              // 0000000000A0: D280080A 042A1008
  v_interp_p1_f32  v9, v0, attr0.x                      // 0000000000A8: C8240000
  v_interp_p1_f32  v11, v0, attr0.y                     // 0000000000AC: C82C0100
  v_interp_p1_f32  v12, v0, attr0.z                     // 0000000000B0: C8300200
  v_mul_legacy_f32  v13, s14, v6                        // 0000000000B4: 0E1A0C0E
  v_mul_legacy_f32  v14, s16, v10                       // 0000000000B8: 0E1C1410
  v_mul_legacy_f32  v15, s17, v10                       // 0000000000BC: 0E1E1411
  v_mul_legacy_f32  v10, s18, v10                       // 0000000000C0: 0E141412
  v_interp_p2_f32  v9, v1, attr0.x                      // 0000000000C4: C8250001
  v_interp_p2_f32  v11, v1, attr0.y                     // 0000000000C8: C82D0101
  v_interp_p2_f32  v12, v1, attr0.z                     // 0000000000CC: C8310201
  v_mac_f32     v13, s13, v7                            // 0000000000D0: 3E1A0E0D
  v_mul_legacy_f32  v16, s22, v6                        // 0000000000D4: 0E200C16
  v_mul_legacy_f32  v14, v14, v9                        // 0000000000D8: 0E1C130E
  v_mul_legacy_f32  v15, v15, v11                       // 0000000000DC: 0E1E170F
  v_mul_legacy_f32  v10, v10, v12                       // 0000000000E0: 0E14190A
  v_mov_b32     v17, s24                                // 0000000000E4: 7E220218
  v_mov_b32     v18, s25                                // 0000000000E8: 7E240219
  v_mov_b32     v19, s26                                // 0000000000EC: 7E26021A
  v_mad_legacy_f32  v13, s12, v8, v13 clamp             // 0000000000F0: D280080D 0436100C
  v_mac_f32     v16, s21, v7                            // 0000000000F8: 3E200E15
  v_mul_legacy_f32  v6, s30, v6                         // 0000000000FC: 0E0C0C1E
  v_mac_f32     v14, s0, v17                            // 000000000100: 3E1C2200
  v_mac_f32     v15, s1, v18                            // 000000000104: 3E1E2401
  v_mac_f32     v10, s2, v19                            // 000000000108: 3E142602
  v_mul_legacy_f32  v17, s32, v13                       // 00000000010C: 0E221A20
  v_mul_legacy_f32  v18, s33, v13                       // 000000000110: 0E241A21
  v_mul_legacy_f32  v13, s34, v13                       // 000000000114: 0E1A1A22
  v_mad_legacy_f32  v16, s20, v8, v16 clamp             // 000000000118: D2800810 04421014
  v_mac_f32     v6, s29, v7                             // 000000000120: 3E0C0E1D
  v_mac_f32     v14, v17, v9                            // 000000000124: 3E1C1311
  v_mac_f32     v15, v18, v11                           // 000000000128: 3E1E1712
  v_mac_f32     v10, v13, v12                           // 00000000012C: 3E14190D
  v_mad_legacy_f32  v6, s28, v8, v6 clamp               // 000000000130: D2800806 041A101C
  s_waitcnt     lgkmcnt(0)                              // 000000000138: BF8C007F
  v_mul_legacy_f32  v7, s36, v16                        // 00000000013C: 0E0E2024
  v_mul_legacy_f32  v8, s37, v16                        // 000000000140: 0E102025
  v_mul_legacy_f32  v13, s38, v16                       // 000000000144: 0E1A2026
  v_mul_legacy_f32  v16, s4, v6                         // 000000000148: 0E200C04
  v_mul_legacy_f32  v17, s5, v6                         // 00000000014C: 0E220C05
  v_mul_legacy_f32  v6, s6, v6                          // 000000000150: 0E0C0C06
  v_mac_f32     v14, v7, v9                             // 000000000154: 3E1C1307
  v_mac_f32     v15, v8, v11                            // 000000000158: 3E1E1708
  v_mac_f32     v10, v13, v12                           // 00000000015C: 3E14190D
  v_interp_p1_f32  v0, v0, attr0.w                      // 000000000160: C8000300
  v_mad_legacy_f32  v14, v16, v9, v14 clamp             // 000000000164: D280080E 043A1310
  v_mad_legacy_f32  v15, v17, v11, v15 clamp            // 00000000016C: D280080F 043E1711
  v_mad_legacy_f32  v10, v6, v12, v10 clamp             // 000000000174: D280080A 042A1906
  v_interp_p2_f32  v0, v1, attr0.w                      // 00000000017C: C8010301
  s_waitcnt     vmcnt(0)                                // 000000000180: BF8C0F70
  v_mul_legacy_f32  v1, v14, v2                         // 000000000184: 0E02050E
  v_mul_legacy_f32  v2, v15, v3                         // 000000000188: 0E04070F
  v_mul_legacy_f32  v3, v10, v4                         // 00000000018C: 0E06090A
  v_mul_legacy_f32  v0, v5, v0                          // 000000000190: 0E000105
  s_mov_b64     exec, s[40:41]                          // 000000000194: BEFE0428
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000198: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 00000000019C: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 0000000001A0: F8001C0F 00000001
  s_endpgm                                              // 0000000001A8: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   20
//  NumSRegs:                   44
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   84
//  CycleSimNWaves:             84
//  Code Size:                  428
//Assembler Counts:
//  num_32bit_ops                     : 89
//  num_64bit_ops                     : 9
//  num_alu                           : 73
//  num_fc                            : 23
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 6
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 4
//  num_inst_vop2                     : 44
//  num_inst_vop3                     : 9
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 18
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 20
// m_uNumSRegs                       : 44
// m_uSCCodeSize                     : 428
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 84
// m_uCycleSimNWaves                 : 84

// Assembler Counts:
// num_32bit_ops                     : 89
// num_64bit_ops                     : 9
// num_alu                           : 73
// num_fc                            : 23
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 6
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 4
// num_inst_vop2                     : 44
// num_inst_vop3                     : 9
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 18
// num_inst_smem                     : 13
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DGSLLambert_mainTx[] =
{
     68,  88,  66,  67,   2, 210, 
     61, 157,  23, 252, 162, 239, 
    243,   2, 242, 110, 242, 211, 
    177, 169,   1,   0,   0,   0, 
     63,   8,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
     32,   1,   0,   0,  84,   1, 
      0,   0, 216,   7,   0,   0, 
    232,   7,   0,   0,  73,  83, 
     71,  78, 228,   0,   0,   0, 
      8,   0,   0,   0,   8,   0, 
      0,   0, 200,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0, 212,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 218,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 218,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0, 218,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      5,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      6,   0,   0,   0,  15,   0, 
      0,   0, 218,   0,   0,   0, 
      5,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      7,   0,   0,   0,   7,   0, 
      0,   0,  83,  86,  95,  80, 
     79,  83,  73,  84,  73,  79, 
     78,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 124,   6,   0,   0, 
     80,   0,   0,   0, 159,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 191,   0, 
      0,   0,  80,   0,   0,   0, 
    186,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   5,   0,   0,   0, 
     89,   0,   0,   4,  70, 142, 
     32,   0,   1,   0,   0,   0, 
     21,   0,   0,   0,  90,   0, 
      0,   3,   0,  96,  16,   0, 
      0,   0,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      0,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      3,   0,   0,   0,  16,   0, 
      0,   7,  18,   0,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16,   0,   3,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  68,   0,   0,   5, 
     18,   0,  16,   0,   0,   0, 
      0,   0,  10,   0,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 114,   0,  16,   0, 
      0,   0,   0,   0,   6,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  16,  32,   0,   8, 
    130,   0,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,   9,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      1,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   1,   0,   0,   0, 
     56,   0,   0,   7, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  50,   0, 
      0,  11, 114,   0,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     16,  32,   0,   8, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,  10,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   8, 
    114,   0,  16,   0,   2,   0, 
      0,   0, 246,  15,  16,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
      2,   0,   0,   0,  50,   0, 
      0,   9, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   2,   0,   0,   0, 
     70,  18,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  16,  32, 
      0,   8, 130,   0,  16,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
     11,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     16,  32,   0,   8,  18,   0, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,  12,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   8, 
    114,   0,  16,   0,   0,   0, 
      0,   0,   6,   0,  16,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
      4,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      2,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
     50,   0,   0,   9, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     50,  32,   0,   9, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  16,  16,   0, 
      2,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     56,   0,   0,   7, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   1,   0, 
      0,   0,  58,  16,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    224,   0,   0,   0,  23,   0, 
      1,   0,  41,   0,  17,   0, 
    120,   1, 237,  88, 207, 107, 
     19,  65,  20, 126, 179, 217, 
     77,  55, 113, 243, 118, 147, 
    172, 182,   9, 105, 136,  33, 
    214,  42,  85, 234, 197, 131, 
    135,  69, 107,  64, 164,   5, 
     11, 237, 161, 202, 170,  77, 
    108, 138,  65, 171, 165,  45, 
    226,  41,  86,  17,  17,  41, 
     34,  30, 196,  31,  23,  15, 
     30,  60, 120, 244, 220, 134, 
     61, 205, 177, 120, 241,  95, 
    240, 216, 163,   7, 169, 190, 
    183, 157, 213,  88, 245,  22, 
     80,  48,  31, 124, 243, 230, 
    155, 121, 251, 230, 205,  76, 
     14, 243,   2, 105,   8, 113, 
    171, 246,  49, 197, 118, 243, 
    107, 245, 213,  39,  13, 192, 
    160, 190,  32, 178, 101,  60, 
     15, 103,   1, 222, 218, 220, 
      2,  12, 115, 195,  14, 228, 
    235, 146,  25,  33, 190,  35, 
    125, 146,  44, 207,  69, 156, 
    159, 127,  54, 246, 242, 197, 
    203,  49, 234, 134,  62, 236, 
     59, 173, 120, 158, 152,  32, 
    158,  37, 246,  19,  57,  28, 
     35, 178, 140,  56,  55,   4, 
    157, 155,  14, 176, 230, 120, 
    252,  61,  35,  67,  84,  41, 
    114,  74,  63, 197, 128,   6, 
     55, 191,  71, 157, 200,  57, 
    253,   9, 156,  91,  20, 139, 
     45, 231, 201, 224, 181, 255, 
     54, 118, 242, 250, 209, 198, 
    136, 209,  61,  49, 248,  62, 
     58, 129, 196, 104, 168, 170, 
    238,  49,  58, 215,  25, 165, 
    249,  44, 120, 111, 109, 226, 
    159, 240, 149, 176, 251, 204, 
     34, 205,  57, 196,   5,   5, 
     51, 201, 106,  89,   0, 135, 
    108, 236,  32, 192,   0,  77, 
    252,  39, 136, 206, 148, 207, 
    130, 127, 139, 116,   4, 160, 
    142,  55,  68,  52,  63, 207, 
     13, 172, 110,  48, 159,  12, 
    192, 103,  86, 145,  22, 164, 
    119, 238, 106,  71, 199,  88, 
    115, 176,  78,  77,  74,  24, 
    218, 165, 152, 128,  75, 118, 
    225, 187, 246,  73, 251,  29, 
    250,   2, 233,  11,  29, 122, 
    150, 244, 108, 135, 174, 147, 
    174,  71,  58, 138, 111, 135, 
    235, 197, 194, 187, 166, 193, 
    214, 191, 204,  94, 142, 221, 
     97,  47, 199, 238, 176, 151, 
     99, 119, 216, 203, 177,  59, 
    236, 229, 216,  29, 246, 114, 
    236,  14, 123,  57, 118, 141, 
    208, 210, 223, 174, 183, 146, 
    219, 235,  32, 130, 182,  41, 
     30, 180, 181, 216, 151, 117, 
    208,  77,   9, 134,  37, 133, 
    158, 144, 194,  72, 201,  59, 
    176, 182,   1, 246, 234, 150, 
    166, 213, 192,  18, 237,  54, 
     36,   7,  36,  36,  10,  82, 
     36, 115, 225,  92, 197, 184, 
     31, 128,  89, 146,  34,  49, 
     40, 227, 169,  12,  10, 115, 
    191, 236, 179,  51, 222, 176, 
    241,  32,  48, 211,  25,  79, 
     55,  30,   6,  35, 198, 163, 
     32, 113,  49, 211,   2,  99, 
     45,  24,  53,  30,   7, 241, 
    172, 133,  32,  86,   3, 211, 
    120,  18, 244, 101,  17,  57, 
     78, 210, 114, 209,  50, 158, 
      6, 102, 214, 193,   4, 186, 
    158,  99, 220,  11, 146, 230, 
    234,   7, 211,  57,  76,  79, 
    222, 138,   4,  49,  34,  65, 
     27, 149, 104, 229, 209, 113, 
     11, 152, 118, 139, 152, 113, 
     93,  20, 112,  64,  10, 113, 
     68,  10, 237, 152,  76,  97, 
    222, 219, 103, 149,  16, 179, 
      5, 180, 251, 139, 152, 204, 
    185,  56, 160, 149,  91,  57, 
    173, 210, 202, 107,  67, 173, 
     20, 197, 179, 156, 227, 250, 
     94,  44, 121,  69, 139, 114, 
     40,  23,  60,  81,  41, 122, 
    218, 144, 235, 149, 242, 101, 
    220, 159, 175,  96,  57,  79, 
    241, 201, 207, 117, 198, 244, 
     65, 180, 188, 116, 182, 224, 
    101, 250, 139,  94,  42, 231, 
    122, 113,  26,  47,  56, 121, 
     61, 220,  55,  45, 115, 160, 
    228, 224,  80,  41, 143,  58, 
    173, 105,  88, 101, 140,  83, 
    204,  62, 242,  55, 149,  63, 
     61, 226,  37, 210,  55,  78, 
    246, 132, 110, 147,  77, 247, 
    123,  58, 239,  41, 158,  59, 
    172, 139, 152, 144, 139, 246, 
    218,   6,  26,  26, 218, 125, 
     58,  38,  19, 113,  52,   4, 
    224, 176, 190, 189,  78, 239, 
    234, 159, 222, 229,   0, 119, 
     55, 114, 220,   9, 223, 240, 
    187,  96, 238, 120,  68,   8, 
    149,  46, 184, 132, 250, 142, 
    240,  51,  26, 179, 216,  42, 
    104, 236,  72,  99,  92,  95, 
     68, 216,  82, 133,  70,  91, 
    217,  81,  34, 215, 200, 130, 
     54, 194, 238, 123,  85, 159, 
    193, 181, 189, 174,  42, 236, 
    137, 102, 225, 218, 251,  67, 
    175,  55, 185, 207,  24,  86, 
     65,  77, 101,  75, 196, 206, 
    181,   1, 222, 112, 243,  11, 
     38, 149, 255,  73, 101, 217, 
    112, 189, 131, 209,  63,   9, 
     92, 132,  18,  22, 213, 252, 
     85, 101, 121, 175, 123, 136, 
    187, 243, 120, 168, 230,  39, 
    137, 156, 105, 245, 132, 127, 
    106, 250, 140, 191, 188, 114, 
    121, 174, 113, 203,  31, 111, 
    174,  44, 251, 213, 230,  82, 
    227, 202, 202, 204, 244, 184, 
    191, 188, 116, 197, 159, 186, 
     90, 155, 107,  44,  45, 251, 
    167, 111,  46,  44,  54, 175, 
     55, 230, 252, 153, 250, 205, 
    219, 231, 110,  52, 170, 103, 
    166,  38,  38, 106,  11, 245, 
    198, 210, 202, 229, 133,  90, 
    243, 198, 244, 237, 163, 139, 
    115, 117, 248,   6,  41,  10, 
     24, 250,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
     76, 105,  28, 107, 180,  41, 
    160, 208,  88,  80,  68,  80, 
     79,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  68,  71,  83,  76,  76, 
     97, 109,  98, 101, 114, 116, 
     95, 109,  97, 105, 110,  84, 
    120,  46, 112, 100,  98
};
