#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[83]
// Embedded Data:
//  0x00000053 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000004e - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, v0.xyzw
lt r1.x, r0.w, cb0[1].x
mov o0.xyzw, r0.xyzw
movc r0.x, r1.x, cb0[1].z, cb0[1].w
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[83], bundle is:[162] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneAlphaTestEffect_PSAlphaTestLtGtNoFog.pdb
// Shader Semantic Hash      : 0xe523a6536214588b
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  3, param1, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 152 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 9;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000050
DB:Z_ORDER                  = 1
DB:KILL_ENABLE              = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x84, dwords=0x21)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v0, off, off done vm          // 000000000008: F8001803 00000001
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000004: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v3, v0                      // 000000000004: 5C000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v3, v0                      // 000000000004: 5A000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v3, v0                          // 000000000004: 60000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v3, v0                          // 000000000004: 62000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v3, v0 done vm            // 000000000008: F800180F 00030201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000010: C8080400
  v_interp_p2_f32  v2, v1, attr1.x                      // 000000000014: C8090401
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000018: C80C0500
  v_interp_p2_f32  v3, v1, attr1.y                      // 00000000001C: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[2:5], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400202
  v_interp_p1_f32  v6, v0, attr0.x                      // 00000000002C: C8180000
  v_interp_p2_f32  v6, v1, attr0.x                      // 000000000030: C8190001
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000034: C81C0100
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000038: C81D0101
  v_interp_p1_f32  v8, v0, attr0.z                      // 00000000003C: C8200200
  v_interp_p2_f32  v8, v1, attr0.z                      // 000000000040: C8210201
  v_interp_p1_f32  v0, v0, attr0.w                      // 000000000044: C8000300
  v_interp_p2_f32  v0, v1, attr0.w                      // 000000000048: C8010301
  s_waitcnt     vmcnt(0)                                // 00000000004C: BF8C0F70
  v_mul_legacy_f32  v1, v2, v6                          // 000000000050: 0E020D02
  v_mul_legacy_f32  v2, v3, v7                          // 000000000054: 0E040F03
  v_mul_legacy_f32  v3, v4, v8                          // 000000000058: 0E061104
  v_mul_legacy_f32  v0, v5, v0                          // 00000000005C: 0E000105
  s_buffer_load_dwordx4  s[0:3], s[12:15], 0x04         // 000000000060: C2800D04
  s_waitcnt     lgkmcnt(0)                              // 000000000064: BF8C007F
  v_cmp_gt_f32  vcc, s0, v0                             // 000000000068: 7C080000
  v_mov_b32     v4, s2                                  // 00000000006C: 7E080202
  v_mov_b32     v5, s3                                  // 000000000070: 7E0A0203
  v_cndmask_b32  v4, v5, v4, vcc                        // 000000000074: 00080905
  v_cmp_gt_f32  vcc, 0, v4                              // 000000000078: 7C080880
  s_andn2_b64   s[16:17], s[16:17], vcc // wrscc        // 00000000007C: 8A906A10
  s_mov_b64     exec, s[16:17]                          // 000000000080: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000084: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000088: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 00000000008C: F8001C0F 00000001
  s_endpgm                                              // 000000000094: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   9
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   83
//  CycleSimNWaves:             83
//  Code Size:                  152
//Assembler Counts:
//  num_32bit_ops                     : 34
//  num_64bit_ops                     : 2
//  num_alu                           : 23
//  num_fc                            : 11
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 1
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 2
//  num_inst_vop2                     : 7
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 2
//  num_inst_vintrp                   : 12
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 9
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 152
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 83
// m_uCycleSimNWaves                 : 83

// Assembler Counts:
// num_32bit_ops                     : 34
// num_64bit_ops                     : 2
// num_alu                           : 23
// num_fc                            : 11
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 1
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 2
// num_inst_vop2                     : 7
// num_inst_vop3                     : 0
// num_inst_vopc                     : 2
// num_inst_vintrp                   : 12
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE AlphaTestEffect_PSAlphaTestLtGtNoFog[] =
{
     68,  88,  66,  67, 109, 249, 
     51, 137, 163,  21, 158, 235, 
    220,  29, 127, 104, 137,  83, 
    105, 231,   1,   0,   0,   0, 
     21,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    132,   0,   0,   0, 184,   0, 
      0,   0, 156,   4,   0,   0, 
    172,   4,   0,   0,  73,  83, 
     71,  78,  72,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  62,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 220,   3,   0,   0, 
     80,   0,   0,   0, 247,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  83,   0, 
      0,   0,  80,   0,   0,   0, 
     78,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   8,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      0,   0,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      1,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  16,  16,   0, 
      1,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     49,   0,   0,   8,  18,   0, 
     16,   0,   1,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  10, 128,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  54,   0,   0,   5, 
    242,  32,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  55,   0, 
      0,  11,  18,   0,  16,   0, 
      0,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
     42, 128,  32,   0,   0,   0, 
      0,   0,   1,   0,   0,   0, 
     58, 128,  32,   0,   0,   0, 
      0,   0,   1,   0,   0,   0, 
     49,   0,   0,   7,  18,   0, 
     16,   0,   0,   0,   0,   0, 
     10,   0,  16,   0,   0,   0, 
      0,   0,   1,  64,   0,   0, 
      0,   0,   0,   0,  13,   0, 
      4,   3,  10,   0,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    164,   0,   0,   0,  23,   0, 
      1,   0,  41, 222,  15,   0, 
    120,   1, 237,  87,  61, 111, 
    211,  80,  20, 189, 207, 118, 
    130,  19, 146,  56, 136,  72, 
    180,  82, 144,  90,  96,  96, 
     66,  12,  12,   8,  49,  16, 
     17, 232,  80,  68,  43,  37, 
     67,  84,  89, 253, 112, 227, 
    210, 160,  66, 162, 196,  66, 
     12,  85,   8,  43, 116, 200, 
    152,  31, 128, 248,   1, 108, 
     72,  40,   1,  38,  15, 176, 
     49, 179, 177,  49,  48,  48, 
     32,  84,  21, 238, 177, 223, 
     43, 110, 161, 155,  37, 144, 
    240, 145, 206, 189, 239, 188, 
    143, 155,  27,  95,  91, 122, 
    247, 163,  69,  33, 190, 123, 
     47, 224, 170, 165, 133, 151, 
    151,   5,  81, 138, 199, 236, 
      2,  15, 140, 242, 176,  68, 
    131,   2,  44, 209, 121,  24, 
    108, 208, 136,  50, 236,  74, 
    204,  17, 243,  26,  19, 107, 
    138,  68, 159,  43, 239, 223, 
    237,  86,  48,  42,  50, 179, 
    204, 154, 228,  25,  38,  31, 
    167,  83, 204, 227,  76, 132, 
      3, 148,   7,  12,  24,   6, 
    124, 116,  30, 231, 142,  49, 
      1, 140, 115, 210,   3, 240, 
    209, 189, 228, 194, 252,  25, 
    231, 152, 200, 255,  40,  32, 
     55,  21,  11,  30, 121,   2, 
    248, 191, 127,  27,  97,  94, 
    191,  44, 168, 234,   4, 160, 
     30,  81, 160, 116, 216,   3, 
     92, 148, 117, 212,  97,  24, 
     85, 169,  85,  45,  95,  51, 
    143, 194,  15,   6, 106,  25, 
    133, 210, 120, 246, 105,  10, 
     95, 170, 180,  56,  73, 100, 
     98, 244, 127,  65, 189, 179, 
    120,  22, 224,  34,  83, 125, 
    102, 128,  90, 159, 133, 161, 
    193,   4,  28,  78, 209,  55, 
     40, 165,   5, 235, 176,  86, 
    161, 214, 161,  17,  44, 170, 
     89, 137, 148, 182, 172,  11, 
     90, 182, 202, 251, 218, 102, 
    109,  71, 244,  18, 235, 165, 
    136,  94, 101, 189,  26, 209, 
     14, 107,  71, 105,  21, 223, 
     10, 126,  79,  15, 106, 205, 
    147, 253, 127, 153,  73, 142, 
    241,  48, 201,  49,  30,  38, 
     57, 198, 195,  36, 199, 120, 
    152, 228,  24,  15, 147,  28, 
    227,  97, 146,  99, 108, 164, 
    190,  49,  28, 247, 179, 123, 
     99,  77, 223,  29, 243, 229, 
    254,  13,  25, 166,  47, 140, 
    140,  79, 169, 156,  47,  82, 
    121, 255,  17, 237,  76, 200, 
     26, 124, 209,  52, 116, 102, 
     83, 190, 160, 105, 159,  68, 
    217,  23, 226, 180,  79, 218, 
    140,  47, 180,  89, 159, 155, 
      0,  95, 232, 194, 239,  88, 
     59,  19,  45, 175,  21, 116, 
    203,  40,  24,  39, 210, 133, 
    148, 160, 130, 145,  31, 188, 
     13,  98, 144, 185, 173, 105, 
    102,  95, 215, 178, 253,  84, 
    198, 164, 129, 105, 110,  23, 
    239,  14, 159,  20, 141, 189, 
     49, 223,  33,  15, 220,  65, 
    137,  30,  79, 166,  49,   8, 
    238, 171, 135,  96, 134,  59, 
     20,   2, 101, 136,   3, 109, 
     66, 112, 140, 231, 208, 211, 
     41, 188, 146, 253, 201,  72, 
    122, 213, 183,   9, 217, 193, 
    224, 188, 193, 157,   7, 240, 
    180,  81, 114, 106, 207, 207, 
    126, 194,  24, 248,  42, 207, 
    124, 144, 126, 134,  25, 141, 
     77, 244,  12, 230,  55, 148, 
    229, 165,  61,  39,  61, 122, 
     28, 220, 221,  11, 170,  43, 
    150, 241, 174, 202, 245,  75, 
    210,  35,  23, 244, 137, 135, 
    243, 168, 203, 117, 135, 137, 
     76, 171,  87, 236,  74, 125, 
    206, 238, 121,  43,  77, 247, 
    129,  61, 223, 242, 122, 118, 
    181, 213, 117, 215, 189,  70, 
    125, 222, 238, 117, 215, 237, 
    218, 230,  90, 211, 237, 246, 
    236, 235, 237, 123, 157, 214, 
    150, 219, 180,  27,  78, 251, 
    225, 194, 125, 183, 178, 213, 
    217,  92, 171, 187,  61, 239, 
    198, 198,   6, 111,  95,  89, 
    172, 237, 207, 220, 242, 230, 
    188, 219, 237, 155, 237,  59, 
     23,  58,  77, 135, 126,   2, 
     54,   9, 233, 135,  88,  72, 
     83,  72,   8,   0,   0,   0, 
    139,  88,  20,  98,  83, 166, 
     35, 229,  88,  80,  68,  80, 
     97,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  65, 108, 112, 104,  97, 
     84, 101, 115, 116,  69, 102, 
    102, 101,  99, 116,  95,  80, 
     83,  65, 108, 112, 104,  97, 
     84, 101, 115, 116,  76, 116, 
     71, 116,  78, 111,  70, 111, 
    103,  46, 112, 100,  98
};
