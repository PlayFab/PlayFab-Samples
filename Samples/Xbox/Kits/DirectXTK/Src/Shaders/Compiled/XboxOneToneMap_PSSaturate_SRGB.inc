#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[72]
// Embedded Data:
//  0x00000048 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000043 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul_sat r0.xyz, r0.xyzx, cb0[0].xxxx
mov o0.w, r0.w
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp o0.xyz, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[72], bundle is:[158] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PSSaturate_SRGB.pdb
// Shader Semantic Hash      : 0x791aa01221dff969
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 144 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 4;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x7C, dwords=0x1F)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000014: C8090001
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400002
  s_buffer_load_dword  s0, s[12:15], 0x00               // 00000000002C: C2000D00
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000030: BF8C0070
  v_mul_legacy_f32  v0, v0, s0 clamp                    // 000000000034: D20E0800 00000100
  v_mul_legacy_f32  v1, v1, s0 clamp                    // 00000000003C: D20E0801 00000101
  v_mul_legacy_f32  v2, v2, s0 clamp                    // 000000000044: D20E0802 00000102
  v_log_f32     v0, v0                                  // 00000000004C: 7E004F00
  v_log_f32     v1, v1                                  // 000000000050: 7E024F01
  v_log_f32     v2, v2                                  // 000000000054: 7E044F02
  s_mov_b32     s0, 0x3ee8ba2f                          // 000000000058: BE8003FF 3EE8BA2F
  v_mul_legacy_f32  v0, s0, v0                          // 000000000060: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 000000000064: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 000000000068: 0E040400
  v_exp_f32     v0, v0                                  // 00000000006C: 7E004B00
  v_exp_f32     v1, v1                                  // 000000000070: 7E024B01
  v_exp_f32     v2, v2                                  // 000000000074: 7E044B02
  s_mov_b64     exec, s[16:17]                          // 000000000078: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 00000000007C: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000080: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000084: F8001C0F 00000100
  s_endpgm                                              // 00000000008C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   4
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   85
//  CycleSimNWaves:             85
//  Code Size:                  144
//Assembler Counts:
//  num_32bit_ops                     : 25
//  num_64bit_ops                     : 5
//  num_alu                           : 18
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 6
//  num_inst_vop2                     : 5
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 4
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 144
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 85
// m_uCycleSimNWaves                 : 85

// Assembler Counts:
// num_32bit_ops                     : 25
// num_64bit_ops                     : 5
// num_alu                           : 18
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 6
// num_inst_vop2                     : 5
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PSSaturate_SRGB[] =
{
     68,  88,  66,  67, 228,  74, 
     20,  77,  76,  31, 210,   3, 
    250, 223, 218, 198, 107, 158, 
     75,  75,   1,   0,   0,   0, 
    212,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 104,   4,   0,   0, 
    120,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 160,   3, 
      0,   0,  80,   0,   0,   0, 
    232,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     72,   0,   0,   0,  80,   0, 
      0,   0,  67,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,  32, 
      0,   8, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      6, 128,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  47,   0,   0,   5, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,  10, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      2,  64,   0,   0,  47, 186, 
    232,  62,  47, 186, 232,  62, 
     47, 186, 232,  62,   0,   0, 
      0,   0,  25,   0,   0,   5, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    160,   0,   0,   0,  23,   0, 
      1,   0,  41, 201,  15,   0, 
    120,   1, 237,  87, 207, 107, 
     19,  65,  20, 126,  51, 187, 
    182, 105,  77,  54, 165, 244, 
     96,  69, 252, 129,  30,  10, 
    138,  30, 226,  73,  68,  52, 
     22, 122,  88,  53,  98,  34, 
    148,  50,  52,  77, 154,   5, 
      3, 181,   9, 201,  42, 245, 
    224,  26, 239,  30, 226,  69, 
    212, 131, 120, 240,  79, 240, 
    228,  33,  81,  79,  17, 196, 
    131, 255, 128,   7,  47,  30, 
     60, 120,  84, 144, 214, 247, 
    173,  51, 117,  27, 219, 219, 
    130,  66, 247, 131, 239, 125, 
    243, 205, 236, 190, 188, 221, 
    217, 192, 155, 119,  89,  10, 
    241, 225, 225, 231,  43, 208, 
    103,  71,  31, 221,  77,  11, 
    162,  61,  60, 102,   9,  21, 
    120, 156,  65,  36,  90, 115, 
     16, 137, 102,  16, 112, 129, 
     36, 178,  89, 166, 152,  93, 
    230, 121,  38, 214,  12, 115, 
    185, 227, 249, 167,  79, 114, 
    121,  30, 210,   4, 115, 148, 
    121,  93, 115, 154, 137, 252, 
    147, 204, 113,  38, 210,   1, 
     70,   1,  11, 129,  97, 234, 
     48,  24,  97,  70, 231,  80, 
      3, 151,  18,   2,  26, 205, 
     65,  30, 194, 246,  56, 200, 
    196, 189,  59,   1, 181, 153, 
     92,  80, 212,   9, 224, 121, 
    255,  53, 126, 215, 245,  39, 
    130, 102, 159,   0, 236,  71, 
     20, 216,  58,  92,   3, 204, 
    232, 125,  52, 239, 247, 172, 
    246, 120,  23, 120, 182, 215, 
    204, 157, 176, 193, 192,  94, 
     70,  97,  60, 242, 143,   8, 
    206, 154, 226, 193,  46, 133, 
    249, 158, 240,  46, 240,  45, 
    226, 221, 232, 191,  89,   8, 
    179, 126,   8, 129,  58, 125, 
    176, 187, 143, 190, 195,  25, 
     47, 134, 188,   5, 143, 132, 
     81, 143, 205, 179, 104,  81, 
    142, 202, 197, 236,   1, 189, 
    110, 145,  98, 175,  34, 126, 
    129, 253,  66, 196,  47, 177, 
     95, 138, 248,  42, 251, 234, 
    166, 215, 249, 179, 225, 239, 
     73,  11, 123, 205, 147, 193, 
    255, 204, 164, 198, 120, 152, 
    212,  24,  15, 147,  26, 227, 
     97,  82,  99,  60,  76, 106, 
    140, 135,  73, 141, 241,  48, 
    169,  49,  54,  82,  96, 119, 
    123, 193, 248, 122,  79,  90, 
     63, 123, 220, 191, 189, 225, 
    198, 123,  32, 104, 108,  64, 
     34,  61,  16,  34,  51, 184, 
     71,  15, 250, 148, 237, 124, 
    147,  56, 153, 101, 232, 109, 
     19,  62, 229, 124,  68, 175, 
     39,  88,   5, 171, 100, 149, 
    172,  84, 160,  64,  20, 100, 
     32,  11, 118, 176,  97, 117, 
    122, 167,  94, 125,  57, 199, 
    179,  14,  73, 233, 144, 109, 
     59, 228, 242, 186, 203, 235, 
    174,  29,  76, 216, 235,  61, 
    238,  29, 183, 246, 158, 116, 
    191,  63,  13,  69, 211,  59, 
    140,  84, 120, 193,  38,  66, 
    103, 139,  45, 199, 132, 240, 
     54, 158,  75,  67,  53,  94, 
    234, 115,  73,  87, 235,  49, 
    230,  24,  83, 240, 143,   3, 
    200,  99, 135, 167,  65, 162, 
    250, 143,  79,  71,  38, 159, 
    239, 191, 131,  49, 240,  85, 
    223, 243,  94, 235,  97, 102, 
     52,  55, 209,  11, 132, 191, 
     48, 165, 155, 117,  91,  43, 
    250, 119, 244, 236, 142,  57, 
    113, 234, 124, 167, 245, 250, 
      9, 173, 120, 150, 189, 204, 
    225,  58,  46, 233, 117, 156, 
    121,  81, 233, 236,  25, 117, 
    161,  52, 167, 218, 126, 185, 
    230, 221,  86, 110, 221, 111, 
    171, 217, 122, 203,  91, 246, 
    231,  75, 174, 106, 183, 150, 
     85, 241,  70, 165, 230, 181, 
    218, 234,  98, 227, 102, 179, 
    190, 226, 213, 212, 124, 181, 
    177,  86,  88, 245,  74, 141, 
     85, 239, 114, 165,  89, 190, 
     90,  44,  86, 252,  91, 173, 
    138, 239, 149, 139, 215, 230, 
    242,  39, 155, 181,  42, 253, 
      2,  81, 200, 224, 230,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0, 105, 249, 223,  33, 
     18, 160,  26, 121,  88,  80, 
     68,  80,  84,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  84, 111, 110, 
    101,  77,  97, 112,  95,  80, 
     83,  83,  97, 116, 117, 114, 
     97, 116, 101,  95,  83,  82, 
     71,  66,  46, 112, 100,  98
};
