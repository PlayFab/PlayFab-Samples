#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[45]
// Embedded Data:
//  0x0000002d - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000028 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul o0.xyzw, r0.xyzw, v0.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[45], bundle is:[152] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneSpriteEffect_SpritePixelShader.pdb
// Shader Semantic Hash      : 0xd100b1d8462105a9
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  3, param1, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 124 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 9;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x68, dwords=0x1A)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v0, off, off done vm          // 000000000008: F8001803 00000001
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000004: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v3, v0                      // 000000000004: 5C000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v3, v0                      // 000000000004: 5A000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v3, v0                          // 000000000004: 60000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v3, v0                          // 000000000004: 62000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v3, v0 done vm            // 000000000008: F800180F 00030201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000014: C8080400
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000018: C80C0500
  v_interp_p2_f32  v2, v1, attr1.x                      // 00000000001C: C8090401
  v_interp_p2_f32  v3, v1, attr1.y                      // 000000000020: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610202
  v_interp_p1_f32  v6, v0, attr0.x                      // 000000000030: C8180000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000034: C81C0100
  v_interp_p1_f32  v8, v0, attr0.z                      // 000000000038: C8200200
  v_interp_p1_f32  v0, v0, attr0.w                      // 00000000003C: C8000300
  v_interp_p2_f32  v6, v1, attr0.x                      // 000000000040: C8190001
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000044: C81D0101
  v_interp_p2_f32  v8, v1, attr0.z                      // 000000000048: C8210201
  v_interp_p2_f32  v0, v1, attr0.w                      // 00000000004C: C8010301
  s_waitcnt     vmcnt(0)                                // 000000000050: BF8C0F70
  v_mul_legacy_f32  v1, v2, v6                          // 000000000054: 0E020D02
  v_mul_legacy_f32  v2, v3, v7                          // 000000000058: 0E040F03
  v_mul_legacy_f32  v3, v4, v8                          // 00000000005C: 0E061104
  v_mul_legacy_f32  v0, v5, v0                          // 000000000060: 0E000105
  s_mov_b64     exec, s[16:17]                          // 000000000064: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000068: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 00000000006C: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000070: F8001C0F 00000001
  s_endpgm                                              // 000000000078: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   9
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   79
//  CycleSimNWaves:             79
//  Code Size:                  124
//Assembler Counts:
//  num_32bit_ops                     : 27
//  num_64bit_ops                     : 2
//  num_alu                           : 18
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 6
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 12
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 9
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 124
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 79
// m_uCycleSimNWaves                 : 79

// Assembler Counts:
// num_32bit_ops                     : 27
// num_64bit_ops                     : 2
// num_alu                           : 18
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 6
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 12
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE SpriteEffect_SpritePixelShader[] =
{
     68,  88,  66,  67, 147, 199, 
     56, 172,  44, 233, 107, 253, 
      8,  61, 247, 247, 176, 127, 
    219,  34,   1,   0,   0,   0, 
     79,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    132,   0,   0,   0, 184,   0, 
      0,   0, 220,   3,   0,   0, 
    236,   3,   0,   0,  73,  83, 
     71,  78,  72,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  62,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,  28,   3,   0,   0, 
     80,   0,   0,   0, 199,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  45,   0, 
      0,   0,  80,   0,   0,   0, 
     40,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3, 242,  16, 
     16,   0,   0,   0,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 242,  32,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 154,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 156,  15,   0, 120,   1, 
    237,  87, 191, 111, 211,  64, 
     20, 126, 231,  31,  81,  90, 
     26, 187,  64, 135,  20,  90, 
    169, 221,  58, 241,   7,  48, 
     32,  34,  10,  12, 149, 104, 
    164,  86, 168, 170,  78, 105, 
    155, 198,  85,  45,  21,  18, 
     37,  17, 234, 128,  66,  88, 
    152,  58, 116,  44, 136, 129, 
    129, 133, 145,   5,  49,  37, 
     17, 211,  13,  32, 209, 141, 
    145,  63, 128, 129, 177,   3, 
     42, 188, 207, 190,   3,  39, 
    208, 205,  18,  72, 248, 147, 
    190, 247, 238, 179, 159, 159, 
    223, 221, 217, 210, 189, 231, 
     62,  69, 248, 242, 166, 124, 
      7, 190,  94, 185, 123, 237, 
      5, 123, 151,  41, 180,   7, 
    142,  10, 176,  68, 101,  15, 
    150, 104,   1,   6,   1,  22, 
    209,  24, 187,  41, 230,  67, 
    230, 117,  38, 238,  25, 126, 
    120,  63,  40,  61, 123, 122, 
     92, 226,  33,  33, 197,  56, 
    115,  89, 243,  50, 147,  31, 
    167,  11,  76, 228,  64,  58, 
    192, 120, 192, 134,  97,  56, 
     48,  35, 200, 193, 104,  76, 
     48, 145,  11, 128,  79, 230, 
    160,   0, 230, 207, 152, 101, 
    226, 221, 103,   1, 181, 153, 
     92, 240,  38,  22, 243, 253, 
    219, 136, 235,  74, 218,  95, 
    251,   4,  96,  63, 146, 192, 
    214, 153, 184,  41, 189, 143, 
    102, 205,  22, 180, 198, 252, 
     48, 183,   1, 243,  44, 124, 
    103,  96, 189, 147,  48,  26, 
    249, 114,  20, 127,  84,  57, 
    113, 145,  40, 143, 209, 255, 
      5, 243, 173,  98,  45, 192, 
     73, 166, 254, 205,  34, 152, 
    251, 151,  96, 168, 219,   7, 
     15, 139, 116,   2, 101, 180, 
     96,  29, 239,  85, 172, 109, 
    104,  36,  75, 106,  86, 194, 
    181,  42, 182, 160, 138,  63, 
    243,  83,  75, 214,  50, 161, 
    215,  89, 175,  39, 244,  38, 
    235, 205, 132, 174, 178, 174, 
     26, 109, 242, 251, 209, 251, 
    236, 104, 175, 249,  98, 231, 
     95, 102,  86,  99,  58, 204, 
    106,  76, 135,  89, 141, 233, 
     48, 171,  49,  29, 102,  53, 
    166, 195, 172, 198, 116, 152, 
    213, 152,  26, 169, 227,  28, 
    246,  58, 227, 167,  61,  18, 
    239,   6, 121, 241, 100,  96, 
    217, 223, 122, 228, 228,  21, 
    185,  19,  74,  56,  99,  74, 
    184,   5, 245, 136,  14, 250, 
    228, 119, 191,  90, 214,  22, 
     63,  81,  84,  36, 102,  20, 
     89, 115, 138, 155,  43,  37, 
    104,  90,   9,  49, 171, 132, 
     53, 175, 132,  45,  84, 195, 
     63, 232,  91,   5, 203, 179, 
    125, 199, 115, 206, 231,  60, 
     87, 144,  55, 233, 156, 246, 
    248, 156,  56, 116, 206,  36, 
    122, 220, 159, 198,  32,  58, 
    147, 142,  32,  31,  71,  24, 
     68, 202,  17,  67, 173,  64, 
     87, 247,  27, 187, 218,  23, 
    153, 232,  61,  28, 221, 213, 
    189, 114, 231, 111, 125, 122, 
     77, 199,  24,   3, 111, 117, 
    220, 145, 246, 115, 204, 225, 
     30, 228,  37, 204, 111, 248, 
    172, 227,  63, 106, 143, 179, 
     56, 206, 223, 158, 233, 108, 
    245, 117, 115,  64,  63, 209, 
     26, 181, 158,  99, 142, 214, 
     81, 212, 113, 146, 137,  74, 
     23, 175, 202, 210, 234, 109, 
    217, 106, 111, 212, 130,   7, 
    114,  41, 108, 183, 228,  98, 
    216,  12, 182, 219, 107, 171, 
     75, 178, 213, 220, 150,  43, 
    187,  91, 181, 160, 217, 146, 
     55, 234, 247,  26, 225,  94, 
     80, 147, 107, 213, 250, 254, 
    242, 253,  96, 165, 209,  12, 
    219, 193, 205, 157,  29, 142, 
    221, 136,  69,  57, 220,  15, 
    246, 226, 248,  43, 141,  90, 
    149, 126,   0,  68, 109, 227, 
    119,   0,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
    169,   5,  33,  70, 216, 177, 
      0, 209,  88,  80,  68,  80, 
     91,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  83, 112, 114, 105, 116, 
    101,  69, 102, 102, 101,  99, 
    116,  95,  83, 112, 114, 105, 
    116, 101,  80, 105, 120, 101, 
    108,  83, 104,  97, 100, 101, 
    114,  46, 112, 100,  98
};
