#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[20]
// Embedded Data:
//  0x00000014 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000000f - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_input_ps linear v0.xyzw
dcl_output o0.xyzw
mov o0.xyzw, v0.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[20], bundle is:[125] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneBasicEffect_PSBasicNoFog.pdb
// Shader Semantic Hash      : 0x37e5735ae72e155e
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}

codeLenInByte        = 56 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 0;
extUserElementCount  = 0;
NumVgprs             = 5;
NumSgprs             = 5;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x24, dwords=0x9)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v0, off, off done vm          // 000000000008: F8001803 00000002
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000000: 5E020702
  v_cvt_pkrtz_f16_f32  v0, v4, v0                       // 000000000004: 5E000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000000: 5C020702
  v_cvt_pknorm_u16_f32  v0, v4, v0                      // 000000000004: 5C000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000000: 5A020702
  v_cvt_pknorm_i16_f32  v0, v4, v0                      // 000000000004: 5A000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000000: 60020702
  v_cvt_pk_u16_u32  v0, v4, v0                          // 000000000004: 60000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000000: 62020702
  v_cvt_pk_i16_i32  v0, v4, v0                          // 000000000004: 62000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v0 done vm            // 000000000008: F800180F 00040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b32     m0, s2                                  // 000000000000: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000004: C8080000
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000008: C8090001
  v_interp_p1_f32  v3, v0, attr0.y                      // 00000000000C: C80C0100
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000010: C80D0101
  v_interp_p1_f32  v4, v0, attr0.z                      // 000000000014: C8100200
  v_interp_p2_f32  v4, v1, attr0.z                      // 000000000018: C8110201
  v_interp_p1_f32  v0, v0, attr0.w                      // 00000000001C: C8000300
  v_interp_p2_f32  v0, v1, attr0.w                      // 000000000020: C8010301
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000024: 5E020702
  v_cvt_pkrtz_f16_f32  v0, v4, v0                       // 000000000028: 5E000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 00000000002C: F8001C0F 00000001
  s_endpgm                                              // 000000000034: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   5
//  NumSRegs:                   5
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   82
//  CycleSimNWaves:             82
//  Code Size:                  56
//Assembler Counts:
//  num_32bit_ops                     : 12
//  num_64bit_ops                     : 1
//  num_alu                           : 10
//  num_fc                            : 2
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 0
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 1
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 1
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 2
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 8
//  constant_literal_operands         : 0
//  num_tex                           : 1
//  num_vmem_group                    : 0
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 5
// m_uNumSRegs                       : 5
// m_uSCCodeSize                     : 56
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 82
// m_uCycleSimNWaves                 : 82

// Assembler Counts:
// num_32bit_ops                     : 12
// num_64bit_ops                     : 1
// num_alu                           : 10
// num_fc                            : 2
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 0
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 1
// num_inst_sopc                     : 0
// num_inst_sop1                     : 1
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 2
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 8
// num_inst_smem                     : 0
// constant_literal_operands         : 0
// num_tex                           : 1
// num_vmem_group                    : 0
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 0
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE BasicEffect_PSBasicNoFog[] =
{
     68,  88,  66,  67, 115, 251, 
     52,  71, 240,  64, 119, 105, 
    178, 211,  69, 131, 231, 168, 
     67,  47,   1,   0,   0,   0, 
     89,   3,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    100,   0,   0,   0, 152,   0, 
      0,   0, 236,   2,   0,   0, 
    252,   2,   0,   0,  73,  83, 
     71,  78,  40,   0,   0,   0, 
      1,   0,   0,   0,   8,   0, 
      0,   0,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  67,  79,  76,  79, 
     82,   0, 171, 171,  79,  83, 
     71,  78,  44,   0,   0,   0, 
      1,   0,   0,   0,   8,   0, 
      0,   0,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  83,  86,  95,  84, 
     97, 114, 103, 101, 116,   0, 
    171, 171,  83,  72,  69,  88, 
     76,   2,   0,   0,  80,   0, 
      0,   0, 147,   0,   0,   0, 
     53,  16,   0,   0,   5,   0, 
      0,   0,  20,   0,   0,   0, 
     80,   0,   0,   0,  15,   0, 
      0,   0, 106,   8,   0,   1, 
     98,  16,   0,   3, 242,  16, 
     16,   0,   0,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 127,   0, 
      0,   0,  23,   0,   1,   0, 
     41,  22,  15,   0, 120,   1, 
    237, 151,  77,  47,   3,  81, 
     20, 134, 207, 157, 214,  71, 
    125, 181,  22, 164,  11,  11, 
    137,   5, 177, 144,  88,  17, 
    233,  66,  41,  22,  18,   4, 
     17, 105, 110, 170, 218,  25, 
     52,  65, 233,  52, 210, 149, 
    240,  15,  44, 177, 182, 180, 
    179,  87, 203,  89, 250,  19, 
    194,  79, 176, 144, 112, 222, 
    233, 189,  49, 180, 216,  76, 
     68,  98, 222, 228,  57, 103, 
    222, 222,  59, 119, 206, 124, 
     52, 185, 167,  55,  74, 174, 
     14,   7, 110, 174, 145, 135, 
     91,  19, 131,   9, 206,  77, 
    140,  80,  25,  58, 239,  68, 
     36, 186,  87, 121,   8,   1, 
     19, 140, 218,  28,  48, 206, 
     76,  50,  24, 211,  16, 197, 
    146, 151,  23, 163, 201,  86, 
     62,  10,  49, 205, 204, 178, 
    162, 131, 193,  18, 109,  12, 
     47, 227,  30, 127, 150, 254, 
    173, 209,  24, 206, 209, 194, 
    250,  90, 117, 115,  77, 132, 
    198, 194, 237, 160, 246, 175, 
    132, 218, 180, 176, 174, 190, 
    230, 119, 231, 252, 150, 234, 
    238, 147, 165, 223,  19, 132, 
    247, 225,  85,  23, 194,  15, 
    194, 125, 129,  59, 230,  43, 
    189, 178, 144,  27,   9,  53, 
     53, 147, 250, 168, 254, 169, 
    194,   8,  44,  60,  11, 124, 
     47,  49, 198, 251,  68, 244, 
    120,   4, 129,  78, 170, 224, 
     44,  78, 207, 112, 218,  11, 
    246, 181, 111, 173, 230,  67, 
    240, 248,   3, 121,  61,  59, 
    163, 197, 200, 132,   5, 101, 
    162, 125, 244, 236,  94, 175, 
    197, 144, 236, 165, 199, 167, 
    217, 167,  61,  62, 203,  62, 
    235, 241,  57, 246,  57, 237, 
    245, 250,  81, 247, 122,  97, 
    253, 174, 143, 255,  50,  65, 
    141, 254,  16, 212, 232,  15, 
     65, 141, 254,  16, 212, 232, 
     15,  65, 141, 254,  16, 212, 
    232,  15,  65, 141, 190,  65, 
     70, 232, 229, 150, 187,  31, 
     71,  80, 196,  33, 209, 225, 
      8, 209, 233, 144,  17, 115, 
    132, 209, 237, 112, 195, 229, 
    136, 144, 112, 120, 143, 247, 
     97, 143,  72, 116,  90, 213, 
    205, 192, 147, 234,  23, 226, 
     12, 246, 163,  97, 183,  67, 
     35, 202, 244, 140,  60, 166, 
    237, 135,  49,  28,  67, 227, 
    106, 126,  92, 229, 126,   6, 
    253, 219, 187, 174,  16, 234, 
    148,  85, 243, 151,  84, 198, 
     94,  24, 251, 223,  46, 183, 
    203,  96, 169, 223,  79,  84, 
    174, 168, 140, 126, 174, 157, 
    249,  92, 199, 185,  26,  95, 
     99,  80, 105, 106,  66,  38, 
     87, 231, 164,  93, 222,  48, 
    173,  35,  57,  95,  40, 219, 
     50,  85,  40,  89, 249, 242, 
    250, 234, 188, 180,  75, 121, 
    185, 178, 179, 105,  90,  37, 
     91,  78,  23, 247,  14,  10, 
    187, 150,  41, 215, 115, 197, 
    202, 226, 190,  53, 181, 105, 
     23, 242,  51,  91,  91,  60, 
    117,  99, 105, 197, 117,  11, 
    197, 217, 226, 246, 200, 129, 
    153, 163,  55,  44,  52, 198, 
     65,   0,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
     94,  21,  46, 231,  90, 115, 
    229,  55,  88,  80,  68,  80, 
     85,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  66,  97, 115, 105,  99, 
     69, 102, 102, 101,  99, 116, 
     95,  80,  83,  66,  97, 115, 
    105,  99,  78, 111,  70, 111, 
    103,  46, 112, 100,  98
};
