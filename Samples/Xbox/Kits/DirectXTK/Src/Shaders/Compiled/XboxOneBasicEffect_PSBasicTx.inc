#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float      w
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[77]
// Embedded Data:
//  0x0000004d - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000048 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[26], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, v0.xyzw
mad r1.xyz, cb0[13].xyzx, r0.wwww, -r0.xyzx
mad o0.xyz, v1.wwww, r1.xyzx, r0.xyzx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[77], bundle is:[166] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneBasicEffect_PSBasicTx.pdb
// Shader Semantic Hash      : 0xc900c7e863e91c3b
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  8, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}

codeLenInByte        = 172 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 10;
NumSgprs             = 24;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000003
SPIC:NUM_INTERP             = 3
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x98, dwords=0x26)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v5, off, off done vm          // 000000000008: F8001803 00000502
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000004: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000004: 5C020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000004: 5A020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000004: 60020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000004: 62020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v5 done vm            // 000000000008: F800180F 05040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[20:21], exec                          // 000000000000: BE94047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_mov_b32     m0, s2                                  // 00000000000C: BEFC0302
  v_interp_p1_f32  v2, v0, attr2.x                      // 000000000010: C8080800
  v_interp_p1_f32  v3, v0, attr2.y                      // 000000000014: C80C0900
  v_interp_p2_f32  v2, v1, attr2.x                      // 000000000018: C8090801
  v_interp_p2_f32  v3, v1, attr2.y                      // 00000000001C: C80D0901
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000024: F0800F00 00610202
  s_buffer_load_dwordx4  s[0:3], s[16:19], 0x34         // 00000000002C: C2801134
  v_interp_p1_f32  v6, v0, attr0.x                      // 000000000030: C8180000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000034: C81C0100
  v_interp_p1_f32  v8, v0, attr0.z                      // 000000000038: C8200200
  v_interp_p1_f32  v9, v0, attr0.w                      // 00000000003C: C8240300
  v_interp_p2_f32  v6, v1, attr0.x                      // 000000000040: C8190001
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000044: C81D0101
  v_interp_p2_f32  v8, v1, attr0.z                      // 000000000048: C8210201
  v_interp_p2_f32  v9, v1, attr0.w                      // 00000000004C: C8250301
  s_waitcnt     vmcnt(0)                                // 000000000050: BF8C0F70
  v_mul_legacy_f32  v2, v2, v6                          // 000000000054: 0E040D02
  v_mul_legacy_f32  v3, v3, v7                          // 000000000058: 0E060F03
  v_mul_legacy_f32  v4, v4, v8                          // 00000000005C: 0E081104
  v_mul_legacy_f32  v5, v5, v9                          // 000000000060: 0E0A1305
  v_interp_p1_f32  v0, v0, attr1.w                      // 000000000064: C8000700
  s_waitcnt     lgkmcnt(0)                              // 000000000068: BF8C007F
  v_mad_legacy_f32  v6, s0, v5, -v2                     // 00000000006C: D2800006 840A0A00
  v_mad_legacy_f32  v7, s1, v5, -v3                     // 000000000074: D2800007 840E0A01
  v_mad_legacy_f32  v8, s2, v5, -v4                     // 00000000007C: D2800008 84120A02
  v_interp_p2_f32  v0, v1, attr1.w                      // 000000000084: C8010701
  v_mac_f32     v2, v0, v6                              // 000000000088: 3E040D00
  v_mac_f32     v3, v0, v7                              // 00000000008C: 3E060F00
  v_mac_f32     v4, v0, v8                              // 000000000090: 3E081100
  s_mov_b64     exec, s[20:21]                          // 000000000094: BEFE0414
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000098: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000009C: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000A0: F8001C0F 00000100
  s_endpgm                                              // 0000000000A8: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   10
//  NumSRegs:                   24
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   82
//  CycleSimNWaves:             82
//  Code Size:                  172
//Assembler Counts:
//  num_32bit_ops                     : 33
//  num_64bit_ops                     : 5
//  num_alu                           : 26
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 9
//  num_inst_vop3                     : 3
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 14
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 10
// m_uNumSRegs                       : 24
// m_uSCCodeSize                     : 172
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 82
// m_uCycleSimNWaves                 : 82

// Assembler Counts:
// num_32bit_ops                     : 33
// num_64bit_ops                     : 5
// num_alu                           : 26
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 9
// num_inst_vop3                     : 3
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 14
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE BasicEffect_PSBasicTx[] =
{
     68,  88,  66,  67,  79,  69, 
     69,  78, 253,  83, 224,  41, 
    177,   4, 187, 247, 159,  22, 
    253,  30,   1,   0,   0,   0, 
     22,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    156,   0,   0,   0, 208,   0, 
      0,   0, 172,   4,   0,   0, 
    188,   4,   0,   0,  73,  83, 
     71,  78,  96,   0,   0,   0, 
      3,   0,   0,   0,   8,   0, 
      0,   0,  80,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  80,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   8, 
      0,   0,  86,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 212,   3,   0,   0, 
     80,   0,   0,   0, 245,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  77,   0, 
      0,   0,  80,   0,   0,   0, 
     72,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  26,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      0,   0,   0,   0,  98,  16, 
      0,   3, 130,  16,  16,   0, 
      1,   0,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      2,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  16,  16,   0, 
      2,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  11, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   0,   0, 
      0,   0,  13,   0,   0,   0, 
    246,  15,  16,   0,   0,   0, 
      0,   0,  70,   2,  16, 128, 
     65,   0,   0,   0,   0,   0, 
      0,   0,  50,   0,   0,   9, 
    114,  32,  16,   0,   0,   0, 
      0,   0, 246,  31,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    168,   0,   0,   0,  23,   0, 
      1,   0,  41, 227,  15,   0, 
    120,   1, 237,  87,  61, 111, 
     19,  65,  16, 157,  61,  95, 
    236, 243,  37, 190, 139, 129, 
     34,  65,  70, 114,  68, 248, 
    168,  16,   5,  21,  72,  22, 
     24,  35, 144,  82,  16,  97, 
     23,  86, 116, 202, 135, 191, 
     20,  75, 128,  45, 219,  66, 
    169, 140, 145, 220, 145, 130, 
     34,   5,  63,   0,  81, 229, 
     55, 216,  64, 195, 210,  33, 
    254,   0,   5,  77, 232,  40, 
     83, 160, 192, 188, 243, 110, 
    114,   1, 210, 157,   4,  18, 
    247, 164, 183, 179, 239, 118, 
    118, 110, 246, 118,  79, 154, 
    253, 226, 146, 143, 215, 173, 
     75,  14, 172, 247, 252, 243, 
    108,  86,  16,  77, 113, 159, 
    141, 111, 129, 151,  41, 180, 
     68,  59, 190,  23, 209, 101, 
     52, 112,  48, 136, 108,  54, 
    115, 204,  93, 230,  77,  38, 
    198,  52,  25, 249,  70, 195, 
    202, 163, 147, 102, 194, 247, 
    129, 226,   2,  19, 241, 207, 
     50, 241,  28, 225,   0, 109, 
      1,  19,  13,  67, 219,  32, 
    146, 204,  24,  19,  64,  90, 
    156, 138,  15, 216,  96,  12, 
    170, 163, 249,  51,  46,  50, 
    241, 238, 147, 128, 220, 116, 
     44,  88, 237, 139, 245, 254, 
    109,  76, 242,  58, 106,  65, 
    189,  79,   0, 246,  35,   8, 
    124,  35, 248,   0,   5,   8, 
    134, 254, 126, 101, 165, 177, 
     62, 172, 237,  13, 243,  36, 
    252,  96, 204, 162,  19, 128, 
    214, 136,  23, 167, 201, 161, 
    138,  11, 142, 100, 177,  53, 
    206,  31,  57, 252,   7, 208, 
    103,  21, 223,   2, 103,  17, 
     75,  87, 191, 153,  15,  61, 
    142, 179,  71,  52,  24, 131, 
     47, 230, 104,  31,  74, 107, 
    254, 116, 251, 152, 171, 117, 
     12,  26,   1, 131, 154, 127, 
     30,  35,  65, 171, 230, 180, 
    177, 234, 102, 120,  62, 111, 
     46, 107, 143, 181,  23, 208, 
     43, 172,  87,   2, 122, 157, 
    245, 122,  64,  87,  88,  87, 
    180, 214, 241,  93, 255, 125, 
    230,  20, 246, 154,  31, 246, 
    255, 101,  70,  57, 134, 195, 
     40, 199, 112,  24, 229,  24, 
     14, 163,  28, 195,  97, 148, 
     99,  56, 140, 114,  12, 135, 
     81, 142, 161, 145, 250, 230, 
    206, 168, 111,  31, 140,  72, 
     24, 111, 141, 216, 247,  17, 
     89, 150, 164, 228, 140,  20, 
     86,  82, 138, 100,  74,  62, 
    165, 237,  49, 185, 131, 111, 
    134, 177,  65, 215, 210, 131, 
    119,  92, 221,  75,  18,  25, 
     73,  70,  86,  82, 108,  81, 
     10, 154, 151,  66, 156, 147, 
    194,  88, 144,  34, 118,  65, 
    182, 221, 237, 177, 145,  50, 
    157, 152,  27, 119, 204, 180, 
    229,  76, 157, 182,  29,  74, 
    144,  31,  39,  78, 131,  79, 
    100, 219, 195,   4,  91,  97, 
     59,  67, 139, 173,  97, 159, 
     26, 138, 132, 144, 148,  50, 
    115, 228, 198, 115, 148, 182, 
    114, 103, 204, 131,  17, 215, 
    149, 199, 234,  82, 162, 103, 
    227, 121, 216,  73,  81, 123, 
     28, 150, 239, 112,   8,  95, 
    153,   2,  87, 135,  67, 248, 
    211, 248, 217,  12, 172, 194, 
     71, 117, 103, 217,  85, 118, 
    145, 137,  59, 161, 240,  43, 
    239, 201, 221, 205, 228, 219, 
      8, 112,  35, 243, 181, 186, 
    247, 158,  62, 160,  15,  88, 
    170,  32, 223,  83, 115, 179, 
    204,  96, 108, 162,  87, 104, 
    126, 195,  85,  53,  47, 171, 
     44, 106, 123, 212, 243, 142, 
    190,  41, 171, 120, 203, 106, 
    252, 158, 178,  88, 203,  52, 
    243, 215,  60,  54, 213, 120, 
    145, 137,  76,  11, 215, 189, 
     91, 165, 187,  94, 183, 183, 
     86, 171,  63, 241, 150, 154, 
    189, 174,  87, 104, 118, 234, 
    213,  94, 185, 180, 228, 117, 
     59,  85, 175, 184, 185,  81, 
    171, 119, 186, 222, 237, 214, 
    163, 118, 243,  97, 189, 230, 
    149,  43, 173, 173, 251, 143, 
    235, 249, 141, 110, 179, 122, 
    167, 209,  96, 215, 181, 229, 
    162, 175,  74,  91,  87, 218, 
    181,  10, 253,   4,  63, 170, 
    231, 190,  88,  72,  83,  72, 
      8,   0,   0,   0,  59,  28, 
    233,  99, 232, 199,   0, 201, 
     88,  80,  68,  80,  82,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  66, 
     97, 115, 105,  99,  69, 102, 
    102, 101,  99, 116,  95,  80, 
     83,  66,  97, 115, 105,  99, 
     84, 120,  46, 112, 100,  98
};
