#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[288]
// Embedded Data:
//  0x00000120 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000011b - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_output o0.xyzw
dcl_temps 3
dp3 r0.x, v2.xyzx, v2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v2.xyzx
dp3 r1.x, -cb0[4].xyzx, r0.xyzx
dp3 r1.y, -cb0[5].xyzx, r0.xyzx
dp3 r1.z, -cb0[6].xyzx, r0.xyzx
ge r2.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
and r2.xyz, r2.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r1.xyz, r1.xyzx, r2.xyzx
mul r2.xyz, r1.yyyy, cb0[8].xyzx
mad r1.xyw, r1.xxxx, cb0[7].xyxz, r2.xyxz
mad r1.xyz, r1.zzzz, cb0[9].xyzx, r1.xywx
mad r1.xyz, r1.xyzx, cb0[2].xyzx, cb0[3].xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v0.xyxx, t0.xyzw, s0
mul r2.xyzw, r2.xyzw, v3.xyzw
mul r1.xyz, r1.xyzx, r2.xyzx
add r2.xyz, -v1.xyzx, cb0[10].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, -r2.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r0.xyz, r0.xyzx, -r0.wwww, -r2.xyzx
sample_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t1.xyzw, s1
mad r0.xyz, r0.xyzx, r2.wwww, -r1.xyzx
mad r0.xyz, cb0[1].xxxx, r0.xyzx, r1.xyzx
mul r0.w, r2.w, r0.w
mov o0.w, r2.w
mad o0.xyz, cb0[0].xyzx, r0.wwww, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[288], bundle is:[270] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneEnvironmentMapEffect_PSEnvMapPixelLightingNoFog.pdb
// Shader Semantic Hash      : 0x3dca78c52a703a56
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask  3, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  7, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  7, param2, paramSlot2, DefaultVal={0,0,0,0}
;   [3] generic,  usageIdx 3, channelMask 15, param3, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 660 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 5;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
;  extUserElements 1[4] = IMM_CONST_BUFFER 0, offset 0x18:27 dwords
NumVgprs             = 20;
NumSgprs             = 36;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000004
SPIC:NUM_INTERP             = 4
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

dx9TexCubeMask           = 0x00000002

; export table for mrt0 [patch@(bytes=0x280, dwords=0xA0)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v0, off, off done vm          // 000000000008: F8001803 00000001
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000004: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v3, v0                      // 000000000004: 5C000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v3, v0                      // 000000000004: 5A000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v3, v0                          // 000000000004: 60000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v3, v0                          // 000000000004: 62000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v3, v0 done vm            // 000000000008: F800180F 00030201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[32:33], exec                          // 000000000000: BEA0047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx4  s[4:7], s[0:1], 0x18                  // 000000000008: C0820118
  s_waitcnt     lgkmcnt(0)                              // 00000000000C: BF8C007F
  s_buffer_load_dwordx4  s[8:11], s[4:7], 0x28          // 000000000010: C2840528
  s_mov_b32     m0, s2                                  // 000000000014: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.z                      // 000000000018: C8080600
  v_interp_p1_f32  v3, v0, attr2.z                      // 00000000001C: C80C0A00
  v_interp_p1_f32  v4, v0, attr1.y                      // 000000000020: C8100500
  v_interp_p2_f32  v2, v1, attr1.z                      // 000000000024: C8090601
  v_interp_p1_f32  v5, v0, attr2.y                      // 000000000028: C8140900
  v_interp_p2_f32  v3, v1, attr2.z                      // 00000000002C: C80D0A01
  v_interp_p1_f32  v6, v0, attr1.x                      // 000000000030: C8180400
  v_interp_p2_f32  v4, v1, attr1.y                      // 000000000034: C8110501
  s_waitcnt     lgkmcnt(0)                              // 000000000038: BF8C007F
  v_sub_f32     v2, s10, v2                             // 00000000003C: 0804040A
  v_interp_p1_f32  v7, v0, attr2.x                      // 000000000040: C81C0800
  v_interp_p2_f32  v5, v1, attr2.y                      // 000000000044: C8150901
  v_mul_legacy_f32  v8, v3, v3                          // 000000000048: 0E100703
  v_interp_p2_f32  v6, v1, attr1.x                      // 00000000004C: C8190401
  v_sub_f32     v4, s9, v4                              // 000000000050: 08080809
  v_mul_legacy_f32  v9, v2, v2                          // 000000000054: 0E120502
  v_interp_p2_f32  v7, v1, attr2.x                      // 000000000058: C81D0801
  v_mac_f32     v8, v5, v5                              // 00000000005C: 3E100B05
  v_sub_f32     v6, s8, v6                              // 000000000060: 080C0C08
  v_mac_f32     v9, v4, v4                              // 000000000064: 3E120904
  v_mac_f32     v8, v7, v7                              // 000000000068: 3E100F07
  v_mac_f32     v9, v6, v6                              // 00000000006C: 3E120D06
  v_rsq_f32     v8, v8                                  // 000000000070: 7E105D08
  v_rsq_f32     v9, v9                                  // 000000000074: 7E125D09
  v_mul_legacy_f32  v3, v3, v8                          // 000000000078: 0E061103
  v_mul_legacy_f32  v2, v2, v9                          // 00000000007C: 0E041302
  v_mul_legacy_f32  v5, v5, v8                          // 000000000080: 0E0A1105
  v_mul_legacy_f32  v4, v4, v9                          // 000000000084: 0E081304
  v_mul_legacy_f32  v10, v3, -v2                        // 000000000088: D20E000A 40020503
  s_load_dwordx8  s[8:15], s[0:1], 0x00                 // 000000000090: C0C40100
  s_load_dwordx16  s[16:31], s[0:1], 0x08               // 000000000094: C1080108
  v_mul_legacy_f32  v7, v7, v8                          // 000000000098: 0E0E1107
  v_mul_legacy_f32  v6, v6, v9                          // 00000000009C: 0E0C1306
  v_mad_legacy_f32  v10, -v4, v5, v10                   // 0000000000A0: D280000A 242A0B04
  v_mad_legacy_f32  v10, -v6, v7, v10 mul:2             // 0000000000A8: D280000A 2C2A0F06
  v_interp_p1_f32  v8, v0, attr0.x                      // 0000000000B0: C8200000
  v_interp_p1_f32  v9, v0, attr0.y                      // 0000000000B4: C8240100
  v_mad_legacy_f32  v6, v7, -v10, -v6                   // 0000000000B8: D2800006 C41A1507
  v_mad_legacy_f32  v4, v5, -v10, -v4                   // 0000000000C0: D2800004 C4121505
  v_mad_legacy_f32  v2, v3, -v10, -v2                   // 0000000000C8: D2800002 C40A1503
  v_interp_p2_f32  v8, v1, attr0.x                      // 0000000000D0: C8210001
  v_interp_p2_f32  v9, v1, attr0.y                      // 0000000000D4: C8250101
  v_cubema_f32  v10, v6, v4, v2                         // 0000000000D8: D28E000A 040A0906
  v_cubetc_f32  v11, v6, v4, v2                         // 0000000000E0: D28C000B 040A0906
  v_cubesc_f32  v12, v6, v4, v2                         // 0000000000E8: D28A000C 040A0906
  v_rcp_f32     v10, abs(v10)                           // 0000000000F0: D354010A 0000010A
  s_waitcnt     lgkmcnt(0)                              // 0000000000F8: BF8C007F
  image_sample  v[13:16], v[8:9], s[8:15], s[24:27] dmask:0xf // 0000000000FC: F0800F00 00C20D08
  v_cubeid_f32  v19, v6, v4, v2                         // 000000000104: D2880013 040A0906
  v_madak_f32   v18, v11, v10, 0x3fc00000               // 00000000010C: 4224150B 3FC00000
  v_madak_f32   v17, v12, v10, 0x3fc00000               // 000000000114: 4222150C 3FC00000
  image_sample  v[8:11], v[17:18], s[16:23], s[28:31] dmask:0xf // 00000000011C: F0800F00 00E40811
  s_buffer_load_dwordx4  s[0:3], s[4:7], 0x14           // 000000000124: C2800514
  s_buffer_load_dwordx4  s[8:11], s[4:7], 0x10          // 000000000128: C2840510
  s_buffer_load_dwordx4  s[12:15], s[4:7], 0x18         // 00000000012C: C2860518
  s_buffer_load_dwordx4  s[16:19], s[4:7], 0x20         // 000000000130: C2880520
  s_waitcnt     lgkmcnt(0)                              // 000000000134: BF8C007F
  v_mul_legacy_f32  v2, v3, -s2                         // 000000000138: D20E0002 40000503
  s_buffer_load_dwordx4  s[20:23], s[4:7], 0x1c         // 000000000140: C28A051C
  v_mul_legacy_f32  v4, v3, -s10                        // 000000000144: D20E0004 40001503
  v_mad_legacy_f32  v2, -s1, v5, v2                     // 00000000014C: D2800002 240A0A01
  s_buffer_load_dwordx4  s[24:27], s[4:7], 0x0c         // 000000000154: C28C050C
  s_buffer_load_dwordx4  s[28:31], s[4:7], 0x24         // 000000000158: C28E0524
  v_mad_legacy_f32  v4, -s9, v5, v4                     // 00000000015C: D2800004 24120A09
  v_mad_legacy_f32  v2, -s0, v7, v2                     // 000000000164: D2800002 240A0E00
  v_mul_legacy_f32  v3, v3, -s14                        // 00000000016C: D20E0003 40001D03
  s_buffer_load_dwordx4  s[0:3], s[4:7], 0x08           // 000000000174: C2800508
  v_mad_legacy_f32  v4, -s8, v7, v4                     // 000000000178: D2800004 24120E08
  v_mad_legacy_f32  v3, -s13, v5, v3                    // 000000000180: D2800003 240E0A0D
  v_cmp_ge_f32  s[8:9], v2, 0                           // 000000000188: D00C0008 00010102
  v_mad_legacy_f32  v3, -s12, v7, v3                    // 000000000190: D2800003 240E0E0C
  v_cmp_le_f32  vcc, 0, v4                              // 000000000198: 7C060880
  v_cndmask_b32  v2, 0, v2, s[8:9]                      // 00000000019C: D2000002 00220480
  v_cmp_ge_f32  s[8:9], v3, 0                           // 0000000001A4: D00C0008 00010103
  v_cndmask_b32  v4, 0, v4, vcc                         // 0000000001AC: 00080880
  v_mul_legacy_f32  v5, s16, v2                         // 0000000001B0: 0E0A0410
  v_mul_legacy_f32  v6, s17, v2                         // 0000000001B4: 0E0C0411
  v_mul_legacy_f32  v2, s18, v2                         // 0000000001B8: 0E040412
  s_waitcnt     lgkmcnt(0)                              // 0000000001BC: BF8C007F
  s_buffer_load_dword  s3, s[4:7], 0x04                 // 0000000001C0: C2018504
  v_cndmask_b32  v3, 0, v3, s[8:9]                      // 0000000001C4: D2000003 00220680
  v_mac_f32     v5, s20, v4                             // 0000000001CC: 3E0A0814
  v_mac_f32     v6, s21, v4                             // 0000000001D0: 3E0C0815
  v_mac_f32     v2, s22, v4                             // 0000000001D4: 3E040816
  v_interp_p1_f32  v4, v0, attr3.x                      // 0000000001D8: C8100C00
  v_interp_p1_f32  v7, v0, attr3.y                      // 0000000001DC: C81C0D00
  v_interp_p1_f32  v12, v0, attr3.z                     // 0000000001E0: C8300E00
  s_buffer_load_dwordx4  s[4:7], s[4:7], 0x00           // 0000000001E4: C2820500
  v_mac_f32     v5, s28, v3                             // 0000000001E8: 3E0A061C
  v_mac_f32     v6, s29, v3                             // 0000000001EC: 3E0C061D
  v_mac_f32     v2, s30, v3                             // 0000000001F0: 3E04061E
  v_mov_b32     v3, s24                                 // 0000000001F4: 7E060218
  v_mov_b32     v17, s25                                // 0000000001F8: 7E220219
  v_mov_b32     v18, s26                                // 0000000001FC: 7E24021A
  v_interp_p2_f32  v4, v1, attr3.x                      // 000000000200: C8110C01
  v_interp_p2_f32  v7, v1, attr3.y                      // 000000000204: C81D0D01
  v_interp_p2_f32  v12, v1, attr3.z                     // 000000000208: C8310E01
  v_interp_p1_f32  v0, v0, attr3.w                      // 00000000020C: C8000F00
  v_mac_f32     v3, s0, v5                              // 000000000210: 3E060A00
  v_mac_f32     v17, s1, v6                             // 000000000214: 3E220C01
  v_mac_f32     v18, s2, v2                             // 000000000218: 3E240402
  v_interp_p2_f32  v0, v1, attr3.w                      // 00000000021C: C8010F01
  s_waitcnt     vmcnt(1)                                // 000000000220: BF8C0F71
  v_mul_legacy_f32  v1, v13, v4                         // 000000000224: 0E02090D
  v_mul_legacy_f32  v2, v14, v7                         // 000000000228: 0E040F0E
  v_mul_legacy_f32  v4, v15, v12                        // 00000000022C: 0E08190F
  v_mul_legacy_f32  v0, v16, v0                         // 000000000230: 0E000110
  v_mul_legacy_f32  v1, v3, v1                          // 000000000234: 0E020303
  v_mul_legacy_f32  v2, v17, v2                         // 000000000238: 0E040511
  v_mul_legacy_f32  v3, v18, v4                         // 00000000023C: 0E060912
  s_waitcnt     vmcnt(0)                                // 000000000240: BF8C0F70
  v_mad_legacy_f32  v4, v8, v0, -v1                     // 000000000244: D2800004 84060108
  v_mad_legacy_f32  v5, v9, v0, -v2                     // 00000000024C: D2800005 840A0109
  v_mad_legacy_f32  v6, v10, v0, -v3                    // 000000000254: D2800006 840E010A
  s_waitcnt     lgkmcnt(0)                              // 00000000025C: BF8C007F
  v_mac_f32     v1, s3, v4                              // 000000000260: 3E020803
  v_mac_f32     v2, s3, v5                              // 000000000264: 3E040A03
  v_mac_f32     v3, s3, v6                              // 000000000268: 3E060C03
  v_mul_legacy_f32  v4, v0, v11                         // 00000000026C: 0E081700
  v_mac_f32     v1, s4, v4                              // 000000000270: 3E020804
  v_mac_f32     v2, s5, v4                              // 000000000274: 3E040805
  v_mac_f32     v3, s6, v4                              // 000000000278: 3E060806
  s_mov_b64     exec, s[32:33]                          // 00000000027C: BEFE0420
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000280: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000284: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000288: F8001C0F 00000001
  s_endpgm                                              // 000000000290: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   20
//  NumSRegs:                   36
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   119
//  CycleSimNWaves:             119
//  Code Size:                  660
//Assembler Counts:
//  num_32bit_ops                     : 103
//  num_64bit_ops                     : 30
//  num_alu                           : 103
//  num_fc                            : 27
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 9
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 5
//  num_inst_vop2                     : 46
//  num_inst_vop3                     : 12
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 24
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 2
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 20
// m_uNumSRegs                       : 36
// m_uSCCodeSize                     : 660
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 119
// m_uCycleSimNWaves                 : 119

// Assembler Counts:
// num_32bit_ops                     : 103
// num_64bit_ops                     : 30
// num_alu                           : 103
// num_fc                            : 27
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 9
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 5
// num_inst_vop2                     : 46
// num_inst_vop3                     : 12
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 24
// num_inst_smem                     : 14
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 2
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE EnvironmentMapEffect_PSEnvMapPixelLightingNoFog[] =
{
     68,  88,  66,  67,  25, 143, 
    208, 218,  54,  60, 186, 194, 
      0, 212, 171, 230, 253, 142, 
     29, 132,   1,   0,   0,   0, 
     52,  10,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0, 176,   9,   0,   0, 
    192,   9,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,   3,   3, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   7, 
      0,   0, 104,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   7,   7, 
      0,   0, 113,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,  15,  15, 
      0,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0,  67, 
     79,  76,  79,  82,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 192,   8,   0,   0, 
     80,   0,   0,   0,  48,   2, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  32,   1, 
      0,   0,  80,   0,   0,   0, 
     27,   1,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  24,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  88,  48, 
      0,   4,   0, 112,  16,   0, 
      1,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      3,   0,   0,   0,  16,   0, 
      0,   7,  18,   0,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16,   0,   2,   0,   0,   0, 
     70,  18,  16,   0,   2,   0, 
      0,   0,  68,   0,   0,   5, 
     18,   0,  16,   0,   0,   0, 
      0,   0,  10,   0,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 114,   0,  16,   0, 
      0,   0,   0,   0,   6,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   2,   0, 
      0,   0,  16,   0,   0,   9, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  70, 130,  32, 128, 
     65,   0,   0,   0,   0,   0, 
      0,   0,   4,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  16,   0,   0,   9, 
     34,   0,  16,   0,   1,   0, 
      0,   0,  70, 130,  32, 128, 
     65,   0,   0,   0,   0,   0, 
      0,   0,   5,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  16,   0,   0,   9, 
     66,   0,  16,   0,   1,   0, 
      0,   0,  70, 130,  32, 128, 
     65,   0,   0,   0,   0,   0, 
      0,   0,   6,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  29,   0,   0,  10, 
    114,   0,  16,   0,   2,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,   2,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      1,   0,   0,  10, 114,   0, 
     16,   0,   2,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0, 128,  63, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,  56,   0,   0,   8, 
    114,   0,  16,   0,   2,   0, 
      0,   0,  86,   5,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
      8,   0,   0,   0,  50,   0, 
      0,  10, 178,   0,  16,   0, 
      1,   0,   0,   0,   6,   0, 
     16,   0,   1,   0,   0,   0, 
     70, 136,  32,   0,   0,   0, 
      0,   0,   7,   0,   0,   0, 
     70,   8,  16,   0,   2,   0, 
      0,   0,  50,   0,   0,  10, 
    114,   0,  16,   0,   1,   0, 
      0,   0, 166,  10,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
      9,   0,   0,   0,  70,   3, 
     16,   0,   1,   0,   0,   0, 
     50,   0,   0,  11, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   2,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      2,   0,   0,   0,  70,  16, 
     16,   0,   0,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 242,   0,  16,   0, 
      2,   0,   0,   0,  70,  14, 
     16,   0,   2,   0,   0,   0, 
     70,  30,  16,   0,   3,   0, 
      0,   0,  56,   0,   0,   7, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   2,   0,   0,   0, 
      0,   0,   0,   9, 114,   0, 
     16,   0,   2,   0,   0,   0, 
     70,  18,  16, 128,  65,   0, 
      0,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   0,   0, 
      0,   0,  10,   0,   0,   0, 
     16,   0,   0,   7, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,  70,   2,  16,   0, 
      2,   0,   0,   0,  68,   0, 
      0,   5, 130,   0,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,   7, 114,   0, 
     16,   0,   2,   0,   0,   0, 
    246,  15,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      2,   0,   0,   0,  16,   0, 
      0,   8, 130,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      2,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      0,   0,   0,   7, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  50,   0, 
      0,  11, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
    246,  15,  16, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
     70,   2,  16, 128,  65,   0, 
      0,   0,   2,   0,   0,   0, 
     69,   0,   0, 139, 130,   1, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  70, 126, 
     16,   0,   1,   0,   0,   0, 
      0,  96,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0, 246,  15, 
     16,   0,   2,   0,   0,   0, 
     70,   2,  16, 128,  65,   0, 
      0,   0,   1,   0,   0,   0, 
     50,   0,   0,  10, 114,   0, 
     16,   0,   0,   0,   0,   0, 
      6, 128,  32,   0,   0,   0, 
      0,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   7, 130,   0,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   2,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      2,   0,   0,   0,  50,   0, 
      0,  10, 114,  32,  16,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0,  16,   1, 
      0,   0,  23,   0,   1,   0, 
     41,  13,  18,   0, 120,   1, 
    237,  88, 207, 111,  19,  71, 
     20, 126, 179,  59,  59, 153, 
     29, 175, 199, 246,  38,  46, 
     14, 117,  80,  26, 109,  85, 
     20,  33,  68, 197,  13, 169, 
    139,  75, 161,  61, 208,  31, 
     72,  68,  85,  68,  13, 132, 
     16,  19,  44,  37, 182, 155, 
     88,  52, 135, 202, 221, 162, 
     80,  33,  20, 161,  30, 170, 
    170,  71,  14, 252,  25,  85, 
    146,  90, 169,  52, 234,   9, 
    185, 199,  94,  56, 160,  30, 
    122,  42,  55,  14, 136, 246, 
    189, 245, 110, 106, 104, 185, 
     89, 106,  85, 249, 147, 190, 
    121, 243, 205,  47, 127, 179, 
    111,  15, 126, 155, 245,  33, 
    198,  47, 143, 252,  79,  40, 
    110, 125, 203,  31, 175, 112, 
      0,   7, 251,  12,  73, 145, 
    240,  93, 150,  90, 128, 251, 
    121, 106,   1,  14,  83,  67, 
     11,  44, 128,   9,  12,   1, 
    242,  27, 236,  87,  48, 210, 
     92,  74, 128,  95,  79,  29, 
     63, 254, 219,  41, 234,  77, 
     35, 105, 237, 103,   9, 151, 
    145, 135, 146, 248,  42, 146, 
    142,  35, 224,  49, 251, 112, 
    169,  65, 160, 165, 231,  64, 
    190, 142,  34,  61,  36, 237, 
     43,  33,  53, 146,  96,  35, 
      7, 207, 128,  26,  53, 255, 
    140,  91,  72, 242, 244,  50, 
    144, 183, 244,  44, 250,  29, 
    242,  73, 160, 251, 254, 219, 
     32,  63, 105,  75, 119, 166, 
     94, 154,  39,   2, 229,  99, 
     16, 244, 124, 250, 171,   1, 
    142,  36, 121,  76, 243,  91, 
     73,  52,  61,  11, 186, 219, 
     46, 242, 101, 248,   3,  81, 
    166, 206,   0,  82,  77, 121, 
     18, 177,  27, 140, 236,   0, 
    128, 196, 104, 189,   1, 128, 
    231,  11, 251, 100,  63,  81, 
    255, 115, 164, 239,  42,  69, 
     74,   1,  61, 218,  28,  50, 
     69,  58, 127, 143,  26, 136, 
    118, 136,  95, 151, 224,   9, 
    169,  84,  51, 212, 253,  92, 
    245, 181,  77,  58, 206, 231, 
    128,  70, 197,  28, 235, 146, 
    205, 224,  82, 174, 188, 175, 
    171, 168, 171,   3, 250,   2, 
    234,  11,   3, 122,   1, 245, 
    194, 128,  94,  68, 189, 152, 
    234, 244, 252,  92, 252, 123, 
    118, 156, 107,  28, 236, 252, 
    151,  57, 242,  56,  28, 142, 
     60,  14, 135,  35, 143, 195, 
    225, 200, 227, 112,  56, 242, 
     56,  28, 142,  60,  14, 135, 
     35, 143, 195,  33, 253,  29, 
    236, 240, 123, 219,  29, 245, 
    108, 187, 196, 110, 238, 126, 
      1,  91,  59, 135, 157, 205, 
    174, 101,  63, 221,   6,  33, 
     13,  40, 207, 128, 147,  55, 
     76, 184,   6, 220,   9, 195, 
     84, 214,   0,  47,  25, 230, 
     20,  12, 173,  85, 156,  75, 
    144, 101, 195, 220, 162, 177, 
    199, 242, 154, 241,  73, 227, 
     74,  41,  45, 199, 215,  76, 
     78,  25,  39, 147,  15, 165, 
    231,  73, 238, 250, 225,  88, 
     46,  31, 138, 172,  31, 202, 
    139, 249, 142, 123, 209, 239, 
    216,   5, 161, 173, 113, 174, 
    157, 130, 210, 124,  92, 106, 
      5, 186, 103,  59,  86,   5, 
    216, 222, 174, 100, 242, 135, 
    177, 130, 214,  98, 220, 195, 
    241, 168, 199,  51, 179,   1, 
     69, 145, 155,  61, 130,  85, 
    160,   1,  22,  24, 129, 122, 
    172, 120, 112, 143,  99, 116, 
    138, 254, 158, 133, 209,  46, 
    170,  61,   6, 175,  25, 198, 
     94,  55,  10, 238, 246, 132, 
    171, 120,   6, 182, 226, 232, 
    193, 157,  56,  42,  54, 247, 
    179, 194,  63, 170, 228,  31, 
    114, 209, 239,  50, 219, 133, 
    113, 184,  29, 207, 101, 138, 
      1, 214, 153, 187,  39, 189, 
    226,  76,  28, 105, 190,  32, 
     31, 193, 132,  19, 117, 243, 
    248,  92,  74, 206,  87, 221, 
    105, 231, 118, 151, 246,  90, 
    177,  95, 168, 148, 157,  59, 
     93,  78, 253,  34,  84, 200, 
      3,  83,  42, 240, 156, 173, 
    110, 224, 220, 197, 241, 168, 
    231,  42,  63, 160, 113, 208, 
     42, 176, 105, 221,  20,  84, 
     36, 158,  71, 115,  82, 251, 
     56,  22, 245, 178,  74,   7, 
     18, 188,   7,  22,  99,  88, 
    249,  68,  61,  79, 235,  32, 
    146, 226, 115, 204,  79,  47, 
    226,  51,  88,   2, 121,  15, 
    108, 156, 139, 164, 132,  60, 
     87, 186, 192,  61, 237, 115, 
    174, 201,   7, 191, 197, 186, 
     88,  45, 245,  34,  49,   3, 
     19,  82, 133,  69, 233, 133, 
    175,  72,  30, 130, 151,  55, 
    144,  45,  27, 208, 199,  48, 
    135,  55, 187, 101, 161, 194, 
     41, 225, 133, 135,   4,  15, 
     75, 150, 232,  76,  90,  51, 
    157, 131,  86, 208,  97,  94, 
    193, 176, 236, 148,  97, 250, 
     77, 131,  69,   6, 230,  92, 
    132, 204, 155,   9,  45,  30, 
    132,  44, 199, 204, 167, 185, 
    173, 157, 172, 107, 105, 157, 
    227,  58,  55,  41, 117, 158, 
    129, 182, 109,  75,  23,  28, 
    174, 125,  87, 232,  22, 206, 
    199, 119,  97,  98, 211, 193, 
    232,  50, 181,  73, 185,  81, 
     76, 111, 146,  63,  91,  90, 
    161, 173, 120, 104, 123,  34, 
    132,   3,  82, 115, 212,  14, 
    250,  19,  82, 132, 211, 252, 
    217,  54, 214,  15, 207, 213, 
     31,   0,  95, 238,  76,  82, 
    135,  94, 206,  23,  33, 251, 
     43, 246,  65,  18, 199, 176, 
     68, 220,  71, 188, 130, 179, 
    184, 102,  74, 129, 143,  46, 
     30,  27, 172, 211, 227, 227, 
    113, 108, 176, 156, 124, 152, 
    108, 250,  62, 137,  84, 199, 
    210, 247,   3, 202,  10, 129, 
    214, 114, 172,  78,   9,  31, 
    159, 104, 205, 254, 184, 241, 
    211,  91, 212,  39, 148,  10, 
    212,   2,  60,  73, 246, 210, 
    183,  10, 250, 182, 240,  23, 
    238,  83, 243,  55,  84, 146, 
    125, 199, 146,  72, 219, 169, 
    190, 211, 105, 101, 157, 124, 
    148,  88,  72, 230, 231, 147, 
     72, 119, 206,  32,  95, 244, 
    177, 145, 204, 175,  34, 201, 
    233, 233,  19, 213, 183, 231, 
    222, 171, 174, 183,  47,  47, 
    213, 110,  84, 207, 214, 219, 
    235, 213, 211, 245, 181, 218, 
    213, 246, 252, 220, 217, 234, 
    250, 218, 213, 234, 249, 235, 
     87, 150, 106, 107, 235, 213, 
    119, 154, 171, 173, 250,  74, 
    109, 169,  58, 191, 216, 220, 
    248, 168,  81,  59, 211, 184, 
     81,  95, 107,  54,  86, 107, 
    141, 246,   7,  87,  90, 103, 
    174,  93, 195,  61, 151, 207, 
    157, 199,  97, 148, 231, 234, 
     27, 181, 149, 247, 235, 203, 
    215, 219, 245, 198, 242, 135, 
    205, 119, 155, 203,  71,  91, 
     75, 139, 240,  39, 162,  38, 
     82, 225,  88,  72,  83,  72, 
      8,   0,   0,   0,  86,  58, 
    112,  42, 197, 120, 202,  61, 
     88,  80,  68,  80, 108,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  69, 
    110, 118, 105, 114, 111, 110, 
    109, 101, 110, 116,  77,  97, 
    112,  69, 102, 102, 101,  99, 
    116,  95,  80,  83,  69, 110, 
    118,  77,  97, 112,  80, 105, 
    120, 101, 108,  76, 105, 103, 
    104, 116, 105, 110, 103,  78, 
    111,  70, 111, 103,  46, 112, 
    100,  98
};
