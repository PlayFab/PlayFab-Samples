#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[93]
// Embedded Data:
//  0x0000005d - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000058 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyz, r0.xyzx, cb0[0].xxxx
mad r0.xyz, r0.xyzx, cb0[0].xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o0.w, r0.w
div r0.xyz, r1.xyzx, r0.xyzx
log r0.xyz, |r0.xyzx|
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp o0.xyz, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[93], bundle is:[165] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PSReinhard_SRGB.pdb
// Shader Semantic Hash      : 0xb994bd4a7c54ca4a
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 192 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 7;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0xAC, dwords=0x2B)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000014: C8090001
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400002
  s_buffer_load_dword  s0, s[12:15], 0x00               // 00000000002C: C2000D00
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000030: BF8C0070
  v_mul_legacy_f32  v4, s0, v0                          // 000000000034: 0E080000
  v_mul_legacy_f32  v5, s0, v1                          // 000000000038: 0E0A0200
  v_mul_legacy_f32  v6, s0, v2                          // 00000000003C: 0E0C0400
  v_mad_f32     v0, v0, s0, 1.0                         // 000000000040: D2820000 03C80100
  v_mad_f32     v1, v1, s0, 1.0                         // 000000000048: D2820001 03C80101
  v_mad_f32     v2, v2, s0, 1.0                         // 000000000050: D2820002 03C80102
  v_rcp_f32     v0, v0                                  // 000000000058: 7E005500
  v_mul_f32     v0, v4, v0                              // 00000000005C: 10000104
  v_rcp_f32     v1, v1                                  // 000000000060: 7E025501
  v_mul_f32     v1, v5, v1                              // 000000000064: 10020305
  v_rcp_f32     v2, v2                                  // 000000000068: 7E045502
  v_mul_f32     v2, v6, v2                              // 00000000006C: 10040506
  v_log_f32     v0, abs(v0)                             // 000000000070: D34E0100 00000100
  v_log_f32     v1, abs(v1)                             // 000000000078: D34E0101 00000101
  v_log_f32     v2, abs(v2)                             // 000000000080: D34E0102 00000102
  s_mov_b32     s0, 0x3ee8ba2f                          // 000000000088: BE8003FF 3EE8BA2F
  v_mul_legacy_f32  v0, s0, v0                          // 000000000090: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 000000000094: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 000000000098: 0E040400
  v_exp_f32     v0, v0                                  // 00000000009C: 7E004B00
  v_exp_f32     v1, v1                                  // 0000000000A0: 7E024B01
  v_exp_f32     v2, v2                                  // 0000000000A4: 7E044B02
  s_mov_b64     exec, s[16:17]                          // 0000000000A8: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 0000000000AC: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 0000000000B0: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000B4: F8001C0F 00000100
  s_endpgm                                              // 0000000000BC: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   7
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   87
//  CycleSimNWaves:             87
//  Code Size:                  192
//Assembler Counts:
//  num_32bit_ops                     : 31
//  num_64bit_ops                     : 8
//  num_alu                           : 27
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 6
//  num_inst_vop2                     : 11
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 7
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 192
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 87
// m_uCycleSimNWaves                 : 87

// Assembler Counts:
// num_32bit_ops                     : 31
// num_64bit_ops                     : 8
// num_alu                           : 27
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 6
// num_inst_vop2                     : 11
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PSReinhard_SRGB[] =
{
     68,  88,  66,  67,  74, 202, 
     86, 178,  51, 230,  61, 127, 
     58, 150,  89,  55,  62, 209, 
    243,   8,   1,   0,   0,   0, 
     68,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 216,   4,   0,   0, 
    232,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  16,   4, 
      0,   0,  80,   0,   0,   0, 
      4,   1,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     93,   0,   0,   0,  80,   0, 
      0,   0,  88,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   2,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      6, 128,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     50,   0,   0,  13, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,   6, 128,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0, 128,  63, 
      0,   0,   0,   0,  54,   0, 
      0,   5, 130,  32,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     14,   0,   0,   7, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  47,   0, 
      0,   6, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16, 128, 129,   0,   0,   0, 
      0,   0,   0,   0,  56,   0, 
      0,  10, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      2,  64,   0,   0,  47, 186, 
    232,  62,  47, 186, 232,  62, 
     47, 186, 232,  62,   0,   0, 
      0,   0,  25,   0,   0,   5, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    167,   0,   0,   0,  23,   0, 
      1,   0,  41, 249,  15,   0, 
    120,   1, 237,  87,  77, 107, 
     19,  81,  20, 189, 239, 205, 
    164,  31, 177,  77, 178, 112, 
    161,  88, 208, 133, 160,  32, 
    232, 162, 174,  92, 136, 198, 
     64, 161, 193,  15, 154,   4, 
     67,  25, 154,  52, 205,  64, 
      3,  53,   9,  73,  17, 193, 
     50,  70, 215,  46, 186,  16, 
    252,  88, 187, 112, 225,  31, 
     80,  48, 173, 174, 130,  75, 
    221,  10, 110,  92, 184,  44, 
    174,  20,  66, 235,  57, 227, 
    155,  58,  86, 187,  27,  80, 
    112,  14, 156, 123, 230, 204, 
    155, 185, 115,  51, 119,   2, 
    247, 125,  75, 139, 143, 135, 
     95, 134,  91, 212, 222, 135, 
    231,  31, 171,  74,  36, 129, 
     99, 136, 175, 196, 163,  73, 
     70, 145, 103,  41,  70, 145, 
    147,  12, 188,  64, 139, 140, 
     66,  14, 130, 155, 224,   5, 
    144, 107,   1, 167, 167, 187, 
    217,  39, 143, 111, 103, 113, 
     40,  25,  48,   9,  94,  55, 
     60,  10, 142, 129,  71,  64, 
    158, 103,  58,  34,  80, 194, 
     98,   0, 130,  58,   2, 140, 
    128,   7, 192,   0,  54, 136, 
     82, 124,  80, 195,  57, 196, 
    101, 248,  51,  78, 128, 172, 
    127,  63, 176, 182,  32,  23, 
    149, 117,  18, 252, 189, 127, 
     27,  63, 234, 250,  25, 201, 
    160,  79,   4, 251,  17,   6, 
     91, 199, 107, 136, 178, 233, 
     99, 240, 126,  87, 140,  15, 
    247, 114,  63, 236,   0, 236, 
    101,  24, 129, 103, 254,  17, 
    133, 172, 108, 236, 127,  10, 
    126, 139,   4, 223,   5, 191, 
     69, 190,  27, 243,  55, 243, 
     17, 172, 159,  98, 144, 222, 
      6, 185, 126,  72, 190, 210, 
      5,  94, 237, 241,  22,  61, 
     19, 134,  61, 155, 103, 201, 
    130,  30, 213,  11, 233,  41, 
    179, 110, 137,   3, 239, 132, 
    252,  60, 252, 124, 200,  87, 
    225, 171,  33,  95, 131, 175, 
    237, 122, 147,  63, 237,  63, 
     79,  91, 236,  53,  78, 122, 
    255,  50, 227,  26, 163,  97, 
     92,  99,  52, 140, 107, 140, 
    134, 113, 141, 209,  48, 174, 
     49,  26, 198,  53,  70, 195, 
    184, 198, 200,  40, 158, 189, 
    222, 247, 146, 219, 125, 109, 
     13, 251, 152, 223,  94,  99, 
    240,  30,  40,  25,  31, 136, 
    154,  24,  40,  53,  57, 184, 
     35, 247,  55,  36, 221, 219, 
    210, 220, 153,  77, 202, 155, 
     54, 189, 140, 165,  68,  39, 
     83,  98,  79,  96, 234, 191, 
    247,  78, 212, 192,  82,  80, 
      5, 213,  80,  13, 149,  18, 
     82,  43, 201, 168, 146, 246, 
     18, 150, 206, 232, 146, 237, 
    141,  36, 236, 140, 168,  43, 
    239,  57,  39,  42, 168, 130, 
    106, 168, 134, 238,  88, 189, 
    254, 153, 151, 159, 207, 163, 
     36, 228, 214, 200, 109, 167, 
     36,  47, 158, 202, 107,  79, 
    231, 109,  47,  99, 111, 247, 
     49, 107, 254,  58, 171, 202, 
    221, 141, 195,  84,  14, 201, 
    123,  49, 230,  95, 176,  11, 
    223, 161, 160, 240, 182, 194, 
    191,  13, 231,  38, 168,   6, 
    159, 204,  62, 102, 211, 232, 
    113, 112,  28,  84, 120,  56, 
    193,  60, 182, 191, 123,  20, 
    153, 125,  91,  92, 155, 125, 
    245, 224,   5, 143, 137,  41, 
     51, 164,  15, 205, 189, 199, 
    192, 112, 110, 145, 167,  12, 
    191,  33, 103, 238,  59, 107, 
    148, 243,  62, 103, 252,  84, 
    176, 107,  53, 249, 234, 102, 
    221,  49, 202, 223, 194,  61, 
    236, 222,  58, 214, 204, 122, 
      9, 100, 165, 185, 115, 206, 
    197, 226, 140, 211,  93, 173, 
    212, 221, 155,  78, 190, 177, 
    218, 117, 114, 141, 142, 187, 
    180,  90,  46, 230, 157, 110, 
    103, 201,  41,  44,  47, 214, 
    221,  78, 215, 185, 212, 186, 
    209, 110, 172, 184, 117, 167, 
     92, 107, 221, 186, 218, 116, 
    139, 173, 166, 123, 121, 177, 
     93, 185,  86, 152, 115,  27, 
    205, 229, 197,  78, 189,  82, 
    152, 155, 201, 158, 110, 215, 
    107, 242,  29,  23,  18, 238, 
    161,   0,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
     74, 202,  84, 124,  74, 189, 
    148, 185,  88,  80,  68,  80, 
     84,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  84, 111, 110, 101,  77, 
     97, 112,  95,  80,  83,  82, 
    101, 105, 110, 104,  97, 114, 
    100,  95,  83,  82,  71,  66, 
     46, 112, 100,  98
};
