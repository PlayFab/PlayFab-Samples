#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[93]
// Embedded Data:
//  0x0000005d - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000058 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texturecube)(float,float,float,float) r0.xyz, v3.xyzx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, v0.xyzw
mad r0.xyz, r0.xyzx, r1.wwww, -r1.xyzx
mad o0.xyz, v1.xyzx, r0.xyzx, r1.xyzx
mov o0.w, r1.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[93], bundle is:[192] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneEnvironmentMapEffect_PSEnvMapNoFog.pdb
// Shader Semantic Hash      : 0x5bb925889e18e1eb
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  7, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}
;   [3] generic,  usageIdx 3, channelMask  7, param3, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 276 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 4;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
NumVgprs             = 13;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000004
SPIC:NUM_INTERP             = 4
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

dx9TexCubeMask           = 0x00000002

; export table for mrt0 [patch@(bytes=0x100, dwords=0x40)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, off, off, off done vm         // 000000000008: F8001801 00000005
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v6, off, off done vm          // 000000000008: F8001803 00000605
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v8, off, off done vm          // 000000000008: F8001803 00000805
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v5, v6                       // 000000000000: 5E000D05
  v_cvt_pkrtz_f16_f32  v1, v7, v8                       // 000000000004: 5E021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v5, v6                      // 000000000000: 5C000D05
  v_cvt_pknorm_u16_f32  v1, v7, v8                      // 000000000004: 5C021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v5, v6                      // 000000000000: 5A000D05
  v_cvt_pknorm_i16_f32  v1, v7, v8                      // 000000000004: 5A021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v5, v6                          // 000000000000: 60000D05
  v_cvt_pk_u16_u32  v1, v7, v8                          // 000000000004: 60021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v5, v6                          // 000000000000: 62000D05
  v_cvt_pk_i16_i32  v1, v7, v8                          // 000000000004: 62021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v6, v7, v8 done vm            // 000000000008: F800180F 08070605
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 00000000000C: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 000000000010: C0CA0110
  v_interp_p1_f32  v2, v0, attr3.x                      // 000000000014: C8080C00
  v_interp_p1_f32  v3, v0, attr3.y                      // 000000000018: C80C0D00
  v_interp_p1_f32  v4, v0, attr3.z                      // 00000000001C: C8100E00
  v_interp_p2_f32  v2, v1, attr3.x                      // 000000000020: C8090C01
  v_interp_p2_f32  v3, v1, attr3.y                      // 000000000024: C80D0D01
  v_interp_p2_f32  v4, v1, attr3.z                      // 000000000028: C8110E01
  v_cubema_f32  v5, v2, v3, v4                          // 00000000002C: D28E0005 04120702
  v_interp_p1_f32  v6, v0, attr2.x                      // 000000000034: C8180800
  v_interp_p1_f32  v7, v0, attr2.y                      // 000000000038: C81C0900
  v_cubetc_f32  v8, v2, v3, v4                          // 00000000003C: D28C0008 04120702
  v_cubesc_f32  v9, v2, v3, v4                          // 000000000044: D28A0009 04120702
  v_rcp_f32     v5, abs(v5)                             // 00000000004C: D3540105 00000105
  v_interp_p2_f32  v6, v1, attr2.x                      // 000000000054: C8190801
  v_interp_p2_f32  v7, v1, attr2.y                      // 000000000058: C81D0901
  v_cubeid_f32  v4, v2, v3, v4                          // 00000000005C: D2880004 04120702
  v_madak_f32   v3, v8, v5, 0x3fc00000                  // 000000000064: 42060B08 3FC00000
  v_madak_f32   v2, v9, v5, 0x3fc00000                  // 00000000006C: 42040B09 3FC00000
  s_waitcnt     lgkmcnt(0)                              // 000000000074: BF8C007F
  image_sample  v[5:8], v[6:7], s[4:11], s[20:23] dmask:0xf // 000000000078: F0800F00 00A10506
  image_sample  v[2:5], v[2:3], s[12:19], s[24:27] dmask:0x7 // 000000000080: F0800700 00C30202
  v_interp_p1_f32  v9, v0, attr0.x                      // 000000000088: C8240000
  v_interp_p1_f32  v10, v0, attr0.y                     // 00000000008C: C8280100
  v_interp_p1_f32  v11, v0, attr0.z                     // 000000000090: C82C0200
  v_interp_p1_f32  v12, v0, attr0.w                     // 000000000094: C8300300
  v_interp_p2_f32  v9, v1, attr0.x                      // 000000000098: C8250001
  v_interp_p2_f32  v10, v1, attr0.y                     // 00000000009C: C8290101
  v_interp_p2_f32  v11, v1, attr0.z                     // 0000000000A0: C82D0201
  v_interp_p2_f32  v12, v1, attr0.w                     // 0000000000A4: C8310301
  s_waitcnt     vmcnt(1)                                // 0000000000A8: BF8C0F71
  v_mul_legacy_f32  v5, v5, v9                          // 0000000000AC: 0E0A1305
  v_mul_legacy_f32  v6, v6, v10                         // 0000000000B0: 0E0C1506
  v_mul_legacy_f32  v7, v7, v11                         // 0000000000B4: 0E0E1707
  v_mul_legacy_f32  v8, v8, v12                         // 0000000000B8: 0E101908
  v_interp_p1_f32  v9, v0, attr1.x                      // 0000000000BC: C8240400
  v_interp_p1_f32  v10, v0, attr1.y                     // 0000000000C0: C8280500
  v_interp_p1_f32  v0, v0, attr1.z                      // 0000000000C4: C8000600
  s_waitcnt     vmcnt(0)                                // 0000000000C8: BF8C0F70
  v_mad_legacy_f32  v2, v2, v8, -v5                     // 0000000000CC: D2800002 84161102
  v_mad_legacy_f32  v3, v3, v8, -v6                     // 0000000000D4: D2800003 841A1103
  v_mad_legacy_f32  v4, v4, v8, -v7                     // 0000000000DC: D2800004 841E1104
  v_interp_p2_f32  v9, v1, attr1.x                      // 0000000000E4: C8250401
  v_interp_p2_f32  v10, v1, attr1.y                     // 0000000000E8: C8290501
  v_interp_p2_f32  v0, v1, attr1.z                      // 0000000000EC: C8010601
  v_mac_f32     v5, v9, v2                              // 0000000000F0: 3E0A0509
  v_mac_f32     v6, v10, v3                             // 0000000000F4: 3E0C070A
  v_mac_f32     v7, v0, v4                              // 0000000000F8: 3E0E0900
  s_mov_b64     exec, s[28:29]                          // 0000000000FC: BEFE041C
  v_cvt_pkrtz_f16_f32  v0, v5, v6                       // 000000000100: 5E000D05
  v_cvt_pkrtz_f16_f32  v1, v7, v8                       // 000000000104: 5E021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000108: F8001C0F 00000100
  s_endpgm                                              // 000000000110: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   13
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   84
//  CycleSimNWaves:             84
//  Code Size:                  276
//Assembler Counts:
//  num_32bit_ops                     : 45
//  num_64bit_ops                     : 11
//  num_alu                           : 43
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 11
//  num_inst_vop3                     : 10
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 24
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 13
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 276
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 84
// m_uCycleSimNWaves                 : 84

// Assembler Counts:
// num_32bit_ops                     : 45
// num_64bit_ops                     : 11
// num_alu                           : 43
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 11
// num_inst_vop3                     : 10
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 24
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE EnvironmentMapEffect_PSEnvMapNoFog[] =
{
     68,  88,  66,  67, 131, 220, 
     38, 246,  11,  89, 221, 131, 
    175,  57,  24, 213, 182,  15, 
     81,  17,   1,   0,   0,   0, 
    227,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0, 108,   5,   0,   0, 
    124,   5,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   7, 
      0,   0, 110,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 110,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 124,   4,   0,   0, 
     80,   0,   0,   0,  31,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  93,   0, 
      0,   0,  80,   0,   0,   0, 
     88,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   1,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     88,  48,   0,   4,   0, 112, 
     16,   0,   1,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      0,   0,   0,   0,  98,  16, 
      0,   3, 114,  16,  16,   0, 
      1,   0,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      2,   0,   0,   0,  98,  16, 
      0,   3, 114,  16,  16,   0, 
      3,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 130,   1, 
      0, 128,  67,  85,  21,   0, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      3,   0,   0,   0,  70, 126, 
     16,   0,   1,   0,   0,   0, 
      0,  96,  16,   0,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      1,   0,   0,   0,  70,  16, 
     16,   0,   2,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 242,   0,  16,   0, 
      1,   0,   0,   0,  70,  14, 
     16,   0,   1,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  50,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0, 246,  15, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16, 128,  65,   0, 
      0,   0,   1,   0,   0,   0, 
     50,   0,   0,   9, 114,  32, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   1,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 194,   0, 
      0,   0,  23,   0,   1,   0, 
     41,  96,  16,   0, 120,   1, 
    237,  87,  75, 104,  19,  65, 
     24, 254, 103,  95, 217, 205, 
     99, 147, 104, 181, 169,  84, 
     17, 180,  80, 209, 138, 158, 
     20,  15, 181, 106, 171, 135, 
    226,   3, 154,  67, 169,  75, 
    155, 166, 217, 106, 192,  60, 
     76,  66, 233,  41,  70, 232, 
    161, 104, 145,  30,  85,  68, 
     20,  60, 122, 243, 162, 151, 
     36, 226, 101, 240,  88,  47, 
    222, 196, 179, 151,  30,  61, 
    148, 234, 255, 111, 102, 218, 
     88, 235, 109,  65, 145, 253, 
    224, 155, 111, 191, 121, 252, 
    251, 207, 204,  46, 204, 100, 
     18, 224, 161,  82, 248, 242, 
    134, 116, 222, 141,  60, 204, 
     48,   0,  29, 159,  81,  60, 
     37,  60, 142,  81,   9, 144, 
    136,  83,   9,  48,  72,   5, 
    117,  80,   0, 168, 233,  48, 
    178,   7, 253,   8,  42, 181, 
     73,  62, 125,  50, 113,  17, 
    192,  65,   2, 164, 144,  54, 
     50,  45,  56, 132, 140,  32, 
    143,  35, 195,  72,  10,  71, 
    192, 144,  91, 208, 168,  64, 
     72, 237,   6, 141, 165, 113, 
      4, 138,  45, 199, 169,  72, 
     25, 203, 131,  75, 197, 238, 
     56, 139,  20,  83, 219,  21, 
    148, 155, 140,  75,  49, 229, 
    251, 104, 190, 127,  27, 157, 
     57, 118, 178, 163,  57,  19, 
    228,  62,  17, 104,  63, 186, 
     65, 107,  47, 171,  94, 147, 
     65, 200, 117, 109,  11,  79, 
    195, 105, 110, 109, 228, 159, 
    240,   3,  65, 235, 221,  13, 
    233,  41, 158,   1, 157, 143, 
    196,  96, 189,   0,  38, 170, 
    114,   4,  63,  28,  84, 245, 
    204, 118, 199, 255,  24, 114, 
     77,  73, 105, 119, 232,  23, 
     19, 191, 141,   7, 217,  78, 
    255,  10,  64, 163,  69,  92, 
     77, 193, 119, 114, 210,  51, 
    244, 157, 127, 175, 227,  85, 
    242, 198,  14, 143, 107, 171, 
    199,  96,  58, 148,  84, 166, 
    227, 253,  56,  30,  55,  23, 
    189, 131, 222, 233, 242,  83, 
    232, 167, 186, 124,   6, 125, 
    166, 203, 103, 209, 103, 165, 
    151, 241, 227, 222, 251,  66, 
     38, 237,  53,  86, 214, 255, 
    101,   6,  57, 250, 195,  32, 
     71, 127,  24, 228, 232,  15, 
    131,  28, 253,  97, 144, 163, 
     63,  12, 114, 244, 135,  65, 
    142, 254, 144, 206, 150, 117, 
    237,  89, 179,  30, 222, 108, 
     42, 234,  70,  19, 152, 242, 
     62, 193,  62, 182,  33, 106, 
    114, 136,  69,  57, 216,   9, 
    206, 162,  22, 103, 177,  24, 
    103, 118, 146, 235, 240, 104, 
     77,   9, 237, 209, 192,  76, 
    113, 176, 250, 185,   9,  43, 
    158, 183, 224, 129, 167,  58, 
     75, 127, 210, 241,  12, 200, 
    204,  62, 206, 172, 131,  92, 
    131, 101, 175, 222, 140,  24, 
    120, 127, 107, 159, 183,  34, 
    154, 167, 247,  96, 165,   5, 
    241, 198, 186, 161, 191,   4, 
      8,  53, 214,  21, 229,   3, 
    102, 114, 148,   3,  27, 228, 
    160, 156, 224, 160, 158, 226, 
     12,   6,  56,  99, 199,  56, 
     83, 134,  56,  83,  79, 243, 
    187, 241, 149, 150, 190,  55, 
    108,  27, 251, 162, 118, 168, 
    215, 182, 205, 190, 132,  13, 
     26, 142, 209, 113, 140,   1, 
    188, 140, 237,  10,  52, 214, 
    148, 228, 254,  37,  21,  85, 
     77,  30,  88, 210,  80, 181, 
    228, 161,  37, 166,  97,  44, 
     29,  99,  25, 140,  91, 122, 
    120,  56,  28, 138,  14, 131, 
    101,  15, 247, 107, 155,  77, 
     60, 191, 254, 114, 254,   5, 
    184, 223, 234,  35, 165, 197, 
    217,   9, 211, 235, 176,  13, 
    178,  88, 135, 199, 232,  45, 
    120,  61,  52, 230, 157, 217, 
     37,  24,  85,  98,  93,  15, 
    138, 196, 136,  56, 208,  15, 
     10, 165, 107, 141, 133, 212, 
    112,  50, 132, 111,  95,  83, 
    207, 151,   7, 222, 221, 164, 
    103, 194, 162, 232,  55,  41, 
    148, 238,  88,  81, 228,  54, 
     94,  81, 241,  27,  94, 136, 
    254, 171,  66,  41,  47, 186, 
     63, 216, 242, 102,  46, 238, 
    109, 109, 209, 254,  86,  40, 
    205, 137, 238, 199,  59, 243, 
    248,  44, 218,  51,  72, 202, 
    116, 244, 156, 115,  33, 125, 
    197, 169, 214, 102, 114, 238, 
    130,  51, 158, 175,  85, 157, 
    209, 124, 197, 157, 171,  77, 
    166, 199, 157, 106, 101, 206, 
    153, 184,  61, 155, 115,  43, 
     85, 231,  82, 169,  80, 206, 
    223, 113, 115, 206, 100, 182, 
    180, 120, 189, 232, 142,  21, 
     23, 242, 149,  82, 177, 224, 
     22, 107,  87, 103, 203,  99, 
    243, 243,  56, 102, 230, 198, 
      4,  86, 163, 189,  86, 186, 
     92, 186, 117, 178, 156, 203, 
    194,  79, 205, 229,   7, 106, 
      0,   0,  88,  72,  83,  72, 
      8,   0,   0,   0, 235, 225, 
     24, 158, 136,  37, 185,  91, 
     88,  80,  68,  80,  95,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  69, 
    110, 118, 105, 114, 111, 110, 
    109, 101, 110, 116,  77,  97, 
    112,  69, 102, 102, 101,  99, 
    116,  95,  80,  83,  69, 110, 
    118,  77,  97, 112,  78, 111, 
     70, 111, 103,  46, 112, 100, 
     98
};
