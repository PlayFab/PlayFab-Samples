#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[52]
// Embedded Data:
//  0x00000034 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000002f - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul_sat o0.xyz, r0.xyzx, cb0[0].xxxx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[52], bundle is:[145] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PSSaturate.pdb
// Shader Semantic Hash      : 0x5b5946a58bb6f633
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 100 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 4;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x50, dwords=0x14)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000014: C8090001
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400002
  s_buffer_load_dword  s0, s[12:15], 0x00               // 00000000002C: C2000D00
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000030: BF8C0070
  v_mul_legacy_f32  v0, v0, s0 clamp                    // 000000000034: D20E0800 00000100
  v_mul_legacy_f32  v1, v1, s0 clamp                    // 00000000003C: D20E0801 00000101
  v_mul_legacy_f32  v2, v2, s0 clamp                    // 000000000044: D20E0802 00000102
  s_mov_b64     exec, s[16:17]                          // 00000000004C: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000050: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000054: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000058: F8001C0F 00000100
  s_endpgm                                              // 000000000060: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   4
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   83
//  CycleSimNWaves:             83
//  Code Size:                  100
//Assembler Counts:
//  num_32bit_ops                     : 15
//  num_64bit_ops                     : 5
//  num_alu                           : 9
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 2
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 4
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 100
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 83
// m_uCycleSimNWaves                 : 83

// Assembler Counts:
// num_32bit_ops                     : 15
// num_64bit_ops                     : 5
// num_alu                           : 9
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 2
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PSSaturate[] =
{
     68,  88,  66,  67, 235,  72, 
    135, 128, 178, 188, 217,   8, 
    252, 250, 225, 163,  77,  30, 
     68, 248,   1,   0,   0,   0, 
     75,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 228,   3,   0,   0, 
    244,   3,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  28,   3, 
      0,   0,  80,   0,   0,   0, 
    199,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     52,   0,   0,   0,  80,   0, 
      0,   0,  47,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,  32, 
      0,   8, 114,  32,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      6, 128,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 147,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 152,  15,   0, 120,   1, 
    237,  87, 191, 111, 211,  64, 
     20, 126, 103, 155,  54, 133, 
    230,   7,  18,   3, 149,  24, 
     58,  48,  48, 177,  68,  98, 
     96,  34, 162, 130, 161,  32, 
     42,  37,  67,  91,  78, 109, 
    147, 250,  36,  34,  65,  99, 
     37, 166, 234, 128,  66, 153, 
      0, 129,  68, 199, 142,  29, 
    202, 191, 192, 132, 146, 194, 
    148, 129,  46,  76, 236,  44, 
    140,  76, 136, 161, 106, 251, 
     62, 231,  93, 112,  77, 217, 
     44, 129, 132,  63, 233, 123, 
    159,  63, 223, 249, 221, 139, 
    207, 145, 222, 109,  23,  41, 
    194, 181, 151,  95, 247, 161, 
    207, 207,   7, 230,  61, 235, 
     25, 166,  18,   5, 182, 243, 
    136,  68, 119,  10, 136,  68, 
     87,  16,  48, 193,  33, 242, 
     88,  46,  48, 125, 230,  13, 
     38, 198,  44, 247,  63,  61, 
    169, 148, 203, 111,  42, 124, 
     73,  37, 230,  56, 179,  42, 
    196, 210, 200,  63,  33,  68, 
     58, 192,  42, 224,  34,  48, 
    176,  70,  18, 188, 244,   8, 
     24, 183,  30,  26, 207,  65, 
      6, 225, 116, 160, 238, 211, 
    114,  91,  36, 235, 130,   7, 
    240, 220, 223, 198, 176, 174, 
     95,  17, 180, 251,   4,  96, 
     63, 226, 192, 214,  97,  14, 
    112,  32, 243, 236, 251,  45, 
    201, 190, 226,  93, 224, 183, 
    237,  49, 255, 132,  35,   6, 
    246,  50,  14, 235, 145, 127, 
     76, 113, 214,  28,  95, 252, 
    167, 176, 223,  19, 222,   5, 
    190,  69, 188,  27, 249, 155, 
     69, 176, 227, 195, 111, 104, 
    179,  15, 110,  93, 164, 159, 
    112, 214, 171, 132, 119, 225, 
    145,  48, 238, 177, 121,  46, 
     45,  57, 227, 206,  82, 241, 
    146, 140, 187, 164, 217, 235, 
    152,  95, 100, 191,  24, 243, 
     43, 236,  87,  98, 190, 193, 
    190,  49, 242, 146, 191,  24, 
    173, 231, 184, 216, 107, 190, 
    217, 253, 151, 153, 213, 152, 
     14, 179,  26, 211,  97,  86, 
     99,  58, 204, 106,  76, 135, 
     89, 141, 233,  48, 171,  49, 
     29, 102,  53, 166,  70, 234, 
    122,  91, 189, 238, 217, 195, 
    158, 227,  30, 244, 184, 127, 
    251, 192, 141, 247,  64, 209, 
    196, 128, 212, 228,  64, 169, 
    252, 224,  41, 189, 238,  83, 
    113, 243, 187, 131, 147,  89, 
    158,  62,   6, 240, 185, 194, 
    103, 244, 122, 138,  85, 177, 
     58, 172,  14, 107, 201,  59, 
    236, 113,  63, 120, 178, 159, 
    164, 103, 253,  41,  40,  26, 
    217,  36, 114, 209, 132,  17, 
     34, 231, 169,  19, 173, 127, 
    244,  24, 223, 155, 132,  10, 
     94, 200,  89, 195,  23, 189, 
    204,  28, 158, 179, 208, 208, 
     14, 243, 120,  52, 198, 145, 
    168, 252, 227, 221, 171, 183, 
    183,  22, 238, 227,  26, 216, 
    147, 103, 118,  68, 167, 153, 
    241, 220,  68, 187,   8, 191, 
    225, 155, 204, 255,  34, 138, 
    158,  28, 125, 120, 193, 158, 
    112, 229, 126, 206,  54, 234, 
    162, 248,  45, 231, 152, 201, 
     58, 166, 101, 124, 142, 137, 
     74, 103, 174, 235,  74, 237, 
    182, 238, 132, 203, 190,  89, 
    215, 179, 205, 176, 163, 103, 
    154, 109, 179,  26, 206, 215, 
    102, 117, 167, 189, 170, 171, 
     15, 234, 190, 105, 119, 244, 
    205, 214, 163, 160, 249, 208, 
    248, 122, 190, 209, 218, 184, 
    183, 102, 106, 173,  53, 115, 
    183,  30,  44, 207,  85, 171, 
    245, 240, 113, 187,  30, 154, 
    171, 129, 223, 160,  99,   5, 
     18, 216,  26,   0,   0,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  51, 246, 182, 139, 
    165,  70,  89,  91,  88,  80, 
     68,  80,  79,   0,   0,   0, 
     68,  58,  92,  65,  84,  71, 
     92, 115, 116,  95, 100, 101, 
    118,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  84, 111, 110, 
    101,  77,  97, 112,  95,  80, 
     83,  83,  97, 116, 117, 114, 
     97, 116, 101,  46, 112, 100, 
     98
};
