#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[50]
// Embedded Data:
//  0x00000032 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000002d - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xwyz, s0
dp3 r0.x, r0.xzwx, l(0.212500, 0.715400, 0.072100, 0.000000)
mov o0.xyzw, r0.xxxy
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[50], bundle is:[145] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSMonochrome.pdb
// Shader Semantic Hash      : 0x8926623dd023af86
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 100 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 4;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x50, dwords=0x14)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v0, off, off done vm          // 000000000008: F8001803 00000000
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v0, v0                       // 000000000000: 5E020100
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000004: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v0, v0                      // 000000000000: 5C020100
  v_cvt_pknorm_u16_f32  v0, v0, v3                      // 000000000004: 5C000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v0, v0                      // 000000000000: 5A020100
  v_cvt_pknorm_i16_f32  v0, v0, v3                      // 000000000004: 5A000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v0, v0                          // 000000000000: 60020100
  v_cvt_pk_u16_u32  v0, v0, v3                          // 000000000004: 60000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v0, v0                          // 000000000000: 62020100
  v_cvt_pk_i16_i32  v0, v0, v3                          // 000000000004: 62000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v0, v0, v3 done vm            // 000000000008: F800180F 03000000
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000014: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 00000000001C: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000020: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610002
  s_waitcnt     vmcnt(0)                                // 000000000030: BF8C0F70
  v_mul_legacy_f32  v2, 0x3d93a92a, v2                  // 000000000034: 0E0404FF 3D93A92A
  v_madmk_f32   v1, v1, 0x3f372474, v2                  // 00000000003C: 40020501 3F372474
  v_madmk_f32   v0, v0, 0x3e59999a, v1                  // 000000000044: 40000300 3E59999A
  s_mov_b64     exec, s[16:17]                          // 00000000004C: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v0, v0                       // 000000000050: 5E020100
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000054: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000058: F8001C0F 00000001
  s_endpgm                                              // 000000000060: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   4
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   80
//  CycleSimNWaves:             80
//  Code Size:                  100
//Assembler Counts:
//  num_32bit_ops                     : 18
//  num_64bit_ops                     : 2
//  num_alu                           : 9
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 5
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 4
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 100
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 80
// m_uCycleSimNWaves                 : 80

// Assembler Counts:
// num_32bit_ops                     : 18
// num_64bit_ops                     : 2
// num_alu                           : 9
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 5
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSMonochrome[] =
{
     68,  88,  66,  67,  43, 111, 
     10, 224,  22, 100, 106,  25, 
     41,  20,  81,  59, 140, 214, 
      3,  40,   1,   0,   0,   0, 
     73,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 220,   3,   0,   0, 
    236,   3,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  20,   3, 
      0,   0,  80,   0,   0,   0, 
    197,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     50,   0,   0,   0,  80,   0, 
      0,   0,  45,   0,   0,   0, 
    106,   8,   0,   1,  90,   0, 
      0,   3,   0,  96,  16,   0, 
      0,   0,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      0,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   1,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      1,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  16,  16,   0,   1,   0, 
      0,   0, 198, 121,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     16,   0,   0,  10,  18,   0, 
     16,   0,   0,   0,   0,   0, 
    134,   3,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
    154, 153,  89,  62, 116,  36, 
     55,  63,  42, 169, 147,  61, 
      0,   0,   0,   0,  54,   0, 
      0,   5, 242,  32,  16,   0, 
      0,   0,   0,   0,   6,   4, 
     16,   0,   0,   0,   0,   0, 
     62,   0,   0,   1,  53,  16, 
      0,   0, 147,   0,   0,   0, 
     23,   0,   1,   0,  41, 126, 
     15,   0, 120,   1, 237,  87, 
    191, 107,  20,  65,  20, 126, 
    179, 183, 137,  23,  77, 110, 
     15, 177, 136,  96,  33,  40, 
     34,  41, 108,  21,  33, 122, 
    193, 128,  69,  16,  23,  18, 
     36, 134,  33,  63, 246, 118, 
    195,  29, 120, 217, 115, 119, 
     17, 109, 214, 179,   9,   8, 
     41,  14, 108, 212, 202, 194, 
    198, 202, 198, 194, 234, 238, 
    176, 218, 210, 127,  64, 176, 
    180, 180, 140,  16, 140, 239, 
    187, 155, 209, 205, 122, 118, 
     11,  10, 238,   7, 223, 123, 
    243, 221, 206, 190, 253, 110, 
    102,  23, 222, 196,  22,  13, 
    145, 204, 125, 251, 132, 252, 
    232, 126, 171, 250, 142, 243, 
      4,  83, 168,  12,  60, 159, 
     65,  36, 186,  82,  65,  36, 
    186, 136, 128,   9,   6, 145, 
    201, 233,  20, 211, 101, 214, 
    152, 184, 166, 185, 189,  29, 
     47,  16, 117, 153,  68,  40, 
    129, 122, 182, 226,  73,  38, 
    223,  78,  83, 138,  40,   7, 
    232,  12, 148,  16,  24, 120, 
     70,  22, 218,  27, 128, 235, 
    168,   5,  32, 167, 107, 144, 
    135,  48,  30, 240,  61, 174, 
    182,  70, 214,  23,  52, 128, 
    251, 254,  54,  70, 190, 210, 
    241, 215,  62,   1, 216, 143, 
     52, 176, 117, 122, 222, 129, 
    154, 167, 215, 172, 170, 246, 
     21, 107, 129, 255,  54,  96, 
    254,   9, 135, 140, 105,  12, 
     82, 208,  26, 245,  39,   5, 
    239,  90, 153,   7, 255,  41, 
    244, 251, 132, 181, 192, 250, 
     86, 153, 234,  51,  27,  66, 
     95,  31, 189,  67, 157,  62, 
    216, 157, 165, 125,  40, 173, 
     69,  70, 151, 198, 105, 124, 
     28, 194,  88, 167,  99, 180, 
    110, 157, 161, 125,  60, 143, 
    181, 100,  45,  83, 122, 141, 
    245,  90,  74, 111, 178, 222, 
     76, 105, 135, 181, 243,  83, 
    171, 250, 214, 232, 121,  37, 
    236,  53, 231, 248,  95, 102, 
    225,  49,  31,  22,  30, 243, 
     97, 225,  49,  31,  22,  30, 
    243,  97, 225,  49,  31,  22, 
     30, 243,  97, 225,  49,  55, 
     82, 108, 118, 123, 241, 241, 
    239,  61,  18,  31,   6, 101, 
    177,  59,  48,  74,   7,  61, 
    110, 190,  19,  18, 211, 137, 
    160, 169,  68, 136, 153, 228, 
     49, 237, 245, 201, 234, 124, 
     53, 104, 139, 218, 214,  94, 
    255, 208,  52,  43, 115, 111, 
    158, 205, 139,   9, 163,  22, 
    157, 191, 124, 157, 251, 200, 
    218, 203,  23, 119, 175,  85, 
     77, 212, 201, 244, 147, 244, 
    164, 127,  26,   3, 125,  80, 
     72, 163,  60, 154, 161,  49, 
     84, 166,  56, 210, 250,  55, 
    212, 185, 194,  86, 121, 150, 
    137,  51, 148,  73, 147,  28, 
    137, 118, 223, 158, 251,  56, 
    239,  92, 120, 138,  49, 240, 
     74, 205, 235, 168, 124, 150, 
    121, 244, 172, 241,  26, 225, 
     55,  36, 106, 254, 123, 149, 
    209, 115, 163, 207, 174, 232, 
     83, 162, 250, 253, 139, 202, 
    159,  85, 134, 215,  19, 204, 
    172,  15, 221, 176, 223,  97, 
    194, 233, 226,  85, 185, 176, 
    114,  83, 134, 209, 134, 235, 
     61, 144,  75, 205,  40, 148, 
    139, 205, 192, 171,  71, 171, 
     43,  75,  50,  12, 234, 114, 
    185, 177, 229, 122,  65,  40, 
    111, 248, 173, 118, 243, 158, 
    231, 202,  85, 199, 127, 120, 
    123, 199, 179, 253,  48, 178, 
      3, 191, 238, 133, 225, 134, 
    189, 124, 203, 223, 241, 235, 
    141, 192, 111, 121, 151, 218, 
    174,  67,  63,   0,   9, 105, 
    221, 233,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
    134, 175,  35, 208,  61,  98, 
     38, 137,  88,  80,  68,  80, 
     85,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  80, 111, 115, 116,  80, 
    114, 111,  99, 101, 115, 115, 
     95,  80,  83,  77, 111, 110, 
    111,  99, 104, 114, 111, 109, 
    101,  46, 112, 100,  98
};
