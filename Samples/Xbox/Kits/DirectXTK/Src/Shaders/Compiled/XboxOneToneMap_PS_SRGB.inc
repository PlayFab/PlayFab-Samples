#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[61]
// Embedded Data:
//  0x0000003d - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000038 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
log r0.xyz, |r0.xyzx|
mov o0.w, r0.w
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp o0.xyz, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[61], bundle is:[149] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PS_SRGB.pdb
// Shader Semantic Hash      : 0x171aa884e439d679
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 132 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 4;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x70, dwords=0x1C)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000014: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 00000000001C: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000020: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610002
  s_waitcnt     vmcnt(0)                                // 000000000030: BF8C0F70
  v_log_f32     v0, abs(v0)                             // 000000000034: D34E0100 00000100
  v_log_f32     v1, abs(v1)                             // 00000000003C: D34E0101 00000101
  v_log_f32     v2, abs(v2)                             // 000000000044: D34E0102 00000102
  s_mov_b32     s0, 0x3ee8ba2f                          // 00000000004C: BE8003FF 3EE8BA2F
  v_mul_legacy_f32  v0, s0, v0                          // 000000000054: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 000000000058: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 00000000005C: 0E040400
  v_exp_f32     v0, v0                                  // 000000000060: 7E004B00
  v_exp_f32     v1, v1                                  // 000000000064: 7E024B01
  v_exp_f32     v2, v2                                  // 000000000068: 7E044B02
  s_mov_b64     exec, s[16:17]                          // 00000000006C: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000070: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000074: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000078: F8001C0F 00000100
  s_endpgm                                              // 000000000080: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   4
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   81
//  CycleSimNWaves:             81
//  Code Size:                  132
//Assembler Counts:
//  num_32bit_ops                     : 22
//  num_64bit_ops                     : 5
//  num_alu                           : 15
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 3
//  num_inst_vop2                     : 5
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 4
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 132
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 81
// m_uCycleSimNWaves                 : 81

// Assembler Counts:
// num_32bit_ops                     : 22
// num_64bit_ops                     : 5
// num_alu                           : 15
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 3
// num_inst_vop2                     : 5
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PS_SRGB[] =
{
     68,  88,  66,  67, 203, 134, 
     21,  56,  19,  21, 200,  68, 
    159, 109, 168, 119,  45,  41, 
     81, 158,   1,   0,   0,   0, 
    124,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0,  24,   4,   0,   0, 
     40,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  80,   3, 
      0,   0,  80,   0,   0,   0, 
    212,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     61,   0,   0,   0,  80,   0, 
      0,   0,  56,   0,   0,   0, 
    106,   8,   0,   1,  90,   0, 
      0,   3,   0,  96,  16,   0, 
      0,   0,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      0,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   1,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      1,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  16,  16,   0,   1,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     47,   0,   0,   6, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16, 128, 129,   0, 
      0,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,   2,  64, 
      0,   0,  47, 186, 232,  62, 
     47, 186, 232,  62,  47, 186, 
    232,  62,   0,   0,   0,   0, 
     25,   0,   0,   5, 114,  32, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 151,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 149,  15,   0, 120,   1, 
    237,  87, 191, 107,  20,  65, 
     24, 253, 102, 118,  77,  46, 
     49, 217,  77,  33,  26, 245, 
    192, 148, 218, 168, 141,  69, 
     82, 136, 198,  64, 138,  37, 
    254, 186,  43, 206,  48, 228, 
    114, 151,  91, 240,  64, 115, 
    203, 221,  33, 218, 172,  23, 
      8,  98,  97, 145,  70,  80, 
     43,  65,  11, 255,   6, 139, 
    187, 195, 234, 122,  65,  44, 
     45,  44,   2,  54, 130, 141, 
    133,  24, 191, 183, 206, 196, 
    201, 105, 186,   5,   5, 247, 
    193, 251, 222, 124,  51, 115, 
    223, 190, 157, 217, 131, 153, 
    199,  62,  37,  56, 245, 233, 
    197,  57, 232, 151,  27,  27, 
    234,   3, 235,   1, 166, 208, 
     10,  60, 153,  68,  36,  42, 
    121, 136,  68,  39,  17,  48, 
     65,  18, 185,  44, 135, 152, 
    155, 204,  11,  76, 140,  25, 
     62, 123, 122,  98, 158,  91, 
     76,  34, 148,  24, 101,  94, 
    211,  60, 204,  68, 125,  88, 
     24, 103, 162,  28,  96,  20, 
    112,  16,  24, 198, 135,   1, 
    250, 237,  62, 120,  96,  43, 
      9, 160, 118,  13,  10,  17, 
    254, 140, 227,  76, 252, 118, 
     63, 192, 155, 169,   5, 133, 
     79,   0, 239, 251, 183, 241, 
    211, 151,  29, 127, 237,  19, 
    128, 253, 176, 129, 173,  51, 
    243, 242, 122,  31, 205, 154, 
    157, 213,  57, 214,   2, 239, 
    214, 103, 238, 135,  29, 198, 
      4,  26,  22,  76, 142, 250, 
     35, 130, 119,  39, 199, 141, 
    255,  20, 230, 123, 194,  90, 
     96, 125, 167, 152, 248, 142, 
     12, 204, 120,  30, 129,  58, 
     61, 112, 107, 154, 190,  34, 
     51, 185,  24, 202,  29, 228, 
     40, 104, 231, 248,  19,  56, 
    180,  34,  71, 229, 138, 159, 
    215, 227,  14,  41, 206, 149, 
    149,  47, 115, 190, 108, 229, 
    171, 156, 175,  90, 121, 149, 
    243, 234, 110, 174, 235, 251, 
    201, 243, 164, 131, 189, 230, 
    206, 248,  95, 102, 230,  49, 
     29, 102,  30, 211,  97, 230, 
     49,  29, 102,  30, 211,  97, 
    230,  49,  29, 102,  30, 211, 
     97, 230,  49,  53,  82, 236, 
    110, 117, 227, 241, 239,  93, 
     18, 111, 250,  57, 241, 160, 
     47, 157, 111,  93,  62, 124, 
     15,  72,  76,  12,   4, 141, 
     13, 132, 152,  28, 220, 167, 
     71,  61, 242,  59, 159,  37, 
     85,  40, 242, 185,  45,  46, 
    191, 197,  89,  79, 176,  10, 
     86, 201,  42,  89, 119, 156, 
     78, 247, 204, 235, 237, 243, 
     92, 214,  35,  41,  61, 114, 
     93, 143,   2, 138,  69,  32, 
     99,  25, 184, 241, 148, 203, 
    207,  25,  62, 111, 210,  70, 
    239,  40, 212,  92,  36, 108, 
    228, 146,   9, 187,  72,  50, 
     87, 236, 185,  26,  60, 212, 
    247, 142,  72, 235,  52, 115, 
    140, 233, 210,   8,  71, 162, 
    123, 239, 102,  63, 110, 190, 
     58, 118,   4, 109, 160, 175, 
    231,  61, 215,  58, 195, 220, 
    123,  23, 121, 137, 240,  27, 
    182, 245, 252, 247,  90, 113, 
     38, 199,  57, 220,  51, 183, 
     72, 221, 159,  51,   7, 117, 
    173, 240, 122, 144,  57, 236, 
     99,  70, 143,  47,  49, 225, 
    116,  97,  78,  93,  44,  46, 
    170,  86, 187,  92,  11, 239, 
    168, 160, 222, 110, 169, 133, 
    122,  51,  92, 107, 151, 138, 
    129, 106,  53, 215,  84, 225, 
    102, 165,  22,  54,  91, 234, 
     82, 227, 118,  84, 191,  21, 
    214,  84, 169, 218, 184, 123, 
    101,  61,  44,  54, 214, 195, 
    165,  74,  84, 190,  90,  40, 
     23, 174,  47, 206, 159, 142, 
    106,  85, 250,   1, 170, 125, 
    221,  62,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
    121, 214,  57, 228, 132, 168, 
     26,  23,  88,  80,  68,  80, 
     76,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  84, 111, 110, 101,  77, 
     97, 112,  95,  80,  83,  95, 
     83,  82,  71,  66,  46, 112, 
    100,  98
};
