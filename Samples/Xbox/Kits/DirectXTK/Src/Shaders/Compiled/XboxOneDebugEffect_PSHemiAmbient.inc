#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// TEXCOORD                 1   xyzw        1     NONE   float       
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[75]
// Embedded Data:
//  0x0000004b - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000046 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[13], immediateIndexed
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_output o0.xyzw
dcl_temps 1
dp3 r0.x, v2.xyzx, v2.xyzx
rsq r0.x, r0.x
mul r0.x, r0.x, v2.y
mad r0.x, r0.x, l(0.500000), l(0.500000)
mad r0.xyz, r0.xxxx, cb0[1].xyzx, cb0[0].xyzx
mul o0.xyz, r0.xyzx, v3.xyzx
mov o0.w, v3.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[75], bundle is:[158] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDebugEffect_PSHemiAmbient.pdb
// Shader Semantic Hash      : 0xa0e8a167d77d4696
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 2, channelMask  7, param0, paramSlot2, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 3, channelMask 15, param1, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 164 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 1;
;  extUserElements 1[0] = IMM_CONST_BUFFER 0, offset 0x0:3 dwords
NumVgprs             = 9;
NumSgprs             = 10;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x90, dwords=0x24)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v0, off, off done vm          // 000000000008: F8001803 00000002
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000000: 5E020702
  v_cvt_pkrtz_f16_f32  v0, v4, v0                       // 000000000004: 5E000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000000: 5C020702
  v_cvt_pknorm_u16_f32  v0, v4, v0                      // 000000000004: 5C000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000000: 5A020702
  v_cvt_pknorm_i16_f32  v0, v4, v0                      // 000000000004: 5A000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000000: 60020702
  v_cvt_pk_u16_u32  v0, v4, v0                          // 000000000004: 60000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000000: 62020702
  v_cvt_pk_i16_i32  v0, v4, v0                          // 000000000004: 62000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v0 done vm            // 000000000008: F800180F 00040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_load_dwordx4  s[4:7], s[0:1], 0x00                  // 000000000000: C0820100
  s_mov_b32     m0, s2                                  // 000000000004: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.z                      // 000000000008: C8080200
  v_interp_p1_f32  v3, v0, attr0.y                      // 00000000000C: C80C0100
  v_interp_p2_f32  v2, v1, attr0.z                      // 000000000010: C8090201
  s_waitcnt     lgkmcnt(0)                              // 000000000014: BF8C007F
  s_buffer_load_dwordx4  s[0:3], s[4:7], 0x00           // 000000000018: C2800500
  v_interp_p1_f32  v4, v0, attr0.x                      // 00000000001C: C8100000
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000020: C80D0101
  v_mul_legacy_f32  v2, v2, v2                          // 000000000024: 0E040502
  s_buffer_load_dwordx4  s[4:7], s[4:7], 0x04           // 000000000028: C2820504
  v_interp_p2_f32  v4, v1, attr0.x                      // 00000000002C: C8110001
  v_mac_f32     v2, v3, v3                              // 000000000030: 3E040703
  v_mac_f32     v2, v4, v4                              // 000000000034: 3E040904
  v_rsq_f32     v2, v2                                  // 000000000038: 7E045D02
  v_mul_legacy_f32  v2, v3, v2                          // 00000000003C: 0E040503
  v_mad_f32     v2, v2, 0.5, 0.5                        // 000000000040: D2820002 03C1E102
  s_waitcnt     lgkmcnt(0)                              // 000000000048: BF8C007F
  v_mov_b32     v3, s0                                  // 00000000004C: 7E060200
  v_mov_b32     v4, s1                                  // 000000000050: 7E080201
  v_mov_b32     v5, s2                                  // 000000000054: 7E0A0202
  v_interp_p1_f32  v6, v0, attr1.x                      // 000000000058: C8180400
  v_interp_p1_f32  v7, v0, attr1.y                      // 00000000005C: C81C0500
  v_interp_p1_f32  v8, v0, attr1.z                      // 000000000060: C8200600
  v_mac_f32     v3, s4, v2                              // 000000000064: 3E060404
  v_mac_f32     v4, s5, v2                              // 000000000068: 3E080405
  v_mac_f32     v5, s6, v2                              // 00000000006C: 3E0A0406
  v_interp_p2_f32  v6, v1, attr1.x                      // 000000000070: C8190401
  v_interp_p2_f32  v7, v1, attr1.y                      // 000000000074: C81D0501
  v_interp_p2_f32  v8, v1, attr1.z                      // 000000000078: C8210601
  v_mul_legacy_f32  v2, v3, v6                          // 00000000007C: 0E040D03
  v_mul_legacy_f32  v3, v4, v7                          // 000000000080: 0E060F04
  v_mul_legacy_f32  v4, v5, v8                          // 000000000084: 0E081105
  v_interp_p1_f32  v0, v0, attr1.w                      // 000000000088: C8000700
  v_interp_p2_f32  v0, v1, attr1.w                      // 00000000008C: C8010701
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000090: 5E020702
  v_cvt_pkrtz_f16_f32  v0, v4, v0                       // 000000000094: 5E000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000098: F8001C0F 00000001
  s_endpgm                                              // 0000000000A0: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   9
//  NumSRegs:                   10
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   80
//  CycleSimNWaves:             80
//  Code Size:                  164
//Assembler Counts:
//  num_32bit_ops                     : 37
//  num_64bit_ops                     : 2
//  num_alu                           : 31
//  num_fc                            : 7
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 0
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 1
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 4
//  num_inst_vop2                     : 12
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 14
//  constant_literal_operands         : 0
//  num_tex                           : 1
//  num_vmem_group                    : 0
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 9
// m_uNumSRegs                       : 10
// m_uSCCodeSize                     : 164
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 80
// m_uCycleSimNWaves                 : 80

// Assembler Counts:
// num_32bit_ops                     : 37
// num_64bit_ops                     : 2
// num_alu                           : 31
// num_fc                            : 7
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 0
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 1
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 4
// num_inst_vop2                     : 12
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 14
// num_inst_smem                     : 3
// constant_literal_operands         : 0
// num_tex                           : 1
// num_vmem_group                    : 0
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DebugEffect_PSHemiAmbient[] =
{
     68,  88,  66,  67,  54, 209, 
    148, 117,  69,   6, 173, 115, 
    101,  91, 229,  18,  12, 253, 
    248, 125,   1,   0,   0,   0, 
     10,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0, 156,   4,   0,   0, 
    172,   4,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   0, 
      0,   0, 104,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   7,   7, 
      0,   0, 113,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,  15,  15, 
      0,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0,  67, 
     79,  76,  79,  82,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 172,   3,   0,   0, 
     80,   0,   0,   0, 235,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  75,   0, 
      0,   0,  80,   0,   0,   0, 
     70,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  13,   0,   0,   0, 
     98,  16,   0,   3, 114,  16, 
     16,   0,   2,   0,   0,   0, 
     98,  16,   0,   3, 242,  16, 
     16,   0,   3,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   1,   0, 
      0,   0,  16,   0,   0,   7, 
     18,   0,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      2,   0,   0,   0,  70,  18, 
     16,   0,   2,   0,   0,   0, 
     68,   0,   0,   5,  18,   0, 
     16,   0,   0,   0,   0,   0, 
     10,   0,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
     18,   0,  16,   0,   0,   0, 
      0,   0,  10,   0,  16,   0, 
      0,   0,   0,   0,  26,  16, 
     16,   0,   2,   0,   0,   0, 
     50,   0,   0,   9,  18,   0, 
     16,   0,   0,   0,   0,   0, 
     10,   0,  16,   0,   0,   0, 
      0,   0,   1,  64,   0,   0, 
      0,   0,   0,  63,   1,  64, 
      0,   0,   0,   0,   0,  63, 
     50,   0,   0,  11, 114,   0, 
     16,   0,   0,   0,   0,   0, 
      6,   0,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16,   0,   3,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,  16,  16,   0,   3,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 160,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 183,  15,   0, 120,   1, 
    237,  87, 207, 107,  19,  65, 
     20, 126,  51,  59, 187, 217, 
    196,  38, 177, 183,  20,  42, 
     86,  80, 244, 228,  89,  84, 
    130, 209, 248,   3, 122,  48, 
    208, 130, 165, 172, 105,  77, 
    179, 169,   1, 211, 150,  36, 
    138,   7, 141,  53,  55,  65, 
    196, 147, 120, 172, 208, 255, 
     65,  79, 166, 246,  52, 103, 
     47, 122, 245, 230, 177, 199, 
     30,   4, 125, 223,  58,  35, 
    107, 180, 183,   5, 133, 238, 
      7, 223, 123, 251, 205, 188, 
    153, 188, 157, 217, 192, 123, 
    111, 139,  20,  33, 251,  98, 
    251,   8, 124, 231, 217, 133, 
    122,  73,  16, 185, 252, 204, 
     46, 242, 192, 235,  60,  44, 
     81, 179,   0,  75, 116,   6, 
      6,   1, 146, 215, 178, 203, 
     49, 183, 153, 151, 152, 152, 
    179,  36, 218, 171, 180,  90, 
    254, 101,  14,  35, 159, 137, 
    216, 154, 225,  41,  38, 198, 
    143,  51,  51,  76, 108,  55, 
     14,   7, 134,  49,  62, 167, 
    152,  19,  76,  11, 164, 117, 
     80,  44, 133,  48, 127, 199, 
    105,  38, 114,  58,   8, 200, 
    205,   2, 251,  34,  79,   0, 
    239, 251, 175,  49, 254, 158, 
    208, 246, 158,   0, 220,  71, 
     28,  56,  35, 187, 230,  34, 
      4, 195, 234, 154, 209,  56, 
     11, 188, 219,  14, 243,  32, 
    124, 103, 224, 252, 227, 176, 
     26, 247, 233,  73,  62, 165, 
    163, 236,  29,  62, 189,  18, 
     15,  28,  50, 196, 207,   2, 
    228, 163,  32, 243,  55, 139, 
     96, 231,  79, 194, 208, 230, 
      8, 124,  89, 162, 125,  40, 
    171,   5, 107, 172, 181, 218, 
    129, 142,  62, 240, 152, 102, 
     37,  51, 178, 174,   4, 213, 
    139, 211, 180, 143, 187, 100, 
     29, 176,  14,  98, 122, 145, 
    245,  98,  76,  47, 179,  94, 
    142, 233,   6, 235, 134, 213, 
    118, 255,  98, 244, 123,  42, 
    186, 107,  30,  28, 252, 207, 
     76, 115,  76, 134, 105, 142, 
    201,  48, 205,  49,  25, 166, 
     57,  38, 195,  52, 199, 100, 
    152, 230, 152,  12, 211,  28, 
     19,  35,  23, 240, 195,  29, 
    233, 124, 123,  79, 210, 215, 
     36,  38, 180, 144,  89, 253, 
    132, 158, 143, 200, 221, 220, 
    229, 202,  83,  11, 145, 215, 
    210,  85,   5, 229,  14, 119, 
      5,  77, 106,  39, 163, 202, 
     42, 171, 202, 242, 182,  26, 
     56,  60,  46, 105, 248,  81, 
    126, 249, 224,  68, 107, 164, 
     55,  16, 210,  31,  72, 153, 
     27, 144,  42, 105, 114, 167, 
     53, 121,  51,  90,  41, 175, 
    236,  42, 191, 236, 169,  92, 
     89, 168,  41,  45, 220,  99, 
     90, 120,  39, 180, 147, 231, 
    125, 139,  94, 193, 157, 244, 
     11, 220,  24, 105, 145,  17, 
    154, 235, 201, 223, 234,  81, 
    162, 167, 163,  41,  60, 252, 
     44, 102, 127,  33, 146,  28, 
     24, 199, 150, 233,  65,  30, 
     25, 143, 250,  24, 253, 136, 
     48, 157,  29,  90,  27,  69, 
     30,  91, 162,  87, 215,  30, 
    127,  90, 125, 243, 117,  11, 
    207, 192, 103, 179, 230, 157, 
    241,  51, 204, 120, 127, 248, 
    103,  55, 100,  96,  10, 243, 
     61, 179,  14, 181,  58, 234, 
    243, 130, 237, 124, 237, 126, 
     38, 174, 100,  60, 122,  89, 
     52, 204, 227, 121, 156,  51, 
    243, 183, 152, 200, 180, 122, 
     62, 168, 204,  95,  15, 122, 
    253, 165, 102, 248,  32, 152, 
    109, 247, 123,  65, 181, 221, 
     13,  87, 250,  11, 243, 179, 
     65, 175, 187,  18, 204, 221, 
    189, 211,  12, 187, 189, 224, 
    202, 122, 103, 163, 125,  47, 
    108,   6,  11, 141, 245, 135, 
     55, 215, 194, 106, 216, 184, 
    191, 122, 181, 213, 226, 208, 
    165, 218, 220, 141, 176, 211, 
    174, 116,  26, 237, 112, 173, 
    127, 118, 163, 217, 160,  31, 
    242,  40, 226,  28,  88,  72, 
     83,  72,   8,   0,   0,   0, 
    150,  70, 125, 215, 103, 161, 
    232, 160,  88,  80,  68,  80, 
     86,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  68, 101,  98, 117, 103, 
     69, 102, 102, 101,  99, 116, 
     95,  80,  83,  72, 101, 109, 
    105,  65, 109,  98, 105, 101, 
    110, 116,  46, 112, 100,  98
};
