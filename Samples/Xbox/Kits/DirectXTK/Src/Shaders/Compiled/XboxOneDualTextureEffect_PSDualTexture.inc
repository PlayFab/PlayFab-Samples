#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float      w
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1     zw        2     NONE   float     zw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[115]
// Embedded Data:
//  0x00000073 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000006e - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_input_ps linear v2.zw
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.zwzz, t1.xyzw, s1
mul r0.xyzw, r0.xyzw, v0.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 1.000000)
mul r0.xyzw, r0.xyzw, r1.xyzw
mad r1.xyz, cb0[1].xyzx, r0.wwww, -r0.xyzx
mad o0.xyz, v1.wwww, r1.xyzx, r0.xyzx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[115], bundle is:[188] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDualTextureEffect_PSDualTexture.pdb
// Shader Semantic Hash      : 0x8bc28658bdbc2874
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  8, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask 15, param2, paramSlot2, DefaultVal={0,0,0,0}

codeLenInByte        = 252 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 5;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
;  extUserElements 1[4] = IMM_CONST_BUFFER 0, offset 0x18:27 dwords
NumVgprs             = 14;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000003
SPIC:NUM_INTERP             = 3
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0xE8, dwords=0x3A)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v5, off, off done vm          // 000000000008: F8001803 00000502
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000004: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000004: 5C020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000004: 5A020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000004: 60020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000004: 62020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v5 done vm            // 000000000008: F800180F 05040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 00000000000C: C0CA0110
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr2.z                      // 000000000014: C8080A00
  v_interp_p1_f32  v3, v0, attr2.w                      // 000000000018: C80C0B00
  v_interp_p1_f32  v4, v0, attr2.x                      // 00000000001C: C8100800
  v_interp_p1_f32  v5, v0, attr2.y                      // 000000000020: C8140900
  v_interp_p2_f32  v2, v1, attr2.z                      // 000000000024: C8090A01
  v_interp_p2_f32  v3, v1, attr2.w                      // 000000000028: C80D0B01
  v_interp_p2_f32  v4, v1, attr2.x                      // 00000000002C: C8110801
  v_interp_p2_f32  v5, v1, attr2.y                      // 000000000030: C8150901
  s_waitcnt     lgkmcnt(0)                              // 000000000034: BF8C007F
  image_sample  v[6:9], v[2:3], s[12:19], s[24:27] dmask:0xf // 000000000038: F0800F00 00C30602
  image_sample  v[2:5], v[4:5], s[4:11], s[20:23] dmask:0xf // 000000000040: F0800F00 00A10204
  s_load_dwordx4  s[0:3], s[0:1], 0x18                  // 000000000048: C0800118
  s_waitcnt     lgkmcnt(0)                              // 00000000004C: BF8C007F
  s_buffer_load_dwordx4  s[0:3], s[0:3], 0x04           // 000000000050: C2800104
  v_interp_p1_f32  v10, v0, attr0.x                     // 000000000054: C8280000
  v_interp_p1_f32  v11, v0, attr0.y                     // 000000000058: C82C0100
  v_interp_p1_f32  v12, v0, attr0.z                     // 00000000005C: C8300200
  v_interp_p1_f32  v13, v0, attr0.w                     // 000000000060: C8340300
  v_interp_p2_f32  v10, v1, attr0.x                     // 000000000064: C8290001
  v_interp_p2_f32  v11, v1, attr0.y                     // 000000000068: C82D0101
  v_interp_p2_f32  v12, v1, attr0.z                     // 00000000006C: C8310201
  v_interp_p2_f32  v13, v1, attr0.w                     // 000000000070: C8350301
  s_waitcnt     vmcnt(1)                                // 000000000074: BF8C0F71
  v_mul_legacy_f32  v6, v6, v10                         // 000000000078: 0E0C1506
  v_mul_legacy_f32  v7, v7, v11                         // 00000000007C: 0E0E1707
  v_mul_legacy_f32  v8, v8, v12                         // 000000000080: 0E101908
  v_mul_legacy_f32  v9, v9, v13                         // 000000000084: 0E121B09
  s_waitcnt     vmcnt(0)                                // 000000000088: BF8C0F70
  v_max_f32     v2, v2, v2 mul:2                        // 00000000008C: D2200002 08020502
  v_max_f32     v3, v3, v3 mul:2                        // 000000000094: D2200003 08020703
  v_max_f32     v4, v4, v4 mul:2                        // 00000000009C: D2200004 08020904
  v_mul_legacy_f32  v2, v6, v2                          // 0000000000A4: 0E040506
  v_mul_legacy_f32  v3, v7, v3                          // 0000000000A8: 0E060707
  v_mul_legacy_f32  v4, v8, v4                          // 0000000000AC: 0E080908
  v_mul_legacy_f32  v5, v9, v5                          // 0000000000B0: 0E0A0B09
  v_interp_p1_f32  v0, v0, attr1.w                      // 0000000000B4: C8000700
  s_waitcnt     lgkmcnt(0)                              // 0000000000B8: BF8C007F
  v_mad_legacy_f32  v6, s0, v5, -v2                     // 0000000000BC: D2800006 840A0A00
  v_mad_legacy_f32  v7, s1, v5, -v3                     // 0000000000C4: D2800007 840E0A01
  v_mad_legacy_f32  v8, s2, v5, -v4                     // 0000000000CC: D2800008 84120A02
  v_interp_p2_f32  v0, v1, attr1.w                      // 0000000000D4: C8010701
  v_mac_f32     v2, v0, v6                              // 0000000000D8: 3E040D00
  v_mac_f32     v3, v0, v7                              // 0000000000DC: 3E060F00
  v_mac_f32     v4, v0, v8                              // 0000000000E0: 3E081100
  s_mov_b64     exec, s[28:29]                          // 0000000000E4: BEFE041C
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 0000000000E8: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 0000000000EC: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000F0: F8001C0F 00000100
  s_endpgm                                              // 0000000000F8: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   14
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   84
//  CycleSimNWaves:             84
//  Code Size:                  252
//Assembler Counts:
//  num_32bit_ops                     : 45
//  num_64bit_ops                     : 9
//  num_alu                           : 37
//  num_fc                            : 14
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 6
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 13
//  num_inst_vop3                     : 3
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 18
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 14
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 252
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 84
// m_uCycleSimNWaves                 : 84

// Assembler Counts:
// num_32bit_ops                     : 45
// num_64bit_ops                     : 9
// num_alu                           : 37
// num_fc                            : 14
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 6
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 13
// num_inst_vop3                     : 3
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 18
// num_inst_smem                     : 4
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DualTextureEffect_PSDualTexture[] =
{
     68,  88,  66,  67, 136, 137, 
     96, 126, 112, 163,   0,  13, 
     80, 159,  12, 150, 165, 145, 
    204,  96,   1,   0,   0,   0, 
     40,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0, 180,   5,   0,   0, 
    196,   5,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   8, 
      0,   0, 110,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 110,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,  12,  12, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 196,   4,   0,   0, 
     80,   0,   0,   0,  49,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 115,   0, 
      0,   0,  80,   0,   0,   0, 
    110,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   7,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      1,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    130,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    194,  16,  16,   0,   2,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      2,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
    230,  26,  16,   0,   2,   0, 
      0,   0,  70, 126,  16,   0, 
      1,   0,   0,   0,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     56,   0,   0,   7, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   0,   0, 
      0,   0,  70,  30,  16,   0, 
      0,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   1,   0,   0,   0, 
     70,  16,  16,   0,   2,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,  10, 242,   0, 
     16,   0,   1,   0,   0,   0, 
     70,  14,  16,   0,   1,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0,   0,  64,   0,   0, 
      0,  64,   0,   0,   0,  64, 
      0,   0, 128,  63,  56,   0, 
      0,   7, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,  11, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0, 246,  15,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      0,   0,   0,   0,  50,   0, 
      0,   9, 114,  32,  16,   0, 
      0,   0,   0,   0, 246,  31, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  54,   0, 
      0,   5, 130,  32,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     62,   0,   0,   1,  53,  16, 
      0,   0, 190,   0,   0,   0, 
     23,   0,   1,   0,  41, 101, 
     16,   0, 120,   1, 237,  87, 
     77,  75,  84,  81,  24, 126, 
    207, 185, 119, 238, 215, 140, 
    119,  70,  81,  82,  20, 114, 
     81,  96, 144,  89, 216,   7, 
    184, 144,  50, 163, 192,  69, 
    129, 179,  16, 185, 165, 142, 
    115,  37, 193, 210, 102, 198, 
    112, 101,  55, 176,  54, 185, 
      8, 106,  97, 209,  38, 104, 
    225,  79, 104,  97,  51, 147, 
    109,  14,  45, 253,   5, 253, 
      4,  23,  45,  12, 196, 122, 
    223, 123, 207, 209, 171, 229, 
    110, 160, 160, 251, 192, 115, 
    222, 251, 188, 231, 227,  62, 
    103, 206,  29,  56, 175, 159, 
    131,  16, 153, 239, 207,  54, 
     40, 154, 175, 126, 156, 252, 
    200,   0,  82, 248, 140,  33, 
    140, 132, 181,  38, 106, 113, 
     92, 150,  90, 128,  30, 106, 
    104,   0,   7, 112,  49, 116, 
     35, 119, 145,  87, 145, 212, 
    167, 216, 223, 223,  55, 244, 
    246, 205, 149,  33, 124, 132, 
     78,  36, 141, 205,  75, 246, 
     34, 109, 228, 105,  36, 229, 
    105,  57,   2,  46, 185,  15, 
    131,  26, 132,  78, 205,  17, 
    144,  37,  13,  73, 104,  65, 
    170,  49, 148,  83, 107, 133, 
    240, 169, 249,  51,  46,  35, 
    233, 221, 199, 129, 188,  41, 
     63, 180, 166,  26,  75, 251, 
    253, 219, 136, 246,  24, 185, 
     83, 123,  86, 231,  68, 160, 
    243, 136, 131, 188,  71, 115, 
      0,  94, 203, 141, 168, 243, 
     93, 151, 154,   2, 237, 173, 
    142,  60,  14,  63,  17,  93, 
    244,  16, 131, 210, 228, 195, 
    128, 232,  35,  49,  88,  59, 
    128, 133, 145, 247,   1, 200, 
    239, 236, 127,  64, 252,  59, 
    164, 211, 161, 173, 203, 191, 
     77,   8, 213,  63,  64,  13, 
      4,  53, 226, 203, 118, 216, 
     33, 165,  52, 254, 116,  59, 
    209, 201,  70,  90,  35,  77, 
     11, 198,  53,  30,  30,  55, 
    225, 158, 158, 230, 247, 178, 
     93,  56,  31,  15,  23, 181, 
    135, 218, 139, 233, 113, 212, 
    227,  49,  61, 137, 122,  50, 
    166,  11, 168,  11,  74, 171, 
    245, 179, 225, 251, 244,  20, 
    157,  53,  38, 151, 255, 101, 
     38,  30,  27, 195, 196,  99, 
     99, 152, 120, 108,  12,  19, 
    143, 141,  97, 226, 177,  49, 
     76,  60,  54, 134, 137, 199, 
    134,  17, 150, 245, 119, 213, 
    101, 103, 175,  10, 140, 127, 
    206, 177, 175, 117, 174, 237, 
     86, 193, 177,   4, 164,  51, 
      2, 172, 156,   0, 187,  85, 
     48, 199,  22,  44, 221,  36, 
    152, 213,  44, 152, 221,  38, 
    158, 192, 106,  13, 178, 193, 
     54,  55, 190, 224, 197,  52, 
    216, 214, 249, 123, 104, 103, 
     65, 157, 242,  58,  11,  54, 
    177, 114,  19, 192, 206,  10, 
    224, 231,   5, 104,  23,   5, 
    131,  51, 130, 177,  94, 193, 
    248,   5, 193, 180,  75, 226, 
     81, 118, 181, 102, 180, 101, 
     92, 243, 132, 235,  90,  29, 
     57, 215, 238, 108, 113,  23, 
     48, 199, 161, 123, 139, 167, 
    184, 165,  97, 212,  76, 110, 
    233,  24, 117, 155,  91,  70, 
     74, 119,  77, 211, 112,  45, 
    219, 114, 237, 180, 227, 130, 
      9, 161,   7,   3, 130,  45, 
    112, 156,  21,  19,  35, 115, 
    220,  21,  11,  35, 119,  90, 
     86, 152, 201,   4,  52, 233, 
    131, 144,  53,   6, 161, 217, 
     26, 236, 210, 247, 170, 120, 
     79,  61, 116, 207,   5, 120, 
     90, 235, 160,  24,  93, 146, 
     15, 195,  10,   7,  28, 128, 
     36, 230, 176,  20, 217,  71, 
     56,  66, 103, 135, 202,  18, 
     70,  73, 204, 181,  98,  80, 
      8, 151, 199,  28,  86,  50, 
    251, 184,  37,  47, 243, 167, 
     84,  68,  82,  29, 203, 194, 
     27,  63, 214, 208,  72,  93, 
     86, 174, 149, 158, 141,  79, 
     99, 207,  55,  95, 208,  51, 
     33, 144, 115,  38, 101, 164, 
     90,  43, 131,  60, 192,   7, 
    106, 126, 195, 186,  28, 191, 
     38,  35, 249, 166,  58, 194, 
     85,  21, 156, 172, 223, 132, 
    236, 175, 203,  72, 123,  78, 
     35, 143, 250, 248,  38, 251, 
    239,  34, 201, 233, 240, 128, 
    119,  45, 127, 211,  43,  87, 
     38, 138, 254,  99, 111, 100, 
    182,  82, 246, 134, 103,  75, 
    254, 116, 101,  44,  63, 226, 
    149,  75, 211, 222, 232, 253, 
    169, 162,  95,  42, 123, 215, 
    231,  31,  44, 204, 206, 249, 
     69, 111, 172,  48, 191, 116, 
    251, 161,  63, 188,  56,  53, 
    151, 247, 151,  42, 139,  37, 
    255, 198, 204,  12,  78, 152, 
    184,  51,  26, 203, 157,  91, 
     40,  22, 224,  23, 236,  75, 
      2, 114,  88,  72,  83,  72, 
      8,   0,   0,   0, 116,  40, 
    188, 189,  88, 134, 194, 139, 
     88,  80,  68,  80,  92,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  68, 
    117,  97, 108,  84, 101, 120, 
    116, 117, 114, 101,  69, 102, 
    102, 101,  99, 116,  95,  80, 
     83,  68, 117,  97, 108,  84, 
    101, 120, 116, 117, 114, 101, 
     46, 112, 100,  98
};
