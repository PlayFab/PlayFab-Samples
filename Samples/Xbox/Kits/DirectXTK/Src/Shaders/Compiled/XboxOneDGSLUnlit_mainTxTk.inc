#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float       
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyz         5     NONE   float       
// TEXCOORD                 4   xyzw        6     NONE   float       
// TEXCOORD                 5   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[67]
// Embedded Data:
//  0x00000043 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000003e - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.w, r0.w, v1.w
eq r1.x, r0.w, l(0.000000)
discard_nz r1.x
mul o0.xyz, r0.xyzx, v1.xyzx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[67], bundle is:[158] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDGSLUnlit_mainTxTk.pdb
// Shader Semantic Hash      : 0xf40f8239754becb1
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask 15, param0, paramSlot1, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 2, channelMask  3, param1, paramSlot2, DefaultVal={0,0,0,0}

codeLenInByte        = 144 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 8;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000050
DB:Z_ORDER                  = 1
DB:KILL_ENABLE              = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x7C, dwords=0x1F)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v5, off, off done vm          // 000000000008: F8001803 00000501
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v5                       // 000000000004: 5E000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v0, v5                      // 000000000004: 5C000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v0, v5                      // 000000000004: 5A000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v0, v5                          // 000000000004: 60000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v0, v5                          // 000000000004: 62000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v0, v5 done vm            // 000000000008: F800180F 05000201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000014: C8080400
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000018: C80C0500
  v_interp_p2_f32  v2, v1, attr1.x                      // 00000000001C: C8090401
  v_interp_p2_f32  v3, v1, attr1.y                      // 000000000020: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610202
  v_interp_p1_f32  v6, v0, attr0.w                      // 000000000030: C8180300
  v_interp_p2_f32  v6, v1, attr0.w                      // 000000000034: C8190301
  s_waitcnt     vmcnt(0)                                // 000000000038: BF8C0F70
  v_mul_legacy_f32  v5, v5, v6                          // 00000000003C: 0E0A0D05
  v_cmp_eq_f32  vcc, 0, v5                              // 000000000040: 7C040A80
  s_andn2_b64   s[16:17], s[16:17], vcc // wrscc        // 000000000044: 8A906A10
  s_cbranch_scc0  label_001E                            // 000000000048: BF84000B
  s_and_b64     exec, exec, s[16:17] // wrscc           // 00000000004C: 87FE107E
  s_wqm_b64     exec, exec // wrscc                     // 000000000050: BEFE0A7E
  v_interp_p1_f32  v6, v0, attr0.x                      // 000000000054: C8180000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000058: C81C0100
  v_interp_p1_f32  v0, v0, attr0.z                      // 00000000005C: C8000200
  v_interp_p2_f32  v6, v1, attr0.x                      // 000000000060: C8190001
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000064: C81D0101
  v_interp_p2_f32  v0, v1, attr0.z                      // 000000000068: C8010201
  v_mul_legacy_f32  v1, v2, v6                          // 00000000006C: 0E020D02
  v_mul_legacy_f32  v2, v3, v7                          // 000000000070: 0E040F03
  v_mul_legacy_f32  v0, v4, v0                          // 000000000074: 0E000104
label_001E:
  s_mov_b64     exec, s[16:17]                          // 000000000078: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 00000000007C: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v5                       // 000000000080: 5E000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000084: F8001C0F 00000001
  s_endpgm                                              // 00000000008C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   8
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   80
//  CycleSimNWaves:             80
//  Code Size:                  144
//Assembler Counts:
//  num_32bit_ops                     : 32
//  num_64bit_ops                     : 2
//  num_alu                           : 19
//  num_fc                            : 13
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 2
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 6
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 12
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 8
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 144
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 80
// m_uCycleSimNWaves                 : 80

// Assembler Counts:
// num_32bit_ops                     : 32
// num_64bit_ops                     : 2
// num_alu                           : 19
// num_fc                            : 13
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 2
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 6
// num_inst_vop3                     : 0
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 12
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DGSLUnlit_mainTxTk[] =
{
     68,  88,  66,  67, 100, 218, 
     16, 162, 101,  69,  48, 234, 
    205,  34, 164, 103, 191,  12, 
    220, 174,   1,   0,   0,   0, 
     79,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
     32,   1,   0,   0,  84,   1, 
      0,   0, 232,   4,   0,   0, 
    248,   4,   0,   0,  73,  83, 
     71,  78, 228,   0,   0,   0, 
      8,   0,   0,   0,   8,   0, 
      0,   0, 200,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0, 212,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 218,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 218,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      5,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      6,   0,   0,   0,  15,   0, 
      0,   0, 218,   0,   0,   0, 
      5,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      7,   0,   0,   0,   7,   0, 
      0,   0,  83,  86,  95,  80, 
     79,  83,  73,  84,  73,  79, 
     78,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 140,   3,   0,   0, 
     80,   0,   0,   0, 227,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  67,   0, 
      0,   0,  80,   0,   0,   0, 
     62,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3, 242,  16, 
     16,   0,   1,   0,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   2,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   2,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   2,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 130,   0,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     58,  16,  16,   0,   1,   0, 
      0,   0,  24,   0,   0,   7, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,   1,  64, 
      0,   0,   0,   0,   0,   0, 
     13,   0,   4,   3,  10,   0, 
     16,   0,   1,   0,   0,   0, 
     56,   0,   0,   7, 114,  32, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  54,   0, 
      0,   5, 130,  32,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     62,   0,   0,   1,  53,  16, 
      0,   0, 160,   0,   0,   0, 
     23,   0,   1,   0,  41, 164, 
     15,   0, 120,   1, 237,  87, 
    191, 107,  19,  81,  28, 255, 
    190, 203,  93,  72, 243, 227, 
     46,  96, 193,   4,  42, 138, 
     83,   7, 113,  87,  28,  12, 
      6,  58,  68,  80, 104, 132, 
     82, 143, 182,  73, 115, 197, 
    104, 155, 134,  36,  74, 135, 
     18, 163,  72,   5, 233, 144, 
    193,  65, 157,  59, 234, 224, 
     32, 110,  73, 112, 122, 131, 
    254,  11,  78, 186,  57,  56, 
    116, 232,  32, 209, 239,  39, 
    247,  30,  94, 171, 221,  14, 
     20, 122,  31, 248, 124, 191, 
    247, 185, 247, 189, 111,  62, 
    121, 239,  14, 222, 219, 115, 
    104, 130, 211,  59, 239, 191, 
     34, 191, 123, 115, 251, 224, 
    128, 179, 197,  20,  42,   3, 
     47,  50, 136,  68,  53,  27, 
    145, 104,  22,   1,   5,   6, 
     81, 130, 211,  52, 179, 207, 
    188, 202, 196, 152, 230, 171, 
    151, 159,  10, 107, 107, 159, 
     11, 124,  73, 104, 145, 100, 
    222,  84,  60, 199, 228, 199, 
    233,  20,  19,  99, 104,   7, 
    232,  12, 152,   8,  12, 248, 
     64, 109,  16, 113,   4,   6, 
    234, 211,  76,  61, 142,  28, 
    236,  65,  30, 194, 223, 113, 
    158,   9, 255, 199,   1, 222, 
    116,  47, 100, 248,   4, 240, 
    127, 255,  53, 124,  95, 193, 
    248, 123, 157,   0, 172,  71, 
     16,  88,  58,  93,  55, 171, 
    214,  81, 207, 217,  21, 165, 
    245,  90, 142, 152, 199, 225, 
     39,   3, 243,  29, 132, 214, 
    232,  23,  23, 252,  82, 113, 
    163, 184, 193, 179, 151, 229, 
     27,  39,  12, 250, 157, 197, 
     92, 128, 120, 215, 213, 103, 
     54, 129,  30,  63, 139,  64, 
    189,  33, 216, 207,  17,  62, 
     59, 134, 175,   5, 107, 127, 
    173, 124,  29, 131,  70, 179, 
    160, 230, 143,  66,  88, 198, 
     18, 165, 104, 201, 153,  97, 
    205, 163, 172,  93, 214, 110, 
     64,  47, 178,  94,  12, 232, 
     21, 214,  43,   1,  93, 101, 
     93, 213,  90, 247, 119, 252, 
    223, 179, 176, 214, 124, 179, 
    251,  63,  51, 242,  24,  14, 
     35, 143, 225,  48, 242,  24, 
     14,  35, 143, 225,  48, 242, 
     24,  14,  35, 143, 225,  48, 
    242,  24,  26, 169, 107, 246, 
      7, 221, 228, 120,  64, 226, 
    195,  40,  33, 118,  70,  70, 
    236, 199, 128, 204, 132,  36, 
     43,  45, 133,  57,  37, 133, 
    149, 145,  15, 105, 119,  72, 
     78, 239, 187,  97,  84, 136, 
     98,  57,  41,  98, 121, 217, 
    116, 118, 135,  86,  38, 105, 
    247, 146, 230, 118, 246, 110, 
    255,  89, 138, 158,  12, 187, 
    217, 241, 211,  73,  47, 202, 
     73,  18,  51, 146,  55, 175, 
     82,  80,  94,  10, 113,  70, 
     10,  67,  72,  35,  99, 216, 
     49, 199, 180,  77,  65, 118, 
    214,  28,  15, 120, 239, 120, 
    104, 239,  73, 244, 104, 152, 
    199, 197, 100, 159, 122,   4, 
      9, 191,  66,  99, 162, 184, 
     17, 206,  27,  26, 207, 213, 
     25, 100,  91, 229,  28, 115, 
    138, 105, 170, 147, 222, 219, 
    111, 165, 251, 151,  30,  59, 
    251, 184,   6,  62, 170, 186, 
    215,  42, 227,  60, 121, 248, 
     92, 178, 135, 240,   7, 246, 
     85, 253,  23, 149, 113,  68, 
    193, 158, 220, 214, 167,  93, 
    117, 127,  90, 109, 218, 211, 
     42, 195, 107, 138, 121, 212, 
    199,   5,  53, 142, 125,  62, 
    156,  22,  47, 187, 133, 242, 
    156, 219, 238,  44, 215, 188, 
      7, 110, 169, 222, 105, 187, 
    197, 122, 203,  91, 237,  44, 
    148,  75, 110, 187, 181, 234, 
    206, 223, 169, 212, 188,  86, 
    219, 189, 182, 185, 209, 172, 
    175, 123,  53, 119, 161, 186, 
    185, 117, 163, 225,  21, 231, 
    230, 175, 223, 106, 172, 215, 
     59, 203,  27, 149, 122, 163, 
    188,  85, 190, 119, 177,  89, 
    171, 210,  47, 118, 126, 233, 
    123,   0,  88,  72,  83,  72, 
      8,   0,   0,   0, 177, 236, 
     75, 117,  57, 130,  15, 244, 
     88,  80,  68,  80,  79,   0, 
      0,   0,  68,  58,  92,  65, 
     84,  71,  92, 115, 116,  95, 
    100, 101, 118,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  68, 
     71,  83,  76,  85, 110, 108, 
    105, 116,  95, 109,  97, 105, 
    110,  84, 120,  84, 107,  46, 
    112, 100,  98
};
