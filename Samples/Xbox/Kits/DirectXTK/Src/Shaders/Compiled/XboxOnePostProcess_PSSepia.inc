#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[75]
// Embedded Data:
//  0x0000004b - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000046 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
dp3 r1.x, r0.xyzx, l(0.393000, 0.769000, 0.189000, 0.000000)
dp3 r1.y, r0.xyzx, l(0.349000, 0.686000, 0.168000, 0.000000)
dp3 r1.z, r0.xyzx, l(0.272000, 0.534000, 0.131000, 0.000000)
mov r1.w, r0.w
mov o0.xyzw, r1.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[75], bundle is:[159] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : D:\ATG\st_dev\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSSepia.pdb
// Shader Semantic Hash      : 0x15c56bdf4f4bdd00
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 152 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 6;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x84, dwords=0x21)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v4, off, off done vm          // 000000000008: F8001803 00000402
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v2, v4                       // 000000000000: 5E020902
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000004: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v2, v4                      // 000000000000: 5C020902
  v_cvt_pknorm_u16_f32  v0, v0, v3                      // 000000000004: 5C000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v2, v4                      // 000000000000: 5A020902
  v_cvt_pknorm_i16_f32  v0, v0, v3                      // 000000000004: 5A000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v2, v4                          // 000000000000: 60020902
  v_cvt_pk_u16_u32  v0, v0, v3                          // 000000000004: 60000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v2, v4                          // 000000000000: 62020902
  v_cvt_pk_i16_i32  v0, v0, v3                          // 000000000004: 62000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v4, v0, v3 done vm            // 000000000008: F800180F 03000402
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000014: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 00000000001C: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000020: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610002
  s_waitcnt     vmcnt(0)                                // 000000000030: BF8C0F70
  s_nop         0x0000                                  // 000000000034: BF800000
  v_mul_legacy_f32  v4, 0x3e418937, v2                  // 000000000038: 0E0804FF 3E418937
  v_mul_legacy_f32  v5, 0x3e2c0831, v2                  // 000000000040: 0E0A04FF 3E2C0831
  v_mul_legacy_f32  v2, 0x3e0624dd, v2                  // 000000000048: 0E0404FF 3E0624DD
  v_madmk_f32   v4, v1, 0x3f44dd2f, v4                  // 000000000050: 40080901 3F44DD2F
  v_madmk_f32   v5, v1, 0x3f2f9db2, v5                  // 000000000058: 400A0B01 3F2F9DB2
  v_madmk_f32   v1, v1, 0x3f08b439, v2                  // 000000000060: 40020501 3F08B439
  v_madmk_f32   v2, v0, 0x3ec9374c, v4                  // 000000000068: 40040900 3EC9374C
  v_madmk_f32   v4, v0, 0x3eb2b021, v5                  // 000000000070: 40080B00 3EB2B021
  v_madmk_f32   v0, v0, 0x3e8b4396, v1                  // 000000000078: 40000300 3E8B4396
  s_mov_b64     exec, s[16:17]                          // 000000000080: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v2, v4                       // 000000000084: 5E020902
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000088: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 00000000008C: F8001C0F 00000001
  s_endpgm                                              // 000000000094: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   6
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   80
//  CycleSimNWaves:             80
//  Code Size:                  152
//Assembler Counts:
//  num_32bit_ops                     : 25
//  num_64bit_ops                     : 2
//  num_alu                           : 15
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 11
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 6
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 152
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 80
// m_uCycleSimNWaves                 : 80

// Assembler Counts:
// num_32bit_ops                     : 25
// num_64bit_ops                     : 2
// num_alu                           : 15
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 11
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSSepia[] =
{
     68,  88,  66,  67, 221,   3, 
     60,  65,  81, 123, 179, 102, 
    157, 145, 190, 167,  92, 147, 
    116, 157,   1,   0,   0,   0, 
    224,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 120,   4,   0,   0, 
    136,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 176,   3, 
      0,   0,  80,   0,   0,   0, 
    236,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     75,   0,   0,   0,  80,   0, 
      0,   0,  70,   0,   0,   0, 
    106,   8,   0,   1,  90,   0, 
      0,   3,   0,  96,  16,   0, 
      0,   0,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      0,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   1,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      2,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  16,  16,   0,   1,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     16,   0,   0,  10,  18,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
     76,  55, 201,  62,  47, 221, 
     68,  63,  55, 137,  65,  62, 
      0,   0,   0,   0,  16,   0, 
      0,  10,  34,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      2,  64,   0,   0,  33, 176, 
    178,  62, 178, 157,  47,  63, 
     49,   8,  44,  62,   0,   0, 
      0,   0,  16,   0,   0,  10, 
     66,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,   2,  64, 
      0,   0, 150,  67, 139,  62, 
     57, 180,   8,  63, 221,  36, 
      6,  62,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,   0, 
     16,   0,   1,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    242,  32,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    161,   0,   0,   0,  23,   0, 
      1,   0,  41, 173,  15,   0, 
    120,   1, 237,  87,  77, 107, 
     19,  81,  20, 189, 111,  50, 
    141, 147, 164,  77, 186, 168, 
    144,  98,  23,  22,  92, 184, 
     16, 171,  84,  40, 186, 152, 
     76, 104, 192,  69, 132,  68, 
    210,  69,  41,  67, 219, 124, 
     12,  24, 172,  38, 100, 130, 
    184,  49,  86,  16, 193, 143, 
     69,  87,  82,  65, 119, 110, 
     69,  41,  93,  39,  65,  16, 
    226,  74,  16, 183, 193,  63, 
    224, 194, 101,  23, 165, 241, 
    158, 228,  61, 156, 168, 221, 
     13,  40,  56,   7, 206, 189, 
    239, 204, 123, 115, 231, 100, 
    222,   4, 238, 123, 147, 160, 
     33,  62, 189, 184, 103,  33, 
    155,  79, 114, 159, 147, 130, 
    104, 130, 199, 156, 134,  25, 
    216, 157,  66,  36, 218, 138, 
     35,  18, 157,  69, 192,   2, 
    141,  40, 204, 105, 134, 185, 
    203,  68,  17, 204,  41,  46, 
     46, 190,  77,  19, 117, 153, 
     68,  40, 113, 130, 153, 151, 
    156, 101, 242, 237,   4,  11, 
     81,  38, 202,   1,  42,   3, 
     58,   2,  67, 101,  47,  98, 
      8,  18, 152,  71,  45,   0, 
    217,  91, 131,  28, 132,  63, 
    227,  20,  19, 254, 143,   3, 
    188, 169,  90, 200, 240,   9, 
    224, 247, 254, 109, 140, 124, 
    121, 227, 207, 125,   2, 176, 
     31,  94,  96, 235, 212, 186, 
     11, 114,  31, 213,  59, 203, 
     72, 173, 246, 178, 203,  60, 
     14,   3, 198,  36,   6,  30, 
     40, 141, 250,  97,  17,  34, 
     50, 120, 240, 159,  66, 125, 
    171, 120,  23, 120, 191, 211, 
     76, 124,  71,  10, 106, 126, 
     30, 129, 182,  59, 224,  78, 
    146,  14, 160, 148,  22, 172, 
     71, 123,  51, 210,  33, 232, 
    225, 141,  30, 205, 175,  89, 
    139, 104, 235, 252, 167,  90, 
     79, 204, 209, 193, 240, 121, 
     17, 205, 102, 109, 123, 244, 
     26, 235,  53, 143, 222, 100, 
    189, 233, 209,  37, 214,  37, 
    165,  85, 253, 196, 232, 121, 
     33, 236,  53,  95, 108, 253, 
    203,  12,  60, 250, 195, 192, 
    163,  63,  12,  60, 250, 195, 
    192, 163,  63,  12,  60, 250, 
    195, 192, 163,  63,  12,  60, 
    250,  70, 106, 233,  59, 237, 
     86, 244, 168,  77, 226, 125, 
    215,  16, 143, 186,  90, 232, 
    176, 205, 205, 119, 143, 196, 
    100,  79,  80, 164,  39, 196, 
     84, 239,  62,  61, 235,  80, 
     98, 251, 187,  70,  69, 170, 
     39, 120, 204, 253, 221,  64, 
     55, 226,  75, 143, 211, 230, 
     64, 143, 198,  47,  26, 231, 
     56, 235, 241, 254, 153, 176, 
     41,  34, 134, 181, 208, 207, 
    164,  68,  44, 106, 237, 189, 
     90,  72, 137,   9, 205, 186, 
    188, 111, 164,  40, 162,  91, 
    215, 150,  62, 154,  20,  51, 
    172, 249, 119, 123,  38, 133, 
    200, 122, 190, 252, 212, 156, 
    214, 143, 218, 220,  67, 142, 
    245, 160,  68,  15,  58, 179, 
     24, 140,  26, 216, 113,  24, 
    163,  21,  10,  67, 165, 139, 
    177, 227, 194,  75, 121,  22, 
    121,  40, 115, 146,  25,  97, 
    234, 234, 164, 214, 207, 230, 
    190, 222, 252, 112,  18,  67, 
    224, 139,  92, 183,  47, 243, 
    105, 230, 248, 249, 228,  53, 
    194, 111,  56, 148, 235, 191, 
    201, 140,  62,  29,  45, 118, 
     92, 157, 122, 229, 245,  57, 
    217, 188, 207, 200,  12, 175, 
    195, 179, 231,  47,  62,  46, 
    201, 249, 235,  76,  56, 205, 
     92, 177, 211,  43,  87, 109, 
    183, 185,  81, 113, 238, 216, 
    217, 106, 211, 181,  51, 213, 
    134,  83, 110, 174, 174, 100, 
    109, 183,  81, 182,  11,  55, 
    138,  21, 167, 225, 218, 203, 
    181,  91, 245, 234, 150,  83, 
    177,  87,  75, 181, 187, 185, 
    219,  78, 190, 230,  54, 243, 
    141,  90, 217, 113, 221, 141, 
    124, 161, 224, 212, 171, 197, 
    243, 245,  74, 137, 126,   0, 
    174,  33, 232, 170,  88,  72, 
     83,  72,   8,   0,   0,   0, 
      0, 221,  75,  79, 223, 107, 
    197,  21,  88,  80,  68,  80, 
     80,   0,   0,   0,  68,  58, 
     92,  65,  84,  71,  92, 115, 
    116,  95, 100, 101, 118,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  80, 111, 115, 116,  80, 
    114, 111,  99, 101, 115, 115, 
     95,  80,  83,  83, 101, 112, 
    105,  97,  46, 112, 100,  98
};
