//--------------------------------------------------------------------------------------
// CloudScripts.js
//
// Advanced Technology Group (ATG)
// Copyright (C) Microsoft Corporation. All rights reserved.
//--------------------------------------------------------------------------------------

// This file does not participate in the build process for this sample. It is used only as reference. The
// JavaScript here is a copy of what is run in the PlayFab servers when they are invoked from client code
// or triggered by preset conditions.

// This is a Cloud Script function. "args" is set to the value of the "FunctionParameter" 
// parameter of the ExecuteCloudScript API.
// (https://api.playfab.com/Documentation/Client/method/ExecuteCloudScript)
// "context" contains additional information when the Cloud Script function is called from a PlayStream action.
handlers.helloWorld = function (args, context) {
    
    // The pre-defined "currentPlayerId" variable is initialized to the PlayFab ID of the player logged-in on the game client. 
    // Cloud Script handles authenticating the player automatically.
    var message = "Hello " + currentPlayerId + "!";

    // You can use the "log" object to write out debugging statements. It has
    // three functions corresponding to logging level: debug, info, and error. These functions
    // take a message string and an optional object.
    log.info(message);
    var inputValue = null;
    if (args && args.inputValue)
        inputValue = args.inputValue;
    log.debug("helloWorld:", { input: args.inputValue });

    // The value you return from a Cloud Script function is passed back 
    // to the game client in the ExecuteCloudScript API response, along with any log statements
    // and additional diagnostic information, such as any errors returned by API calls or external HTTP
    // requests. They are also included in the optional player_executed_cloudscript PlayStream event 
    // generated by the function execution.
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels/player/player_executed_cloudscript)
    return { messageValue: message };
};

// This cloud script increments a player's virtual currency, but only allows the player to do so
// once every ten seconds.
handlers.addCurrencyToPlayer = function (args, context) {
  log.debug("Starting script to add currency.");
  
  var timeNow = Date.now();
  log.debug("Current server time: " + timeNow);
  
  var getRequest = {
    PlayFabId: currentPlayerId, Keys: [ "lastPayDay" ] };  
  var getResult = server.GetUserInternalData(getRequest);  
  var lastPayTime = getResult.Data["lastPayDay"];
  
  if(lastPayTime)
  {
    var lastTimeInMs = lastPayTime.Value;
    var timeLapse = timeNow - lastTimeInMs;
    log.debug("Time of previous payout: " + lastTimeInMs);
    
    if(timeLapse > 10000)
    {
      log.debug("Sufficient time has pass, adding more funds.");
      var currencyRequest = {
        Amount: 10, PlayFabId: currentPlayerId, VirtualCurrency: "DU"
      };
      server.AddUserVirtualCurrency(currencyRequest);
      var updateRequest = {
        PlayFabId: currentPlayerId, Data: {
          "lastPayDay": timeNow
        }};
      
      server.UpdateUserInternalData(updateRequest);
    }
    else
    {
      log.debug("Aborting! Funds can only be added once every 10 seconds.");
    }
  }
  else
  {
    log.debug("This is the first time money is being requested.");
    var currencyRequest = {
        Amount: 50, PlayFabId: currentPlayerId, VirtualCurrency: "DU"
      };
      server.AddUserVirtualCurrency(currencyRequest);
      var updateRequest = {
        PlayFabId: currentPlayerId, Data: {
          "lastPayDay": timeNow
        }};
      server.UpdateUserInternalData(updateRequest);
  }
  
  log.debug("Script completed.");
};

// This cloud script simply increments a stat tracking the total number of times the player
// has logged in. It is automatically run every time the player logs in for this title.
handlers.incrementLoginStat = function (args, context) {
  var updateRequest = {
    PlayFabId: currentPlayerId, Statistics: [{
      StatisticName: "LoginCount", Value: 1
    }]};
  
  server.UpdatePlayerStatistics(updateRequest);
};